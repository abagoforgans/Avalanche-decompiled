contract main {




// =====================  Runtime code  =====================


#
#  - mintWeaponWithStars(address arg1, uint256 arg2, uint256 arg3, uint8 arg4)
#  - getFightDataAndDrainDurability(uint256 arg1, uint8 arg2, uint8 arg3, bool arg4)
#  - mintGiveawayWeapon(address arg1, uint256 arg2, uint8 arg3)
#  - initialize()
#  - reforge(uint256 arg1, uint256 arg2)
#  - safeTransferFrom(address arg1, address arg2, uint256 arg3, bytes arg4)
#
const sub_3666c3b3(?) = sha3(Mask(96, 160, 'FEATURE_BITS') >> 160)

const sub_58024a83(?) = 1

const sub_6a4d521d(?) = sha3(0x64524543454956455f444f45535f4e4f545f5345545f5452414e534645525f54494d455354414d)

const sub_8c7f7242(?) = 3000

const getDurabilityMaxWait = 60000

const sub_f8e678a7(?) = 20

const GAME_ADMIN = sha3(336492626609784167942478)

const DEFAULT_ADMIN_ROLE = 0

const MINTER_ROLE = sha3(Mask(88, 168, 'MINTER_ROLE') >> 168)


mapping of uint8 stor51;
array of uint256 tokenOfOwnerByIndex;
array of struct tokenByIndex;
mapping of uint256 stor103;
mapping of address approved;
mapping of uint8 stor105;
array of uint256 name;
array of uint256 symbol;
mapping of struct stor108;
array of struct baseURI;
array of struct roleAdmin;
array of struct stor201;
array of struct stor202;
mapping of struct stor203;
uint256 sub_72945100;
uint256 sub_a1570c8e;
uint256 sub_350b7995;
uint256 sub_4c0647f6;
uint8 stor208; offset 64
uint64 stor208; offset 72
uint64 stor208; offset 128
uint64 stor208;
uint128 stor208; offset 184
uint128 stor208; offset 128
uint256 stor208;
uint128 stor209;
uint128 stor209; offset 128
uint256 stor209;
mapping of uint256 lastTransferTimestamp;
uint256 stor211;
uint256 stor212;
mapping of uint64 durabilityTimestamp;
mapping of struct stor214;
address promosAddress;
mapping of bool sub_58181425;
mapping of uint256 stor336492626609784167942478;
array of struct stor30232785535072749652971633506012447853310042529756156461386917081222683561697;
array of uint256 stor30232785535072749652971633506012447853310042529756156461386917081222683561698;
array of struct stor46472157311649131651317580928243384587355742660275723744700495089454914805032;
mapping of uint256 stor3269731817501803920542761250773857614993577729205637037621104172334018355238920736452960862541;

function supportsInterface(bytes4 arg1) payable {
    require calldata.size - 4 >= 32
    return bool(stor51[Mask(32, 224, arg1)])
}

function name() payable {
    return name[0 len name.length]
}

function getApproved(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor103[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    44,
                    0x774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[208 len 20]
    return approved[arg1]
}

function totalSupply() payable {
    return tokenByIndex.length
}

function getRoleAdmin(bytes32 arg1) payable {
    require calldata.size - 4 >= 32
    return roleAdmin[arg1].field_512
}

function tokenOfOwnerByIndex(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 >= tokenOfOwnerByIndex[address(arg1)]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0xfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64,
                    mem[198 len 30]
    return tokenOfOwnerByIndex[address(arg1)][arg2]
}

function sub_350b7995(?) payable {
    return sub_350b7995
}

function sub_4c0647f6(?) payable {
    return sub_4c0647f6
}

function tokenByIndex(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= tokenByIndex.length:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0x64456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64,
                    mem[198 len 30]
    return tokenByIndex[arg1].field_0
}

function promos() payable {
    return promosAddress
}

function sub_58181425(?) payable {
    require calldata.size - 4 >= 32
    return uint256(sub_58181425[arg1])
}

function ownerOf(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[169 len 23],
                    mem[215 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    return tokenByIndex[stor103[arg1] - 1].field_256
}

function baseURI() payable {
    return baseURI[0 len baseURI.length].field_0
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    42,
                    0x6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573,
                    mem[206 len 22]
    return tokenOfOwnerByIndex[address(arg1)]
}

function sub_72945100(?) payable {
    return sub_72945100
}

function getRoleMember(bytes32 arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 >= roleAdmin[arg1].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    34,
                    0xfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64,
                    mem[198 len 30]
    return roleAdmin[arg1][arg2].field_0
}

function hasRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return bool(roleAdmin[arg1][1][address(arg2)].field_0)
}

function symbol() payable {
    return symbol[0 len symbol.length]
}

function lastTransferTimestamp(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return lastTransferTimestamp[arg1]
}

function sub_a1570c8e(?) payable {
    return sub_a1570c8e
}

function getRoleMemberCount(bytes32 arg1) payable {
    require calldata.size - 4 >= 32
    return roleAdmin[arg1].field_0
}

function getDurabilityTimestamp(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    return durabilityTimestamp[arg1]
}

function isApprovedForAll(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    return bool(stor105[address(arg1)][address(arg2)])
}

function _fallback() payable {
    revert
}

function getStat1Trait(uint8 arg1) payable {
    require calldata.size - 4 >= 32
    return uint8(arg1 % 5)
}

function getStat2Trait(uint8 arg1) payable {
    require calldata.size - 4 >= 32
    return uint8(arg1 / 5 % 5)
}

function getStarsFromProperties(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    return (arg1 % 8)
}

function getStat3Trait(uint8 arg1) payable {
    require calldata.size - 4 >= 32
    return uint8(arg1 / 25 % 5)
}

function getTraitFromProperties(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    return (Mask(2, 3, arg1) >> 3)
}

function getStatPatternFromProperties(uint16 arg1) payable {
    require calldata.size - 4 >= 32
    return (Mask(7, 5, arg1) >> 5)
}

function getStatCount(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= 3:
        return uint8(arg1 - 1)
    return 1
}

function sub_d7af7ad2(?) payable {
    require calldata.size - 4 >= 32
    require roleAdmin[0][1][address(msg.sender)].field_0
    promosAddress = arg1
}

function getDustSupplies(address arg1) payable {
    require calldata.size - 4 >= 32
    mem[288 len 0] = None
    return Array(len=3, data=mem[288 len 96])
}

function oneFrac() payable {
    return ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))
}

function sub_586064f3(?) payable {
    return ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))))
}

function getStatMaxRoll(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 > 1:
        return 400
    if not arg1:
        return 200
    return 300
}

function sub_33ee5a53(?) payable {
    return ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))
}

function sub_c47efcf6(?) payable {
    return ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))))
}

function migrateTo_951a020() payable {
    require roleAdmin[0][1][address(msg.sender)].field_0
    stor51[0xe62e697400000000000000000000000000000000000000000000000000000000] = 1
}

function migrateTo_e55d8c5() payable {
    require roleAdmin[0][1][address(msg.sender)].field_0
    sub_72945100 = 2
    sub_a1570c8e = 15
    sub_350b7995 = 30
    sub_4c0647f6 = 60
}

function setBurnPointMultiplier(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    sub_72945100 = arg1
}

function getCosmeticsSeed(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor202.length
    return stor202[arg1]
}

function getStat3(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_48
}

function getStat1(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_16
}

function getLevel(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_64
}

function getStat2(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_32
}

function setLowStarBurnPowerPerPoint(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    sub_a1570c8e = arg1
}

function setFourStarBurnPowerPerPoint(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    sub_350b7995 = arg1
}

function setFiveStarBurnPowerPerPoint(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    sub_4c0647f6 = arg1
}

function getProperties(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_0
}

function getStatMinRoll(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not arg1:
        return 4
    if 1 == arg1:
        return 180
    if 2 == arg1:
        return 280
    if arg1 != 3:
        return 268
    return 200
}

function getDurabilityPointsFromTimestamp(uint64 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 > block.timestamp:
        return 0
    if block.timestamp - arg1 / 3000 <= 20:
        return uint8(block.timestamp - arg1 / 3000)
    return 20
}

function setDurabilityTimestamp(uint256 arg1, uint64 arg2) payable {
    require calldata.size - 4 >= 64
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    durabilityTimestamp[arg1] = arg2
}

function setApprovalForAll(address arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 == msg.sender:
        revert with 0, 'ERC721: approve to caller'
    stor105[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function getDurabilityPoints(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if durabilityTimestamp[arg1] > block.timestamp:
        return 0
    if block.timestamp - durabilityTimestamp[arg1] / 3000 <= 20:
        return uint8(block.timestamp - durabilityTimestamp[arg1] / 3000)
    return 20
}

function isDurabilityFull(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if durabilityTimestamp[arg1] > block.timestamp:
        return 0
    if block.timestamp - durabilityTimestamp[arg1] / 3000 <= 20:
        return uint8(block.timestamp - durabilityTimestamp[arg1] / 3000) >= 20
    return 1
}

function getTrait(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_3
}

function getStars(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_0
}

function getStatPattern(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
    require arg1 < stor201.length
    return stor201[arg1].field_5
}

function setFeatureEnabled(uint256 arg1, bool arg2) payable {
    require calldata.size - 4 >= 64
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    if not arg2:
        uint256(sub_58181425['FEATURE_BITS']) = !arg1 and uint256(sub_58181425['FEATURE_BITS'])
    else:
        uint256(sub_58181425['FEATURE_BITS']) = arg1 or uint256(sub_58181425['FEATURE_BITS'])
}

function getRandomStat(uint16 arg1, uint16 arg2, uint256 arg3, uint256 arg4) payable {
    require calldata.size - 4 >= 128
    if arg1 > arg2:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg2 + -arg1 + 1 <= 0:
        revert with 0, 'SafeMath: modulo by zero'
    require arg2 + -arg1 + 1
    if arg1 + (sha3(sha3(arg3, arg4)) % arg2 + -arg1 + 1) < sha3(sha3(arg3, arg4)) % arg2 + -arg1 + 1:
        revert with 0, 'SafeMath: addition overflow'
    return uint16(arg1 + (sha3(sha3(arg3, arg4)) % arg2 + -arg1 + 1))
}

function getRandomCosmetic(uint256 arg1, uint256 arg2, uint8 arg3) payable {
    require calldata.size - 4 >= 96
    if 0 > arg3:
        revert with 0, 'SafeMath: subtraction overflow'
    if arg3 + 1 < arg3:
        revert with 0, 'SafeMath: addition overflow'
    if arg3 + 1 <= 0:
        revert with 0, 'SafeMath: modulo by zero'
    require arg3 + 1
    if sha3(sha3(arg1, arg2)) % arg3 + 1 < sha3(sha3(arg1, arg2)) % arg3 + 1:
        revert with 0, 'SafeMath: addition overflow'
    return uint8(sha3(sha3(arg1, arg2)) % arg3 + 1)
}

function _calculateBurnValues(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 < stor201.length
    if stor201[arg1].field_0 >= 3:
        if stor201[arg1].field_0 != 3:
            if stor201[arg1].field_0 != 4:
                mem[288 len 0] = None
                return Array(len=3, data=mem[288 len 96])
            else:
                mem[288 len 0] = None
                return Array(len=3, data=mem[288 len 96])
        else:
            mem[288 len 0] = None
            return Array(len=3, data=mem[288 len 96])
    else:
        mem[288 len 0] = None
        return Array(len=3, data=mem[288 len 96])
}

function incrementDustSupplies(address arg1, uint32 arg2, uint32 arg3, uint32 arg4) payable {
    require calldata.size - 4 >= 128
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    require stor214[address(arg1)].field_0 + arg2 <= test266151307()
    require stor214[address(arg1)].field_32 + arg3 <= test266151307()
    require stor214[address(arg1)].field_64 + arg4 <= test266151307()
    stor214[address(arg1)].field_0 = (uint32(stor214[address(arg1)].field_64 + arg4) << 64) + (uint32(stor214[address(arg1)].field_32 + arg3) << 32) + uint32(stor214[address(arg1)].field_0 + arg2)
}

function getRandomProperties(uint256 arg1, uint256 arg2, uint8 arg3) payable {
    require calldata.size - 4 >= 96
    if arg3 != 100:
        if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
            revert with 0, 'SafeMath: addition overflow'
        return (arg1 % 8 or 8 * arg3 % 4 or 32 * sha3(sha3(arg2, 2)) % 125 % 128)
    if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
        revert with 0, 'SafeMath: addition overflow'
    if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
        revert with 0, 'SafeMath: addition overflow'
    return (arg1 % 8 or 8 * sha3(sha3(arg2, 1)) % 4 or 32 * sha3(sha3(arg2, 2)) % 125 % 128)
}

function canRaid(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not stor103[arg2]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[169 len 23],
                    mem[215 len 9]
    require stor103[arg2] - 1 < tokenByIndex.length
    if tokenByIndex[stor103[arg2] - 1].field_256 != arg1:
        return (tokenByIndex[stor103[arg2] - 1].field_256 == arg1)
    if durabilityTimestamp[arg2] > block.timestamp:
        return 0
    if block.timestamp - durabilityTimestamp[arg2] / 3000 <= 20:
        return (uint8(block.timestamp - durabilityTimestamp[arg2] / 3000) > 0)
    return 1
}

function grantRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[roleAdmin[arg1].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x73416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e,
                    mem[211 len 17]
    if not roleAdmin[arg1][1][address(arg2)].field_0:
        roleAdmin[arg1].field_0++
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = arg2
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_160 = 0
        roleAdmin[arg1][1][address(arg2)].field_0 = roleAdmin[arg1].field_0
        emit RoleGranted(arg1, arg2, msg.sender);
}

function renounceRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if arg2 != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x50416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c,
                    mem[211 len 17]
    if roleAdmin[arg1][1][address(arg2)].field_0:
        require roleAdmin[arg1].field_0 - 1 < roleAdmin[arg1].field_0
        require roleAdmin[arg1][1][address(arg2)].field_0 - 1 < roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1][1][address(arg2)].field_0].field_0 = roleAdmin[arg1][roleAdmin[arg1].field_0].field_0
        roleAdmin[arg1][1][roleAdmin[arg1][roleAdmin[arg1].field_0].field_0].field_0 = roleAdmin[arg1][1][address(arg2)].field_0
        require roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = 0
        roleAdmin[arg1].field_0--
        roleAdmin[arg1][1][address(arg2)].field_0 = 0
        emit RoleRevoked(arg1, arg2, msg.sender);
}

function revokeRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[roleAdmin[arg1].field_512][1][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    48,
                    0x6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b,
                    mem[212 len 16]
    if roleAdmin[arg1][1][address(arg2)].field_0:
        require roleAdmin[arg1].field_0 - 1 < roleAdmin[arg1].field_0
        require roleAdmin[arg1][1][address(arg2)].field_0 - 1 < roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1][1][address(arg2)].field_0].field_0 = roleAdmin[arg1][roleAdmin[arg1].field_0].field_0
        roleAdmin[arg1][1][roleAdmin[arg1][roleAdmin[arg1].field_0].field_0].field_0 = roleAdmin[arg1][1][address(arg2)].field_0
        require roleAdmin[arg1].field_0
        roleAdmin[arg1][roleAdmin[arg1].field_0].field_0 = 0
        roleAdmin[arg1].field_0--
        roleAdmin[arg1][1][address(arg2)].field_0 = 0
        emit RoleRevoked(arg1, arg2, msg.sender);
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    if not stor103[arg2]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[169 len 23],
                    mem[215 len 9]
    require stor103[arg2] - 1 < tokenByIndex.length
    if arg1 == tokenByIndex[stor103[arg2] - 1].field_256:
        revert with 0, 32, 33, 0x6e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65, mem[293 len 31]
    if tokenByIndex[stor103[arg2] - 1].field_256 != msg.sender:
        if not stor105[stor102[stor103[arg2] - 1].field_256][address(msg.sender)]:
            revert with 0, 
                        32,
                        56,
                        0x654552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c,
                        mem[316 len 8]
    approved[arg2] = arg1
    if not stor103[arg2]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[265 len 23],
                    mem[311 len 9]
    require stor103[arg2] - 1 < tokenByIndex.length
    emit Approval(tokenByIndex[stor103[arg2] - 1].field_256, arg1, arg2);
}

function migrateTo_aa9da90() payable {
    require roleAdmin[0][1][address(msg.sender)].field_0
    uint64(stor208.field_0) = 0
    uint8(stor208.field_64) = 1
    stor208.field_72 % 72057594037927936 = 0
    stor208.field_128 % 72057594037927936 = 46116860184273879
    Mask(72, 0, stor208.field_184) = 0
    require Mask(192, 0, 19000146395920838164 * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, 19000146395920838164 * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    uint128(stor209.field_0) = uint128(('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 19000146395920838164, ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))))
    require Mask(192, 0, 19738016158869220229 * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, 19738016158869220229 * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    uint128(stor209.field_128) = uint128(('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 19738016158869220229, ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))))
}

function performMintWeapon(address arg1, uint16 arg2, uint16 arg3, uint16 arg4, uint16 arg5, uint256 arg6) payable {
    require calldata.size - 4 >= 192
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
            revert with 0, 'NR'
    if stor211 != block.number:
        stor212 = stor201.length
    stor211 = block.number
    stor201.length++
    stor66BE[stor201.length].field_0 = arg2
    stor66BE[stor201.length].field_16 = arg3
    stor66BE[stor201.length].field_32 = arg4
    stor66BE[stor201.length].field_48 = arg5
    stor66BE[stor201.length].field_64 = 0
    stor66BE[stor201.length].field_256 = 0
    stor202.length++
    stor42D7[stor202.length].field_0 = 0
    stor42D7[stor202.length].field_256 = 0
    stor42D7[stor202.length] = arg6
    if not arg1:
        revert with 0, 'ERC721: mint to the zero address'
    if stor103[stor201.length]:
        revert with 0, 'ERC721: token already minted'
    if not tokenOfOwnerByIndex[address(arg1)][1][stor201.length]:
        tokenOfOwnerByIndex[address(arg1)]++
        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = stor201.length
        tokenOfOwnerByIndex[address(arg1)][1][stor201.length] = tokenOfOwnerByIndex[address(arg1)]
    if stor103[stor201.length]:
        require stor103[stor201.length] - 1 < tokenByIndex.length
        tokenByIndex[stor103[stor201.length] - 1].field_256 = arg1
        tokenByIndex[stor103[stor201.length] - 1].field_416 = 0
    else:
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length].field_0 = stor201.length
        tokenByIndex[tokenByIndex.length].field_256 = arg1
        tokenByIndex[tokenByIndex.length].field_416 = 0
        stor103[stor201.length] = tokenByIndex.length
    emit Transfer(0, arg1, stor201.length);
    if 60000 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    durabilityTimestamp[stor201.length] = uint64(block.timestamp - 60000)
    emit NewWeapon(stor201.length, arg1);
    return stor201.length
}

function performMintWeaponDetailed(address arg1, uint16 arg2, uint16 arg3, uint16 arg4, uint16 arg5, uint8 arg6, uint8 arg7, uint8 arg8, uint8 arg9, uint256 arg10) payable {
    require calldata.size - 4 >= 320
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
            revert with 0, 'NR'
    require arg7 <= 100
    require arg8 <= 25
    require arg9 <= 10
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
            revert with 0, 'NR'
    if stor211 != block.number:
        stor212 = stor201.length
    stor211 = block.number
    stor201.length++
    stor66BE[stor201.length].field_0 = arg2
    stor66BE[stor201.length].field_16 = arg3
    stor66BE[stor201.length].field_32 = arg4
    stor66BE[stor201.length].field_48 = arg5
    stor66BE[stor201.length].field_64 = 0
    stor66BE[stor201.length].field_256 = 0
    stor202.length++
    stor42D7[stor202.length].field_0 = 0
    stor42D7[stor202.length].field_256 = 0
    stor42D7[stor202.length] = arg10
    if not arg1:
        revert with 0, 'ERC721: mint to the zero address'
    if stor103[stor201.length]:
        revert with 0, 'ERC721: token already minted'
    if not tokenOfOwnerByIndex[address(arg1)][1][stor201.length]:
        tokenOfOwnerByIndex[address(arg1)]++
        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = stor201.length
        tokenOfOwnerByIndex[address(arg1)][1][stor201.length] = tokenOfOwnerByIndex[address(arg1)]
    if stor103[stor201.length]:
        require stor103[stor201.length] - 1 < tokenByIndex.length
        tokenByIndex[stor103[stor201.length] - 1].field_256 = arg1
        tokenByIndex[stor103[stor201.length] - 1].field_416 = 0
    else:
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length].field_0 = stor201.length
        tokenByIndex[tokenByIndex.length].field_256 = arg1
        tokenByIndex[tokenByIndex.length].field_416 = 0
        stor103[stor201.length] = tokenByIndex.length
    emit Transfer(0, arg1, stor201.length);
    if 60000 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    durabilityTimestamp[stor201.length] = uint64(block.timestamp - 60000)
    emit NewWeapon(stor201.length, arg1);
    require stor201.length < stor201.length
    stor201[stor201.length].field_64 = arg6
    durabilityTimestamp[stor201.length] = uint64(block.timestamp)
    stor203[stor201.length].field_0 = arg7
    stor203[stor201.length].field_8 = arg8
    stor203[stor201.length].field_16 = arg9
    return stor201.length
}

function reforgeWithDust(uint256 arg1, uint8 arg2, uint8 arg3, uint8 arg4) payable {
    require calldata.size - 4 >= 128
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[169 len 23],
                    mem[215 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    require ext_code.size(promosAddress)
    staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args tokenByIndex[stor103[arg1] - 1].field_256, 4
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not ext_call.return_data[0]:
        if arg2:
            if stor203[arg1].field_0 >= 100:
                revert with 0, 'LB capped'
        if arg3:
            if stor203[arg1].field_8 >= 25:
                revert with 0, '4B capped'
        if arg4:
            if stor203[arg1].field_16 >= 10:
                revert with 0, '5B capped'
        stor203[arg1].field_0 = uint8(arg2 + stor203[arg1].field_0)
        stor203[arg1].field_8 = uint8(arg3 + stor203[arg1].field_8)
        stor203[arg1].field_16 = uint8(arg4 + stor203[arg1].field_16)
        if uint8(arg2 + stor203[arg1].field_0) > 100:
            stor203[arg1].field_0 = 100
        if stor203[arg1].field_8 > 25:
            stor203[arg1].field_8 = 25
        if stor203[arg1].field_16 > 10:
            stor203[arg1].field_16 = 10
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[265 len 23],
                    mem[311 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    require stor214[stor102[stor103[arg1] - 1].field_256].field_0 >= arg2
    require stor214[stor102[stor103[arg1] - 1].field_256].field_32 >= arg3
    require stor214[stor102[stor103[arg1] - 1].field_256].field_64 >= arg4
    stor214[stor102[stor103[arg1] - 1].field_256].field_0 = (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_64 - arg4) << 64) + (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_32 - arg3) << 32) + uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_0 - arg2)
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[489 len 23],
                    mem[535 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    emit ReforgedWithDust(arg2 << 248, arg3 << 248, arg4 << 248, stor203[arg1].field_0, stor203[arg1].field_0, stor203[arg1].field_16, tokenByIndex[stor103[arg1] - 1].field_256, arg1);
}

function drainDurability(uint256 arg1, uint8 arg2, bool arg3) payable {
    require calldata.size - 4 >= 96
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    if durabilityTimestamp[arg1] > block.timestamp:
        if 0 < arg2:
            if not arg3:
                revert with 0, 'Low durability!'
        if not stor103[arg1]:
            revert with 0, 
                        32,
                        41,
                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                        mem[169 len 23],
                        mem[215 len 9]
        require stor103[arg1] - 1 < tokenByIndex.length
        require ext_code.size(promosAddress)
        staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                gas gas_remaining wei
               args tokenByIndex[stor103[arg1] - 1].field_256, 4
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0]:
            revert with 0, 'Low durability!'
        durabilityTimestamp[arg1] = uint64((3000 * arg2) + durabilityTimestamp[arg1])
    else:
        if block.timestamp - durabilityTimestamp[arg1] / 3000 > 20:
            if 20 < arg2:
                if not arg3:
                    revert with 0, 'Low durability!'
            if not stor103[arg1]:
                revert with 0, 
                            32,
                            41,
                            0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                            mem[169 len 23],
                            mem[215 len 9]
            require stor103[arg1] - 1 < tokenByIndex.length
            require ext_code.size(promosAddress)
            staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                    gas gas_remaining wei
                   args tokenByIndex[stor103[arg1] - 1].field_256, 4
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                revert with 0, 'Low durability!'
            durabilityTimestamp[arg1] = uint64(block.timestamp + uint64(3000 * arg2) - 60000)
        else:
            if uint8(block.timestamp - durabilityTimestamp[arg1] / 3000) < arg2:
                if not arg3:
                    revert with 0, 'Low durability!'
            if not stor103[arg1]:
                revert with 0, 
                            32,
                            41,
                            0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                            mem[169 len 23],
                            mem[215 len 9]
            require stor103[arg1] - 1 < tokenByIndex.length
            require ext_code.size(promosAddress)
            staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                    gas gas_remaining wei
                   args tokenByIndex[stor103[arg1] - 1].field_256, 4
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                revert with 0, 'Low durability!'
            if uint8(block.timestamp - durabilityTimestamp[arg1] / 3000) < 20:
                durabilityTimestamp[arg1] = uint64((3000 * arg2) + durabilityTimestamp[arg1])
            else:
                durabilityTimestamp[arg1] = uint64(block.timestamp + uint64(3000 * arg2) - 60000)
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if not stor103[arg3]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    44,
                    0x734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[208 len 20]
    if not stor103[arg3]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[169 len 23],
                    mem[215 len 9]
    require stor103[arg3] - 1 < tokenByIndex.length
    if tokenByIndex[stor103[arg3] - 1].field_256 != msg.sender:
        if not stor103[arg3]:
            revert with 0, 32, 44, 0x774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b65, mem[304 len 20]
        if approved[arg3] != msg.sender:
            if not stor105[stor102[stor103[arg3] - 1].field_256][address(msg.sender)]:
                revert with 0, 
                            32,
                            49,
                            0x724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665,
                            mem[309 len 15]
    if not stor103[arg3]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[265 len 23],
                    mem[311 len 9]
    require stor103[arg3] - 1 < tokenByIndex.length
    if tokenByIndex[stor103[arg3] - 1].field_256 != arg1:
        revert with 0, 32, 41, 0x6e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[397 len 23]
    if not arg2:
        revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[392 len 28]
    if arg1:
        if arg2:
            require bool(sub_58181425['FEATURE_BITS']) != 1
            require ext_code.size(promosAddress)
            staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                    gas gas_remaining wei
                   args address(arg1), 4
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if ext_call.return_data[0]:
                require stor151[('name', 'stor6452', 3269731817501803920542761250773857614993577729205637037621104172334018355238920736452960862541)][1][address(arg2)]
    approved[arg3] = 0
    if not stor103[arg3]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[361 len 23],
                    mem[407 len 9]
    require stor103[arg3] - 1 < tokenByIndex.length
    emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
    if tokenOfOwnerByIndex[address(arg1)][1][arg3]:
        require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
        require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
        tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
        require tokenOfOwnerByIndex[address(arg1)]
        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
        tokenOfOwnerByIndex[address(arg1)]--
        tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
    if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
        tokenOfOwnerByIndex[address(arg2)]++
        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
    if stor103[arg3]:
        require stor103[arg3] - 1 < tokenByIndex.length
        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
        tokenByIndex[stor103[arg3] - 1].field_416 = 0
    else:
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length].field_0 = arg3
        tokenByIndex[tokenByIndex.length].field_256 = arg2
        tokenByIndex[tokenByIndex.length].field_416 = 0
        stor103[arg3] = tokenByIndex.length
    emit Transfer(arg1, arg2, arg3);
}

function getPowerMultiplier(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    require stor201[arg1].field_16 <= 9223372036854775807
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require stor201[arg1].field_32 <= 9223372036854775807
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require stor201[arg1].field_48 <= 9223372036854775807
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, 46116860184273879 * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + 18446744073709551616 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + 18446744073709551616 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', 18446744073709551616, ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', 18446744073709551616, ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', 18446744073709551616, ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', 18446744073709551616, ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', 18446744073709551616, ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', 46116860184273879, ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))))))))))))
}

function getBonusPowerForFight(uint256 arg1, uint8 arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    if 15 * arg2 / 15 != arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_4c0647f6:
        if not sub_350b7995:
            if not sub_a1570c8e:
                if 15 * arg2 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (15 * arg2 % 16777216)
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * arg2) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * arg2) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if sub_a1570c8e:
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * arg2 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * arg2) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if (15 * arg2) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * arg2) + (stor203[arg1].field_8 * sub_350b7995) % 16777216)
    if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_350b7995:
        if not sub_a1570c8e:
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * arg2) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * arg2) + (stor203[arg1].field_16 * sub_4c0647f6) % 16777216)
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * arg2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * arg2) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_a1570c8e:
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * arg2 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * arg2) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) % 16777216)
    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
        revert with 0, 'SafeMath: addition overflow'
    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if 15 * arg2 < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ((15 * arg2) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
}

function getBonusPower(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_4c0647f6:
        if not sub_350b7995:
            if not sub_a1570c8e:
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return (15 * stor201[arg1].field_64 % 16777216)
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if sub_a1570c8e:
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) % 16777216)
    if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_350b7995:
        if not sub_a1570c8e:
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                revert with 0, 'SafeMath: addition overflow'
            return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) % 16777216)
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_a1570c8e:
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) % 16777216)
    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
        revert with 0, 'SafeMath: addition overflow'
    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if 15 * stor201[arg1].field_64 < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ((15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216)
}

function mint(address arg1, uint256 arg2, uint8 arg3) payable {
    require calldata.size - 4 >= 96
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
            revert with 0, 'NR'
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
            revert with 0, 'NR'
    if arg3 != 100:
        require arg3 <= 3
    if arg2 % 100 < 1:
        if (sha3(sha3(arg2, 5)) % 133) + 268 < sha3(sha3(arg2, 5)) % 133:
            revert with 0, 'SafeMath: addition overflow'
        if (sha3(sha3(arg2, 3)) % 133) + 268 < sha3(sha3(arg2, 3)) % 133:
            revert with 0, 'SafeMath: addition overflow'
        if (sha3(sha3(arg2, 4)) % 133) + 268 < sha3(sha3(arg2, 4)) % 133:
            revert with 0, 'SafeMath: addition overflow'
        if 100 == arg3:
            if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
                revert with 0, 'SafeMath: addition overflow'
        if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
            revert with 0, 'SafeMath: addition overflow'
        if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
            if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
                revert with 0, 'NR'
        if stor211 != block.number:
            stor212 = stor201.length
        stor211 = block.number
        stor201.length++
        stor66BE[stor201.length].field_0 = uint16((sha3(sha3(arg2, 5)) % 133) + 268)
    else:
        if arg2 % 100 < 6:
            if (sha3(sha3(arg2, 5)) % 201) + 200 < sha3(sha3(arg2, 5)) % 201:
                revert with 0, 'SafeMath: addition overflow'
            if (sha3(sha3(arg2, 3)) % 201) + 200 < sha3(sha3(arg2, 3)) % 201:
                revert with 0, 'SafeMath: addition overflow'
            if 100 == arg3:
                if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
                    revert with 0, 'SafeMath: addition overflow'
            if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
                revert with 0, 'SafeMath: addition overflow'
            if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
                if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
                    revert with 0, 'NR'
            if stor211 != block.number:
                stor212 = stor201.length
            stor211 = block.number
            stor201.length++
            stor66BE[stor201.length].field_0 = uint16((sha3(sha3(arg2, 5)) % 201) + 200)
        else:
            if arg2 % 100 < 21:
                if (sha3(sha3(arg2, 5)) % 121) + 280 < sha3(sha3(arg2, 5)) % 121:
                    revert with 0, 'SafeMath: addition overflow'
                if 100 == arg3:
                    if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
                        revert with 0, 'SafeMath: addition overflow'
                if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
                    revert with 0, 'SafeMath: addition overflow'
                if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
                    if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
                        revert with 0, 'NR'
                if stor211 != block.number:
                    stor212 = stor201.length
                stor211 = block.number
                stor201.length++
                stor66BE[stor201.length].field_0 = uint16((sha3(sha3(arg2, 5)) % 121) + 280)
            else:
                if arg2 % 100 >= 56:
                    if (sha3(sha3(arg2, 5)) % 197) + 4 < sha3(sha3(arg2, 5)) % 197:
                        revert with 0, 'SafeMath: addition overflow'
                    if 100 == arg3:
                        if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
                            revert with 0, 'SafeMath: addition overflow'
                    if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
                        revert with 0, 'SafeMath: addition overflow'
                    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
                        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
                            revert with 0, 'NR'
                    if stor211 != block.number:
                        stor212 = stor201.length
                    stor211 = block.number
                    stor201.length++
                    stor66BE[stor201.length].field_0 = uint16((sha3(sha3(arg2, 5)) % 197) + 4)
                else:
                    if (sha3(sha3(arg2, 5)) % 121) + 180 < sha3(sha3(arg2, 5)) % 121:
                        revert with 0, 'SafeMath: addition overflow'
                    if 100 == arg3:
                        if sha3(sha3(arg2, 1)) % 4 < sha3(sha3(arg2, 1)) % 4:
                            revert with 0, 'SafeMath: addition overflow'
                    if sha3(sha3(arg2, 2)) % 125 < sha3(sha3(arg2, 2)) % 125:
                        revert with 0, 'SafeMath: addition overflow'
                    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
                        if not roleAdmin['MINTER_ROLE'][1][address(msg.sender)].field_0:
                            revert with 0, 'NR'
                    if stor211 != block.number:
                        stor212 = stor201.length
                    stor211 = block.number
                    stor201.length++
                    stor66BE[stor201.length].field_0 = uint16((sha3(sha3(arg2, 5)) % 121) + 180)
    stor66BE[stor201.length].field_16 = 0
    stor202.length++
    stor42D7[stor202.length].field_0 = 0
    stor42D7[stor202.length].field_256 = 0
    stor42D7[stor202.length] = sha3(arg2, 3)
    if not arg1:
        revert with 0, 'ERC721: mint to the zero address'
    if stor103[stor201.length]:
        revert with 0, 'ERC721: token already minted'
    if not tokenOfOwnerByIndex[address(arg1)][1][stor201.length]:
        tokenOfOwnerByIndex[address(arg1)]++
        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = stor201.length
        tokenOfOwnerByIndex[address(arg1)][1][stor201.length] = tokenOfOwnerByIndex[address(arg1)]
    if stor103[stor201.length]:
        require stor103[stor201.length] - 1 < tokenByIndex.length
        tokenByIndex[stor103[stor201.length] - 1].field_256 = arg1
        tokenByIndex[stor103[stor201.length] - 1].field_416 = 0
    else:
        tokenByIndex.length++
        tokenByIndex[tokenByIndex.length].field_0 = stor201.length
        tokenByIndex[tokenByIndex.length].field_256 = arg1
        tokenByIndex[tokenByIndex.length].field_416 = 0
        stor103[stor201.length] = tokenByIndex.length
    emit Transfer(0, arg1, stor201.length);
    if 60000 > block.timestamp:
        revert with 0, 'SafeMath: subtraction overflow'
    durabilityTimestamp[stor201.length] = uint64(block.timestamp - 60000)
    emit NewWeapon(stor201.length, arg1);
    return stor201.length
}

function burn(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor151[('name', 'stor4741', 336492626609784167942478)][1][address(msg.sender)]:
        revert with 0, 'NR'
    require arg1 < stor201.length
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[297 len 23],
                    mem[343 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[393 len 23],
                    mem[439 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    approved[arg1] = 0
    if not stor103[arg1]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[489 len 23],
                    mem[535 len 9]
    require stor103[arg1] - 1 < tokenByIndex.length
    emit Approval(tokenByIndex[stor103[arg1] - 1].field_256, 0, arg1);
    if Mask(255, 1, stor108[arg1].field_0 and (256 * not stor108[arg1].field_0) - 1):
        stor108[arg1].field_0 = 0
        if 31 < stor108[arg1].length:
            idx = 0
            while stor108[arg1].length + 31 / 32 > idx:
                stor108[arg1][idx].field_0 = 0
                idx = idx + 1
                continue 
    if tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][arg1]:
        require tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256] - 1 < tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]
        require tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][arg1] - 1 < tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]
        tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][arg1]] = tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]]
        tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]]] = tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][arg1]
        require tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]
        tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]] = 0
        tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256]--
        tokenOfOwnerByIndex[stor102[stor103[arg1] - 1].field_256][1][arg1] = 0
    if stor103[arg1]:
        require tokenByIndex.length - 1 < tokenByIndex.length
        require stor103[arg1] - 1 < tokenByIndex.length
        tokenByIndex[stor103[arg1] - 1].field_0 = tokenByIndex[tokenByIndex.length - 1].field_0
        tokenByIndex[stor103[arg1] - 1].field_256 = tokenByIndex[tokenByIndex.length - 1].field_256
        stor103[stor102[stor102.length - 1].field_0] = stor103[arg1]
        require tokenByIndex.length
        tokenByIndex[tokenByIndex.length - 1].field_0 = 0
        tokenByIndex[tokenByIndex.length - 1].field_256 = 0
        tokenByIndex.length--
        stor103[arg1] = 0
    emit Transfer(tokenByIndex[stor103[arg1] - 1].field_256, 0, arg1);
    require ext_code.size(promosAddress)
    staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
            gas gas_remaining wei
           args tokenByIndex[stor103[arg1] - 1].field_256, 4
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if stor201[arg1].field_0 < 3:
        if not ext_call.return_data[0]:
            require stor214[stor102[stor103[arg1] - 1].field_256].field_0 + uint8((uint8(stor203[arg1].field_0 + 1) / 2) + (sub_72945100 * uint8(stor201[arg1].field_0 + 1))) <= test266151307()
            require stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2) <= test266151307()
            require stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2) <= test266151307()
            stor214[stor102[stor103[arg1] - 1].field_256].field_0 = (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2)) << 64) + (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2)) << 32) + uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_0 + uint8((uint8(stor203[arg1].field_0 + 1) / 2) + (sub_72945100 * uint8(stor201[arg1].field_0 + 1))))
    else:
        if 3 == stor201[arg1].field_0:
            if not ext_call.return_data[0]:
                require stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2) <= test266151307()
                require stor214[stor102[stor103[arg1] - 1].field_256].field_32 + uint8((uint8(stor203[arg1].field_8 + 1) / 2) + sub_72945100) <= test266151307()
                require stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2) <= test266151307()
                stor214[stor102[stor103[arg1] - 1].field_256].field_0 = (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2)) << 64) + (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_32 + uint8((uint8(stor203[arg1].field_8 + 1) / 2) + sub_72945100)) << 32) + uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2))
        else:
            if stor201[arg1].field_0 != 4:
                if not ext_call.return_data[0]:
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2) <= test266151307()
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2) <= test266151307()
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2) <= test266151307()
                    stor214[stor102[stor103[arg1] - 1].field_256].field_0 = (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_64 + (uint8(stor203[arg1].field_16 + 1) / 2)) << 64) + (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2)) << 32) + uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2))
            else:
                if not ext_call.return_data[0]:
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2) <= test266151307()
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2) <= test266151307()
                    require stor214[stor102[stor103[arg1] - 1].field_256].field_64 + uint8((uint8(stor203[arg1].field_16 + 1) / 2) + sub_72945100) <= test266151307()
                    stor214[stor102[stor103[arg1] - 1].field_256].field_0 = (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_64 + uint8((uint8(stor203[arg1].field_16 + 1) / 2) + sub_72945100)) << 64) + (uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_32 + (uint8(stor203[arg1].field_8 + 1) / 2)) << 32) + uint32(stor214[stor102[stor103[arg1] - 1].field_256].field_0 + (uint8(stor203[arg1].field_0 + 1) / 2))
    emit Burned(tokenByIndex[stor103[arg1] - 1].field_256, arg1);
}

function tokenURI(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not stor103[arg1]:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    47,
                    0x6e4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[211 len 17]
    mem[32] = 108
    mem[96] = stor108[arg1].length
    mem[128] = stor108[arg1].field_0
    idx = 128
    s = 0
    while stor108[arg1].length + 96 > idx:
        mem[idx + 32] = stor108[arg1][s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    mem[64] = ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160
    mem[ceil32(stor108[arg1].length) + 128] = baseURI.length
    mem[0] = 109
    mem[ceil32(stor108[arg1].length) + 160] = uint256(baseURI.field_0)
    idx = ceil32(stor108[arg1].length) + 160
    s = 0
    while ceil32(stor108[arg1].length) + baseURI.length + 128 > idx:
        mem[idx + 32] = baseURI[s].field_256
        idx = idx + 32
        s = s + 1
        continue 
    if 0 == baseURI.length:
        return Array(len=stor108[arg1].length, data=mem[128 len stor108[arg1].length])
    if stor108[arg1].length:
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 192 len floor32(baseURI.length)] = mem[ceil32(stor108[arg1].length) + 160 len floor32(baseURI.length)]
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + floor32(baseURI.length) + 192] = 256^(-baseURI.length % 32 + 32) - 1 and mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + floor32(baseURI.length) + 192] or mem[ceil32(stor108[arg1].length) + floor32(baseURI.length) + 160] and !(256^(-baseURI.length % 32 + 32) - 1)
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 192 len floor32(stor108[arg1].length)] = mem[128 len floor32(stor108[arg1].length)]
        var33001 = floor32(stor108[arg1].length) + 128
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + floor32(stor108[arg1].length) + -stor108[arg1].length % 32 + 224 len stor108[arg1].length % 32] = mem[floor32(stor108[arg1].length) + -stor108[arg1].length % 32 + 160 len stor108[arg1].length % 32]
        mem[64] = stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 192
        mem[stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 192] = 32
        mem[stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 224] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160]
        mem[stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 256 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160])] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 192 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160])]
        var38001 = ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160])
        if not mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] % 32:
            return 32, mem[stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 224 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] + 32], 
        mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160]) + stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 256] = mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160]) + stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + -(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] % 32) + 288 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] % 32]
        return 32, mem[stor108[arg1].length + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 224 len floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160]) + 64], 
    if not arg1:
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] = 1
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 256 len floor32(baseURI.length)] = mem[ceil32(stor108[arg1].length) + 160 len floor32(baseURI.length)]
        var34001 = ceil32(stor108[arg1].length) + floor32(baseURI.length) + 160
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + floor32(baseURI.length) + 256] = 256^(-baseURI.length % 32 + 32) - 1 and mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + floor32(baseURI.length) + 256] or mem[ceil32(stor108[arg1].length) + floor32(baseURI.length) + 160] and !(256^(-baseURI.length % 32 + 32) - 1)
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 256 len 0] = None
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 256 len 0] = 0
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 257] = 32
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 289] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224]
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 321 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224])] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 256 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224])]
        if not mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224] % 32:
            return 32, mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 289 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224] + 32], 
        mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224]) + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 321] = mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224]) + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + -(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224] % 32) + 353 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224] % 32]
        return Array(len=mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224], data=mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + baseURI.length + 321 len floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 224]) + 32]), 
    s = 0
    idx = arg1
    while idx:
        s = s + 1
        idx = idx / 10
        continue 
    require s <= test266151307()
    mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 160] = s
    if s:
        mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 192 len s] = call.data[calldata.size len s]
    t = s - 1
    idx = arg1
    while idx:
        require t < s
        mem[t + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 192 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
        t = t - 1
        idx = idx / 10
        continue 
    mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 224 len floor32(baseURI.length)] = mem[ceil32(stor108[arg1].length) + 160 len floor32(baseURI.length)]
    mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + floor32(baseURI.length) + 224] = 256^(-baseURI.length % 32 + 32) - 1 and mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + floor32(baseURI.length) + 224] or mem[ceil32(stor108[arg1].length) + floor32(baseURI.length) + 160] and !(256^(-baseURI.length % 32 + 32) - 1)
    mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 224 len floor32(s)] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + 192 len floor32(s)]
    mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + floor32(s) + -(s % 32) + 256 len s % 32] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + floor32(s) + -(s % 32) + 224 len s % 32]
    mem[s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 224] = 32
    mem[s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 256] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192]
    mem[s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 288 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192])] = mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 224 len ceil32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192])]
    if not mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192] % 32:
        return 32, mem[s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 256 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192] + 32], 
    mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192]) + s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 288] = mem[floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192]) + s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + -(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192] % 32) + 320 len mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192] % 32]
    return 32, mem[s + ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + baseURI.length + 256 len floor32(mem[ceil32(stor108[arg1].length) + ceil32(baseURI.length) + ceil32(s) + 192]) + 64], 
}

function get(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    require arg1 < stor202.length
    if sha3(sha3(stor202[arg1], 1)) % 25 < sha3(sha3(stor202[arg1], 1)) % 25:
        revert with 0, 'SafeMath: addition overflow'
    if sha3(sha3(stor202[arg1], 2)) % 25 < sha3(sha3(stor202[arg1], 2)) % 25:
        revert with 0, 'SafeMath: addition overflow'
    if sha3(sha3(stor202[arg1], 3)) % 25 < sha3(sha3(stor202[arg1], 3)) % 25:
        revert with 0, 'SafeMath: addition overflow'
    if sha3(sha3(stor202[arg1], 4)) % 25 < sha3(sha3(stor202[arg1], 4)) % 25:
        revert with 0, 'SafeMath: addition overflow'
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
    if not sub_4c0647f6:
        if not sub_350b7995:
            if not sub_a1570c8e:
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return stor201[arg1].field_0, 
                       stor201[arg1].field_0,
                       stor201[arg1].field_0,
                       stor201[arg1].field_0,
                       stor201[arg1].field_0,
                       sha3(sha3(stor202[arg1], 1)) % 25 << 248,
                       sha3(sha3(stor202[arg1], 2)) % 25 << 248,
                       sha3(sha3(stor202[arg1], 3)) % 25 << 248,
                       sha3(sha3(stor202[arg1], 4)) % 25 << 248,
                       0,
                       stor203[arg1].field_16,
                       stor203[arg1].field_8,
                       stor203[arg1].field_0,
                       15 * stor201[arg1].field_64 % 16777216
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            return stor201[arg1].field_0, 
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   sha3(sha3(stor202[arg1], 1)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 2)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 3)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 4)) % 25 << 248,
                   0,
                   stor203[arg1].field_16,
                   stor203[arg1].field_8,
                   stor203[arg1].field_0,
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
        if sub_a1570c8e:
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return stor201[arg1].field_0, 
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   sha3(sha3(stor202[arg1], 1)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 2)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 3)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 4)) % 25 << 248,
                   0,
                   stor203[arg1].field_16,
                   stor203[arg1].field_8,
                   stor203[arg1].field_0,
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        return stor201[arg1].field_0, 
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               sha3(sha3(stor202[arg1], 1)) % 25 << 248,
               sha3(sha3(stor202[arg1], 2)) % 25 << 248,
               sha3(sha3(stor202[arg1], 3)) % 25 << 248,
               sha3(sha3(stor202[arg1], 4)) % 25 << 248,
               0,
               stor203[arg1].field_16,
               stor203[arg1].field_8,
               stor203[arg1].field_0,
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) % 16777216
    if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
    if not sub_350b7995:
        if not sub_a1570c8e:
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                revert with 0, 'SafeMath: addition overflow'
            return stor201[arg1].field_0, 
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   stor201[arg1].field_0,
                   sha3(sha3(stor202[arg1], 1)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 2)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 3)) % 25 << 248,
                   sha3(sha3(stor202[arg1], 4)) % 25 << 248,
                   0,
                   stor203[arg1].field_16,
                   stor203[arg1].field_8,
                   stor203[arg1].field_0,
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) % 16777216
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return stor201[arg1].field_0, 
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               sha3(sha3(stor202[arg1], 1)) % 25 << 248,
               sha3(sha3(stor202[arg1], 2)) % 25 << 248,
               sha3(sha3(stor202[arg1], 3)) % 25 << 248,
               sha3(sha3(stor202[arg1], 4)) % 25 << 248,
               0,
               stor203[arg1].field_16,
               stor203[arg1].field_8,
               stor203[arg1].field_0,
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216
    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
    if not sub_a1570c8e:
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return stor201[arg1].field_0, 
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               stor201[arg1].field_0,
               sha3(sha3(stor202[arg1], 1)) % 25 << 248,
               sha3(sha3(stor202[arg1], 2)) % 25 << 248,
               sha3(sha3(stor202[arg1], 3)) % 25 << 248,
               sha3(sha3(stor202[arg1], 4)) % 25 << 248,
               0,
               stor203[arg1].field_16,
               stor203[arg1].field_8,
               stor203[arg1].field_0,
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) % 16777216
    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
        revert with 0, 32, 33, 0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[1477 len 31]
    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
        revert with 0, 'SafeMath: addition overflow'
    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if 15 * stor201[arg1].field_64 < 0:
        revert with 0, 'SafeMath: addition overflow'
    return stor201[arg1].field_0, 
           stor201[arg1].field_0,
           stor201[arg1].field_0,
           stor201[arg1].field_0,
           stor201[arg1].field_0,
           sha3(sha3(stor202[arg1], 1)) % 25 << 248,
           sha3(sha3(stor202[arg1], 2)) % 25 << 248,
           sha3(sha3(stor202[arg1], 3)) % 25 << 248,
           sha3(sha3(stor202[arg1], 4)) % 25 << 248,
           0,
           stor203[arg1].field_16,
           stor203[arg1].field_8,
           stor203[arg1].field_0,
           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) % 16777216
}

function getPowerMultiplierForTrait(uint16 arg1, uint16 arg2, uint16 arg3, uint16 arg4, uint8 arg5) payable {
    require calldata.size - 4 >= 160
    require arg2 <= 9223372036854775807
    if uint8(Mask(7, 5, arg1) >> 5 % 5) == arg5:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg3 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require arg4 <= 9223372036854775807
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require arg4 <= 9223372036854775807
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg4 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    if uint8(Mask(7, 5, arg1) >> 5 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg3 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require arg4 <= 9223372036854775807
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require arg4 <= 9223372036854775807
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg4 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
    require arg3 <= 9223372036854775807
    if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) == arg5:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg4 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    if uint8(Mask(7, 5, arg1) >> 5 / 5 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require arg4 <= 9223372036854775807
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
    require arg4 <= 9223372036854775807
    if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) == arg5:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    if uint8(Mask(7, 5, arg1) >> 5 / 25 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg4'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg3'))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 16, 0, 64, ('param', 'arg2'))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))))))
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    if not stor103[arg3]:
        revert with 0, 32, 44, 0x734552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b65, mem[240 len 20]
    if not stor103[arg3]:
        revert with 0, 
                    32,
                    41,
                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                    mem[201 len 23],
                    mem[247 len 9]
    require stor103[arg3] - 1 < tokenByIndex.length
    if msg.sender == tokenByIndex[stor103[arg3] - 1].field_256:
        if not stor103[arg3]:
            revert with 0, 
                        32,
                        41,
                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                        mem[297 len 23],
                        mem[343 len 9]
        require stor103[arg3] - 1 < tokenByIndex.length
        if tokenByIndex[stor103[arg3] - 1].field_256 != arg1:
            revert with 0, 32, 41, 0x6e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[429 len 23]
        if not arg2:
            revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[424 len 28]
        if not arg1:
            approved[arg3] = 0
            if not stor103[arg3]:
                revert with 0, 
                            32,
                            41,
                            0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                            mem[393 len 23],
                            mem[439 len 9]
            require stor103[arg3] - 1 < tokenByIndex.length
            emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
            if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                    if stor103[arg3]:
                        require stor103[arg3] - 1 < tokenByIndex.length
                        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                        tokenByIndex[stor103[arg3] - 1].field_416 = 0
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[896 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[868 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 827 len 14]
                    else:
                        tokenByIndex.length++
                        tokenByIndex[tokenByIndex.length].field_0 = arg3
                        tokenByIndex[tokenByIndex.length].field_256 = arg2
                        tokenByIndex[tokenByIndex.length].field_416 = 0
                        stor103[arg3] = tokenByIndex.length
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[960 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[932 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 891 len 14]
                else:
                    tokenOfOwnerByIndex[address(arg2)]++
                    tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                    tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                    if stor103[arg3]:
                        require stor103[arg3] - 1 < tokenByIndex.length
                        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                        tokenByIndex[stor103[arg3] - 1].field_416 = 0
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[896 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[868 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 827 len 14]
                    else:
                        tokenByIndex.length++
                        tokenByIndex[tokenByIndex.length].field_0 = arg3
                        tokenByIndex[tokenByIndex.length].field_256 = arg2
                        tokenByIndex[tokenByIndex.length].field_416 = 0
                        stor103[arg3] = tokenByIndex.length
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[960 len 4] = 0
                            mem[932 len 0] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 891 len 14]
            else:
                require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                require tokenOfOwnerByIndex[address(arg1)]
                tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                tokenOfOwnerByIndex[address(arg1)]--
                tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                    if stor103[arg3]:
                        require stor103[arg3] - 1 < tokenByIndex.length
                        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                        tokenByIndex[stor103[arg3] - 1].field_416 = 0
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[896 len 4] = 0
                            mem[868 len 0] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                            mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 827 len 14]
                    else:
                        tokenByIndex.length++
                        tokenByIndex[tokenByIndex.length].field_0 = arg3
                        tokenByIndex[tokenByIndex.length].field_256 = arg2
                        tokenByIndex[tokenByIndex.length].field_416 = 0
                        stor103[arg3] = tokenByIndex.length
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[960 len 4] = 0
                            mem[932 len 0] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 891 len 14]
                else:
                    tokenOfOwnerByIndex[address(arg2)]++
                    tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                    tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                    if stor103[arg3]:
                        require stor103[arg3] - 1 < tokenByIndex.length
                        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                        tokenByIndex[stor103[arg3] - 1].field_416 = 0
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[896 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[868 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 827 len 14]
                    else:
                        tokenByIndex.length++
                        tokenByIndex[tokenByIndex.length].field_0 = arg3
                        tokenByIndex[tokenByIndex.length].field_256 = arg2
                        tokenByIndex[tokenByIndex.length].field_416 = 0
                        stor103[arg3] = tokenByIndex.length
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[960 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[932 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 891 len 14]
        else:
            if not arg2:
                approved[arg3] = 0
                if not stor103[arg3]:
                    revert with 0, 
                                32,
                                41,
                                0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                mem[393 len 23],
                                mem[439 len 9]
                require stor103[arg3] - 1 < tokenByIndex.length
                emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                    if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                    if stor103[arg3]:
                        require stor103[arg3] - 1 < tokenByIndex.length
                        tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                        tokenByIndex[stor103[arg3] - 1].field_416 = 0
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[896 len 4] = 0
                            mem[868 len 0] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                            mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 827 len 14]
                    else:
                        tokenByIndex.length++
                        tokenByIndex[tokenByIndex.length].field_0 = arg3
                        tokenByIndex[tokenByIndex.length].field_256 = arg2
                        tokenByIndex[tokenByIndex.length].field_416 = 0
                        stor103[arg3] = tokenByIndex.length
                        emit Transfer(arg1, arg2, arg3);
                        if ext_code.size(arg2):
                            if not ext_code.size(arg2):
                                revert with 0, 'Address: call to non-contract'
                            mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                            mem[960 len 4] = 0
                            call arg2.0x80 with:
                                 gas gas_remaining wei
                                args 0, mem[932 len 4]
                            if not return_data.size:
                                require not ext_call.success
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            if not ext_call.success:
                                if return_data.size:
                                    revert with ext_call.return_data[0 len return_data.size]
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                            Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                            require return_data.size >= 32
                            if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                revert with 0, 
                                            32,
                                            50,
                                            0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                            mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                    tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                    require tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                    tokenOfOwnerByIndex[address(arg1)]--
                    tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                    if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                mem[868 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
            else:
                require bool(sub_58181425['FEATURE_BITS']) != 1
                require ext_code.size(promosAddress)
                staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                        gas gas_remaining wei
                       args address(arg1), 4
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not ext_call.return_data[0]:
                    approved[arg3] = 0
                    if not stor103[arg3]:
                        revert with 0, 
                                    32,
                                    41,
                                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                    mem[393 len 23],
                                    mem[439 len 9]
                    require stor103[arg3] - 1 < tokenByIndex.length
                    emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                    if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    mem[868 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    mem[868 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    mem[932 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                        tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                        require tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                        tokenOfOwnerByIndex[address(arg1)]--
                        tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    mem[868 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require stor151[('name', 'stor6452', 3269731817501803920542761250773857614993577729205637037621104172334018355238920736452960862541)][1][address(arg2)]
                    approved[arg3] = 0
                    if not stor103[arg3]:
                        revert with 0, 
                                    32,
                                    41,
                                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                    mem[393 len 23],
                                    mem[439 len 9]
                    require stor103[arg3] - 1 < tokenByIndex.length
                    emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                    if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    mem[868 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                        tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                        require tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                        tokenOfOwnerByIndex[address(arg1)]--
                        tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                        if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                mem[932 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
    else:
        if not stor103[arg3]:
            revert with 0, 32, 44, 0x774552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b65, mem[336 len 20]
        if approved[arg3] == msg.sender:
            if not stor103[arg3]:
                revert with 0, 
                            32,
                            41,
                            0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                            mem[297 len 23],
                            mem[343 len 9]
            require stor103[arg3] - 1 < tokenByIndex.length
            if tokenByIndex[stor103[arg3] - 1].field_256 != arg1:
                revert with 0, 32, 41, 0x6e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[429 len 23]
            if not arg2:
                revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[424 len 28]
            if not arg1:
                approved[arg3] = 0
                if not stor103[arg3]:
                    revert with 0, 
                                32,
                                41,
                                0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                mem[393 len 23],
                                mem[439 len 9]
                require stor103[arg3] - 1 < tokenByIndex.length
                emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                    if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                mem[868 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                    tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                    require tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                    tokenOfOwnerByIndex[address(arg1)]--
                    tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                    if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                mem[932 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
            else:
                if not arg2:
                    approved[arg3] = 0
                    if not stor103[arg3]:
                        revert with 0, 
                                    32,
                                    41,
                                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                    mem[393 len 23],
                                    mem[439 len 9]
                    require stor103[arg3] - 1 < tokenByIndex.length
                    emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                    if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                        if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                        tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                        require tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                        tokenOfOwnerByIndex[address(arg1)]--
                        tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    mem[932 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require bool(sub_58181425['FEATURE_BITS']) != 1
                    require ext_code.size(promosAddress)
                    staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                            gas gas_remaining wei
                           args address(arg1), 4
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        approved[arg3] = 0
                        if not stor103[arg3]:
                            revert with 0, 
                                        32,
                                        41,
                                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                        mem[393 len 23],
                                        mem[439 len 9]
                        require stor103[arg3] - 1 < tokenByIndex.length
                        emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                        if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                            if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        mem[868 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                            else:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        mem[868 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        mem[932 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                            tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                            require tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                            tokenOfOwnerByIndex[address(arg1)]--
                            tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                            if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        mem[868 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                            else:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require stor151[('name', 'stor6452', 3269731817501803920542761250773857614993577729205637037621104172334018355238920736452960862541)][1][address(arg2)]
                        approved[arg3] = 0
                        if not stor103[arg3]:
                            revert with 0, 
                                        32,
                                        41,
                                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                        mem[393 len 23],
                                        mem[439 len 9]
                        require stor103[arg3] - 1 < tokenByIndex.length
                        emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                        if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                            if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    mem[932 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                            tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                            require tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                            tokenOfOwnerByIndex[address(arg1)]--
                            tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                            if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                            else:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        mem[868 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
        else:
            if not stor105[stor102[stor103[arg3] - 1].field_256][address(msg.sender)]:
                revert with 0, 
                            32,
                            49,
                            0x724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665,
                            mem[341 len 15]
            if not stor103[arg3]:
                revert with 0, 
                            32,
                            41,
                            0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                            mem[297 len 23],
                            mem[343 len 9]
            require stor103[arg3] - 1 < tokenByIndex.length
            if tokenByIndex[stor103[arg3] - 1].field_256 != arg1:
                revert with 0, 32, 41, 0x6e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f77, mem[429 len 23]
            if not arg2:
                revert with 0, 32, 36, 0x724552433732313a207472616e7366657220746f20746865207a65726f20616464726573, mem[424 len 28]
            if not arg1:
                approved[arg3] = 0
                if not stor103[arg3]:
                    revert with 0, 
                                32,
                                41,
                                0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                mem[393 len 23],
                                mem[439 len 9]
                require stor103[arg3] - 1 < tokenByIndex.length
                emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                    if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                mem[932 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                mem[868 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                    tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                    require tokenOfOwnerByIndex[address(arg1)]
                    tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                    tokenOfOwnerByIndex[address(arg1)]--
                    tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                    if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        tokenOfOwnerByIndex[address(arg2)]++
                        tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                        tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                mem[932 len 0] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
            else:
                if not arg2:
                    approved[arg3] = 0
                    if not stor103[arg3]:
                        revert with 0, 
                                    32,
                                    41,
                                    0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                    mem[393 len 23],
                                    mem[439 len 9]
                    require stor103[arg3] - 1 < tokenByIndex.length
                    emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                    if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                        if not tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                        if stor103[arg3]:
                            require stor103[arg3] - 1 < tokenByIndex.length
                            tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                            tokenByIndex[stor103[arg3] - 1].field_416 = 0
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[896 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[868 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 827 len 14]
                        else:
                            tokenByIndex.length++
                            tokenByIndex[tokenByIndex.length].field_0 = arg3
                            tokenByIndex[tokenByIndex.length].field_256 = arg2
                            tokenByIndex[tokenByIndex.length].field_416 = 0
                            stor103[arg3] = tokenByIndex.length
                            emit Transfer(arg1, arg2, arg3);
                            if ext_code.size(arg2):
                                if not ext_code.size(arg2):
                                    revert with 0, 'Address: call to non-contract'
                                mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                mem[960 len 4] = 0
                                call arg2.0x80 with:
                                     gas gas_remaining wei
                                    args 0, mem[932 len 4]
                                if not return_data.size:
                                    require not ext_call.success
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                if not ext_call.success:
                                    if return_data.size:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                require return_data.size >= 32
                                if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                    revert with 0, 
                                                32,
                                                50,
                                                0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                        tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                        require tokenOfOwnerByIndex[address(arg1)]
                        tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                        tokenOfOwnerByIndex[address(arg1)]--
                        tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    mem[868 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    mem[932 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                else:
                    require bool(sub_58181425['FEATURE_BITS']) != 1
                    require ext_code.size(promosAddress)
                    staticcall promosAddress.getBit(address arg1, uint256 arg2) with:
                            gas gas_remaining wei
                           args address(arg1), 4
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    if not ext_call.return_data[0]:
                        approved[arg3] = 0
                        if not stor103[arg3]:
                            revert with 0, 
                                        32,
                                        41,
                                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                        mem[393 len 23],
                                        mem[439 len 9]
                        require stor103[arg3] - 1 < tokenByIndex.length
                        emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                        if tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                            require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                            tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                            require tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                            tokenOfOwnerByIndex[address(arg1)]--
                            tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                        if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    mem[932 len 0] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            tokenOfOwnerByIndex[address(arg2)]++
                            tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                            tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                            if stor103[arg3]:
                                require stor103[arg3] - 1 < tokenByIndex.length
                                tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[896 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[868 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 827 len 14]
                            else:
                                tokenByIndex.length++
                                tokenByIndex[tokenByIndex.length].field_0 = arg3
                                tokenByIndex[tokenByIndex.length].field_256 = arg2
                                tokenByIndex[tokenByIndex.length].field_416 = 0
                                stor103[arg3] = tokenByIndex.length
                                emit Transfer(arg1, arg2, arg3);
                                if ext_code.size(arg2):
                                    if not ext_code.size(arg2):
                                        revert with 0, 'Address: call to non-contract'
                                    mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                    mem[960 len 4] = 0
                                    call arg2.0x80 with:
                                         gas gas_remaining wei
                                        args 0, mem[932 len 4]
                                    if not return_data.size:
                                        require not ext_call.success
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                    if not ext_call.success:
                                        if return_data.size:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                    Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                    require return_data.size >= 32
                                    if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                        revert with 0, 
                                                    32,
                                                    50,
                                                    0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                    mem[ceil32(return_data.size) + 891 len 14]
                    else:
                        require stor151[('name', 'stor6452', 3269731817501803920542761250773857614993577729205637037621104172334018355238920736452960862541)][1][address(arg2)]
                        approved[arg3] = 0
                        if not stor103[arg3]:
                            revert with 0, 
                                        32,
                                        41,
                                        0x734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b65,
                                        mem[393 len 23],
                                        mem[439 len 9]
                        require stor103[arg3] - 1 < tokenByIndex.length
                        emit Approval(tokenByIndex[stor103[arg3] - 1].field_256, 0, arg3);
                        if not tokenOfOwnerByIndex[address(arg1)][1][arg3]:
                            if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                            else:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        mem[932 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                        else:
                            require tokenOfOwnerByIndex[address(arg1)] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            require tokenOfOwnerByIndex[address(arg1)][1][arg3] - 1 < tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)][1][arg3]] = tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]
                            tokenOfOwnerByIndex[address(arg1)][1][tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]]] = tokenOfOwnerByIndex[address(arg1)][1][arg3]
                            require tokenOfOwnerByIndex[address(arg1)]
                            tokenOfOwnerByIndex[address(arg1)][tokenOfOwnerByIndex[address(arg1)]] = 0
                            tokenOfOwnerByIndex[address(arg1)]--
                            tokenOfOwnerByIndex[address(arg1)][1][arg3] = 0
                            if tokenOfOwnerByIndex[address(arg2)][1][arg3]:
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        mem[868 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[694 len 14], 0, 32, 50) >> 544
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
                            else:
                                tokenOfOwnerByIndex[address(arg2)]++
                                tokenOfOwnerByIndex[address(arg2)][tokenOfOwnerByIndex[address(arg2)]] = arg3
                                tokenOfOwnerByIndex[address(arg2)][1][arg3] = tokenOfOwnerByIndex[address(arg2)]
                                if stor103[arg3]:
                                    require stor103[arg3] - 1 < tokenByIndex.length
                                    tokenByIndex[stor103[arg3] - 1].field_256 = arg2
                                    tokenByIndex[stor103[arg3] - 1].field_416 = 0
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[708 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[896 len 4] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args 0, mem[868 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        mem[740 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[694 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[740]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 827 len 14]
                                else:
                                    tokenByIndex.length++
                                    tokenByIndex[tokenByIndex.length].field_0 = arg3
                                    tokenByIndex[tokenByIndex.length].field_256 = arg2
                                    tokenByIndex[tokenByIndex.length].field_416 = 0
                                    stor103[arg3] = tokenByIndex.length
                                    emit Transfer(arg1, arg2, arg3);
                                    if ext_code.size(arg2):
                                        if not ext_code.size(arg2):
                                            revert with 0, 'Address: call to non-contract'
                                        mem[772 len 160] = onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0
                                        mem[960 len 4] = 0
                                        mem[932 len 0] = 0
                                        call arg2.0x80 with:
                                             gas gas_remaining wei
                                            args Mask(1248, -1024, onERC721Received(address arg1, address arg2, uint256 arg3, bytes arg4), msg.sender, address(arg1), arg3, 128, 0) << 1024, mem[932 len 4]
                                        if not return_data.size:
                                            require not ext_call.success
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 544, 0x6563656976657220696d706c656d656e7465, mem[758 len 14], 0, 32, 50) >> 544
                                        mem[804 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        if not ext_call.success:
                                            if return_data.size:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e2045524337323152,
                                                        Mask(144, 0, 0x6563656976657220696d706c656d656e7465, mem[758 len 14])
                                        require return_data.size >= 32
                                        if Mask(32, 224, mem[804]) != 0x150b7a0200000000000000000000000000000000000000000000000000000000:
                                            revert with 0, 
                                                        32,
                                                        50,
                                                        0x744552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465,
                                                        mem[ceil32(return_data.size) + 891 len 14]
}

function getFightData(uint256 arg1, uint8 arg2) payable {
    require calldata.size - 4 >= 64
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    require arg1 < stor201.length
    require uint16(stor201[arg1].field_48 + stor201[arg1].field_32 + stor201[arg1].field_16) <= 9223372036854775807
    require Mask(192, 0, ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))) * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))) * ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
    require stor201[arg1].field_16 <= 9223372036854775807
    if uint8(stor201[arg1].field_5 % 5) == arg2:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_32 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 5 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require stor201[arg1].field_48 <= 9223372036854775807
            if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 5 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require stor201[arg1].field_48 <= 9223372036854775807
            if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_48 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    if uint8(stor201[arg1].field_5 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_32 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 5 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require stor201[arg1].field_48 <= 9223372036854775807
            if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 5 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
            require stor201[arg1].field_48 <= 9223372036854775807
            if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
                require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
                if arg1 >= stor212:
                    if stor211 >= block.number:
                        revert with 0, 'NFL'
                if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_4c0647f6:
                    if not sub_350b7995:
                        if not sub_a1570c8e:
                            if 15 * stor201[arg1].field_64 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                                   15 * stor201[arg1].field_64 << 232,
                                   stor201[arg1].field_3
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if sub_a1570c8e:
                        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                        32,
                                        33,
                                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                        mem[197 len 31]
                        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                            revert with 0, 'SafeMath: addition overflow'
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if not sub_a1570c8e:
                    if stor203[arg1].field_8 * sub_350b7995 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_48 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))) <= 0x7fffffffffffffffffffffffffffffff
    require stor201[arg1].field_32 <= 9223372036854775807
    if uint8(stor201[arg1].field_5 / 5 % 5) == arg2:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_48 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    if uint8(stor201[arg1].field_5 / 5 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
        require stor201[arg1].field_48 <= 9223372036854775807
        if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
            require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
            if arg1 >= stor212:
                if stor211 >= block.number:
                    revert with 0, 'NFL'
            if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_4c0647f6:
                if not sub_350b7995:
                    if not sub_a1570c8e:
                        if 15 * stor201[arg1].field_64 < 0:
                            revert with 0, 'SafeMath: addition overflow'
                        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                               15 * stor201[arg1].field_64 << 232,
                               stor201[arg1].field_3
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if sub_a1570c8e:
                    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                    32,
                                    33,
                                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                    mem[197 len 31]
                    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                        revert with 0, 'SafeMath: addition overflow'
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if not sub_a1570c8e:
                if stor203[arg1].field_8 * sub_350b7995 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))) <= 0x7fffffffffffffffffffffffffffffff
    require stor201[arg1].field_48 <= 9223372036854775807
    if uint8(stor201[arg1].field_5 / 25 % 5) == arg2:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    if uint8(stor201[arg1].field_5 / 25 % 5) != 4:
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
        require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
        if arg1 >= stor212:
            if stor211 >= block.number:
                revert with 0, 'NFL'
        if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_4c0647f6:
            if not sub_350b7995:
                if not sub_a1570c8e:
                    if 15 * stor201[arg1].field_64 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                           15 * stor201[arg1].field_64 << 232,
                           stor201[arg1].field_3
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if sub_a1570c8e:
                if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                    revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                                32,
                                33,
                                0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                                mem[197 len 31]
                if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                    revert with 0, 'SafeMath: addition overflow'
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_350b7995:
            if not sub_a1570c8e:
                if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if not sub_a1570c8e:
            if stor203[arg1].field_8 * sub_350b7995 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_16 * sub_4c0647f6 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require Mask(192, 0, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))) * ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))) >> 64 <= 0x7fffffffffffffffffffffffffffffff
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) >= 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000
    require ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))) + ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208))))))))))))) <= 0x7fffffffffffffffffffffffffffffff
    if arg1 >= stor212:
        if stor211 >= block.number:
            revert with 0, 'NFL'
    if 15 * stor201[arg1].field_64 / 15 != stor201[arg1].field_64:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_4c0647f6:
        if not sub_350b7995:
            if not sub_a1570c8e:
                if 15 * stor201[arg1].field_64 < 0:
                    revert with 0, 'SafeMath: addition overflow'
                return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                       ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                       15 * stor201[arg1].field_64 << 232,
                       stor201[arg1].field_3
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if sub_a1570c8e:
            if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                            32,
                            33,
                            0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                            mem[197 len 31]
            if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
                revert with 0, 'SafeMath: addition overflow'
            if 15 * stor201[arg1].field_64 < 0:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if stor203[arg1].field_8 * sub_350b7995 < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_8 * sub_350b7995) << 232,
               stor201[arg1].field_3
    if stor203[arg1].field_16 * sub_4c0647f6 / sub_4c0647f6 != stor203[arg1].field_16:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_350b7995:
        if not sub_a1570c8e:
            if stor203[arg1].field_16 * sub_4c0647f6 < 0:
                revert with 0, 'SafeMath: addition overflow'
            if (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) < stor203[arg1].field_16 * sub_4c0647f6:
                revert with 0, 'SafeMath: addition overflow'
            return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
                   ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
                   (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) << 232,
                   stor201[arg1].field_3
        if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                        32,
                        33,
                        0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                        mem[197 len 31]
        if stor203[arg1].field_0 * sub_a1570c8e < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
               stor201[arg1].field_3
    if stor203[arg1].field_8 * sub_350b7995 / sub_350b7995 != stor203[arg1].field_8:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if not sub_a1570c8e:
        if stor203[arg1].field_8 * sub_350b7995 < 0:
            revert with 0, 'SafeMath: addition overflow'
        if (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) < stor203[arg1].field_8 * sub_350b7995:
            revert with 0, 'SafeMath: addition overflow'
        if 15 * stor201[arg1].field_64 < 0:
            revert with 0, 'SafeMath: addition overflow'
        return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
               ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
               (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) << 232,
               stor201[arg1].field_3
    if stor203[arg1].field_0 * sub_a1570c8e / sub_a1570c8e != stor203[arg1].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                    32,
                    33,
                    0x73536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f,
                    mem[197 len 31]
    if (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) < stor203[arg1].field_0 * sub_a1570c8e:
        revert with 0, 'SafeMath: addition overflow'
    if stor203[arg1].field_16 * sub_4c0647f6 < 0:
        revert with 0, 'SafeMath: addition overflow'
    if 15 * stor201[arg1].field_64 < 0:
        revert with 0, 'SafeMath: addition overflow'
    return ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('mask_shl', 16, 0, 64, ('add', ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))), ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 128, ('field', 128, ('stor', ('name', 'stor208', 208)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))), 
           ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 48, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 32, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('add', ('signextend', 15, ('mask_shl', 256, -64, -64, ('mul', ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor209', 209)))))), ('signextend', 15, ('signextend', 15, ('mask_shl', 256, 0, 64, ('field', 16, ('stor', ('array', ('param', 'arg1'), ('name', 'stor201', 201)))))))))), ('signextend', 15, ('signextend', 15, ('signextend', 15, ('type', 256, ('field', 0, ('stor', ('name', 'stor208', 208)))))))))))))))),
           (15 * stor201[arg1].field_64) + (stor203[arg1].field_16 * sub_4c0647f6) + (stor203[arg1].field_8 * sub_350b7995) + (stor203[arg1].field_0 * sub_a1570c8e) << 232,
           stor201[arg1].field_3
}



}
