contract main {




// =====================  Runtime code  =====================


#
#  - stake(address arg1, uint256 arg2)
#  - unstake(address arg1, uint256 arg2)
#
const DEFAULT_ADMIN_ROLE = 0

const MANAGER_ROLE = 0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b

const MAINTAINER_ROLE = 0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab


mapping of struct roleAdmin;
mapping of uint256 sub_652d7c0f;
uint256 sub_771d2904;
mapping of struct balanceOf;
mapping of struct sub_77ce4643;
uint256 sub_12a12a06;
address tokenAddress;
address rewardsTokenAddress;
mapping of uint256 stor8;
mapping of uint256 allowance;
uint256 totalSupply;
array of struct stor11;
array of struct stor12;
uint8 decimal;

function sub_12a12a06(?) payable {
    return sub_12a12a06
}

function totalSupply() payable {
    return totalSupply
}

function getRoleAdmin(bytes32 arg1) payable {
    require calldata.size - 4 >= 32
    return roleAdmin[arg1].field_256
}

function decimals() payable {
    return decimal
}

function sub_652d7c0f(?) payable {
    require calldata.size - 4 >= 32
    return sub_652d7c0f[arg1]
}

function balanceOf(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[address(arg1)].field_0
}

function decimal() payable {
    return decimal
}

function sub_771d2904(?) payable {
    return sub_771d2904
}

function sub_77ce4643(?) payable {
    require calldata.size - 4 >= 32
    return sub_77ce4643[arg1].field_0, sub_77ce4643[arg1].field_256
}

function staker(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return balanceOf[arg1].field_0, 
           balanceOf[arg1].field_256,
           balanceOf[arg1].field_512,
           balanceOf[arg1].field_768,
           balanceOf[arg1].field_1024,
           balanceOf[arg1].field_1280
}

function hasRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    return bool(roleAdmin[arg1][address(arg2)].field_0)
}

function sub_b2fc66d0(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not balanceOf[address(arg1)].field_0:
        revert with 0, 'invalid staker'
    return balanceOf[address(arg1)].field_1024
}

function sub_c5691cbd(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return balanceOf[address(arg1)].field_256
}

function rewardsToken() payable {
    return rewardsTokenAddress
}

function allowance(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return allowance[address(arg1)][address(arg2)]
}

function sub_f657cc62(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    return balanceOf[address(arg1)].field_1280
}

function token() payable {
    return tokenAddress
}

function _fallback() payable {
    revert
}

function sub_0e0d3205(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not balanceOf[address(arg1)].field_0:
        return 0
    return 1
}

function supportsInterface(bytes4 arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if 0x7965db0b00000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function renounceRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if arg2 != msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'AccessControl: can only renounce roles for self'
    if roleAdmin[arg1][address(arg2)].field_0:
        roleAdmin[arg1][address(arg2)].field_0 = 0
        emit RoleRevoked(arg1, arg2, msg.sender);
}

function approve(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function increaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] > !arg2:
        revert with 0, 17
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] + arg2
    emit Approval((allowance[msg.sender][address(arg1)] + arg2), msg.sender, arg1);
    return 1
}

function transfer(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if stor8[address(msg.sender)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    stor8[address(msg.sender)] -= arg2
    if stor8[arg1] > !arg2:
        revert with 0, 17
    stor8[arg1] += arg2
    emit Transfer(arg2, msg.sender, arg1);
    return 1
}

function decreaseAllowance(address arg1, uint256 arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    if allowance[msg.sender][address(arg1)] < arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(msg.sender)][address(arg1)] = allowance[msg.sender][address(arg1)] - arg2
    emit Approval((allowance[msg.sender][address(arg1)] - arg2), msg.sender, arg1);
    return 1
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'
    if not arg2:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'
    if stor8[address(arg1)] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'
    stor8[address(arg1)] -= arg3
    if stor8[arg2] > !arg3:
        revert with 0, 17
    stor8[arg2] += arg3
    emit Transfer(arg3, arg1, arg2);
    if allowance[address(arg1)][msg.sender] < arg3:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds allowance'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'
    if not msg.sender:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'
    allowance[address(arg1)][address(msg.sender)] = allowance[address(arg1)][msg.sender] - arg3
    emit Approval((allowance[address(arg1)][msg.sender] - arg3), arg1, msg.sender);
    return 1
}

function revokeRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if roleAdmin[roleAdmin[arg1].field_256][address(msg.sender)].field_0:
        if roleAdmin[arg1][address(arg2)].field_0:
            roleAdmin[arg1][address(arg2)].field_0 = 0
            emit RoleRevoked(arg1, arg2, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[arg1].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[arg1].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function grantRole(bytes32 arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg2 == arg2
    if roleAdmin[roleAdmin[arg1].field_256][address(msg.sender)].field_0:
        if not roleAdmin[arg1][address(arg2)].field_0:
            roleAdmin[arg1][address(arg2)].field_0 = 1
            emit RoleGranted(arg1, arg2, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[arg1].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[arg1].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function removeMaintainer(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if roleAdmin[roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256][address(msg.sender)].field_0:
        if roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab][address(arg1)].field_0:
            roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab][address(arg1)].field_0 = 0
            emit RoleRevoked(0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab, arg1, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function removeManager(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if roleAdmin[roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256][address(msg.sender)].field_0:
        if roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(arg1)].field_0:
            roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(arg1)].field_0 = 0
            emit RoleRevoked(0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b, arg1, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function setMaintainer(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not arg1:
        revert with 0, 'Invalid maintainer address'
    if roleAdmin[roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256][address(msg.sender)].field_0:
        if not roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab][address(arg1)].field_0:
            roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab][address(arg1)].field_0 = 1
            emit RoleGranted(0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab, arg1, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function setManager(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not ext_code.size(arg1):
        revert with 0, 'Invalid manager address'
    if roleAdmin[roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256][address(msg.sender)].field_0:
        if not roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(arg1)].field_0:
            roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(arg1)].field_0 = 1
            emit RoleGranted(0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b, arg1, msg.sender);
    mem[128 len 42] = call.data[calldata.size len 42]
    idx = 41
    s = address(msg.sender)
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 42:
            revert with 0, 50
        mem[idx + 128 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if msg.sender + 10240:
        revert with 0, 'Strings: hex length insufficient'
    mem[224 len 66] = call.data[calldata.size len 66]
    idx = 65
    s = roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256
    while idx > 1:
        if s % 16 >= 16:
            revert with 0, 50
        if idx >= 66:
            revert with 0, 50
        mem[idx + 224 len 8] = Mask(8, -(0, 0) + 256, 0) << (0, 0) - 256
        if not idx:
            revert with 0, 17
        idx = idx - 1
        s = Mask(252, 0, s) * 0.0625
        continue 
    if roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b].field_256 + 16384:
        revert with 0, 'Strings: hex length insufficient'
    revert with 0, 32, 148, 'AccessControl: account ', mem[160 len 42], 8297, mem[288 len 66], 0, 0 >> 928, 0
}

function name() payable {
    if bool(stor11.length):
        if bool(stor11.length) == uint255(stor11.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor11.length):
            if bool(stor11.length) == uint255(stor11.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor11.length):
                if 31 < uint255(stor11.length) * 0.5:
                    mem[128] = uint256(stor11.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor11.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor11[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor11.length), data=mem[128 len ceil32(uint255(stor11.length) * 0.5)])
                mem[128] = 256 * stor11.length.field_8
        else:
            if bool(stor11.length) == stor11.length.field_1 < 32:
                revert with 0, 34
            if stor11.length.field_1:
                if 31 < stor11.length.field_1:
                    mem[128] = uint256(stor11.field_0)
                    idx = 128
                    s = 0
                    while stor11.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor11[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor11.length), data=mem[128 len ceil32(uint255(stor11.length) * 0.5)])
                mem[128] = 256 * stor11.length.field_8
        mem[ceil32(uint255(stor11.length) * 0.5) + 192 len ceil32(uint255(stor11.length) * 0.5)] = mem[128 len ceil32(uint255(stor11.length) * 0.5)]
        if ceil32(uint255(stor11.length) * 0.5) > uint255(stor11.length) * 0.5:
            mem[(uint255(stor11.length) * 0.5) + ceil32(uint255(stor11.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor11.length), data=mem[128 len ceil32(uint255(stor11.length) * 0.5)], mem[(2 * ceil32(uint255(stor11.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor11.length) * 0.5)]), 
    if bool(stor11.length) == stor11.length.field_1 < 32:
        revert with 0, 34
    if bool(stor11.length):
        if bool(stor11.length) == uint255(stor11.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor11.length):
            if 31 < uint255(stor11.length) * 0.5:
                mem[128] = uint256(stor11.field_0)
                idx = 128
                s = 0
                while (uint255(stor11.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor11[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor11.length % 128, data=mem[128 len ceil32(stor11.length.field_1)])
            mem[128] = 256 * stor11.length.field_8
    else:
        if bool(stor11.length) == stor11.length.field_1 < 32:
            revert with 0, 34
        if stor11.length.field_1:
            if 31 < stor11.length.field_1:
                mem[128] = uint256(stor11.field_0)
                idx = 128
                s = 0
                while stor11.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor11[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor11.length % 128, data=mem[128 len ceil32(stor11.length.field_1)])
            mem[128] = 256 * stor11.length.field_8
    mem[ceil32(stor11.length.field_1) + 192 len ceil32(stor11.length.field_1)] = mem[128 len ceil32(stor11.length.field_1)]
    if ceil32(stor11.length.field_1) > stor11.length.field_1:
        mem[stor11.length.field_1 + ceil32(stor11.length.field_1) + 192] = 0
    return Array(len=stor11.length % 128, data=mem[128 len ceil32(stor11.length.field_1)], mem[(2 * ceil32(stor11.length.field_1)) + 192 len 2 * ceil32(stor11.length.field_1)]), 
}

function symbol() payable {
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length) * 0.5 < 32:
            revert with 0, 34
        if bool(stor12.length):
            if bool(stor12.length) == uint255(stor12.length) * 0.5 < 32:
                revert with 0, 34
            if Mask(256, -1, stor12.length):
                if 31 < uint255(stor12.length) * 0.5:
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while (uint255(stor12.length) * 0.5) + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor12.length), data=mem[128 len ceil32(uint255(stor12.length) * 0.5)])
                mem[128] = 256 * stor12.length.field_8
        else:
            if bool(stor12.length) == stor12.length.field_1 < 32:
                revert with 0, 34
            if stor12.length.field_1:
                if 31 < stor12.length.field_1:
                    mem[128] = uint256(stor12.field_0)
                    idx = 128
                    s = 0
                    while stor12.length.field_1 + 96 > idx:
                        mem[idx + 32] = stor12[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, stor12.length), data=mem[128 len ceil32(uint255(stor12.length) * 0.5)])
                mem[128] = 256 * stor12.length.field_8
        mem[ceil32(uint255(stor12.length) * 0.5) + 192 len ceil32(uint255(stor12.length) * 0.5)] = mem[128 len ceil32(uint255(stor12.length) * 0.5)]
        if ceil32(uint255(stor12.length) * 0.5) > uint255(stor12.length) * 0.5:
            mem[(uint255(stor12.length) * 0.5) + ceil32(uint255(stor12.length) * 0.5) + 192] = 0
        return Array(len=2 * Mask(256, -1, stor12.length), data=mem[128 len ceil32(uint255(stor12.length) * 0.5)], mem[(2 * ceil32(uint255(stor12.length) * 0.5)) + 192 len 2 * ceil32(uint255(stor12.length) * 0.5)]), 
    if bool(stor12.length) == stor12.length.field_1 < 32:
        revert with 0, 34
    if bool(stor12.length):
        if bool(stor12.length) == uint255(stor12.length) * 0.5 < 32:
            revert with 0, 34
        if Mask(256, -1, stor12.length):
            if 31 < uint255(stor12.length) * 0.5:
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while (uint255(stor12.length) * 0.5) + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)])
            mem[128] = 256 * stor12.length.field_8
    else:
        if bool(stor12.length) == stor12.length.field_1 < 32:
            revert with 0, 34
        if stor12.length.field_1:
            if 31 < stor12.length.field_1:
                mem[128] = uint256(stor12.field_0)
                idx = 128
                s = 0
                while stor12.length.field_1 + 96 > idx:
                    mem[idx + 32] = stor12[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)])
            mem[128] = 256 * stor12.length.field_8
    mem[ceil32(stor12.length.field_1) + 192 len ceil32(stor12.length.field_1)] = mem[128 len ceil32(stor12.length.field_1)]
    if ceil32(stor12.length.field_1) > stor12.length.field_1:
        mem[stor12.length.field_1 + ceil32(stor12.length.field_1) + 192] = 0
    return Array(len=stor12.length % 128, data=mem[128 len ceil32(stor12.length.field_1)], mem[(2 * ceil32(stor12.length.field_1)) + 192 len 2 * ceil32(stor12.length.field_1)]), 
}

function sub_2e94d145(?) payable {
    require calldata.size - 4 >= 64
    if not roleAdmin[0x8339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'caller has no access to the method'
    if arg1 / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(arg1 / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (arg1 / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (arg1 / 24 * 3600) + 68569 < 0 and 2440588 < -(arg1 / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (arg1 / 24 * 3600) + 2509157 and bool((arg1 / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((arg1 / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (arg1 / 24 * 3600) + 2509157 / 146097 and bool(4 * (arg1 / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (arg1 / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (arg1 / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (arg1 / 24 * 3600) + 2509157 < ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (arg1 / 24 * 3600) + 2509157 > ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (arg1 / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + -((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(arg1 / 24 * 3600) + ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(arg1 / 24 * 3600) + ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(arg1 / 24 * 3600) + ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(arg1 / 24 * 3600) + ((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (arg1 / 24 * 3600) + -((146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if (24 * 3600 * arg1 / 24 * 3600) + (-86400 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600) < sub_771d2904:
        revert with 0, 17
    if (24 * 3600 * arg1 / 24 * 3600) + (-86400 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + -sub_771d2904 + (876600 * 24 * 3600) != 24 * 3600:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Stake Error: invalid reward proportion date'
    sub_652d7c0f[(24 * 3600 * arg1 / 24 * 3600) + (-86400 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)] = arg2
    sub_771d2904 = (24 * 3600 * arg1 / 24 * 3600) + (-86400 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + ((4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * arg1 / 24 * 3600) + (-80 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * arg1 / 24 * 3600) + (-4000 * (146097 * 4 * (arg1 / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)
}

function sub_2796dff2(?) payable {
    require calldata.size - 4 >= 32
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if arg1 > (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600):
        revert with 0, 'Stake Error: invalid date'
    if sub_77ce4643[arg1].field_0:
        return sub_77ce4643[arg1].field_0
    if not sub_12a12a06:
        return 0
    if arg1 < sub_12a12a06:
        revert with 0, 17
    if var291002 > arg1 - sub_12a12a06 / 24 * 3600:
        if arg1 > sub_12a12a06:
            sub_12a12a06 = arg1
        return sub_77ce4643[arg1].field_0
    mem[64] = 160
    mem[96] = sub_77ce4643[stor5].field_0
    mem[128] = 0
    if var295002 > 0xc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab:
        revert with 0, 17
    if sub_12a12a06 > !var301002:
        revert with 0, 17
    mem[0] = var305001
    mem[32] = 4
    sub_77ce4643[var305001].field_0 = mem[var305004]
    sub_77ce4643[var305001].field_256 = mem[var305004 + 32]
    if var307001 == -1:
        revert with 0, 17
    # nil
}

function getRewards(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not balanceOf[address(arg1)].field_0:
        return balanceOf[address(arg1)].field_512
    mem[0] = arg1
    mem[32] = 3
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600) < balanceOf[address(arg1)].field_768:
        revert with 0, 17
    idx = 0
    s = 0
    while idx < (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + -balanceOf[address(arg1)].field_768 + (876600 * 24 * 3600) / 24 * 3600:
        if idx > 0xc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab:
            revert with 0, 17
        if balanceOf[address(arg1)].field_768 > !(24 * 3600 * idx):
            revert with 0, 17
        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
        mem[32] = 4
        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
            revert with 0, 'Stake Error: invalid daily total active stake'
        if tokenAddress == rewardsTokenAddress:
            if balanceOf[address(arg1)].field_0 > !balanceOf[address(arg1)].field_512:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and balanceOf[address(arg1)].field_0 + balanceOf[address(arg1)].field_512 > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0)
            continue 
        if balanceOf[address(arg1)].field_768 + (24 * 3600 * idx) > sub_771d2904:
            revert with 0, 'Stake Error: auto compound reward failed'
        require ext_code.size(rewardsTokenAddress)
        staticcall rewardsTokenAddress.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _99 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _101 = mem[_99]
        require mem[_99] == mem[_99 + 31 len 1]
        if not mem[_99 + 31 len 1]:
            require ext_code.size(tokenAddress)
            staticcall tokenAddress.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _104 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _105 = mem[_104]
            require mem[_104] == mem[_104 + 31 len 1]
            if not mem[_104 + 31 len 1]:
                if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + balanceOf[address(arg1)].field_512 > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if bool(bool(mem[_104 + 31 len 1] < 78)) or bool(bool(mem[_104 + 31 len 1] < 32)):
                if 10^mem[_104 + 31 len 1] > -1:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and 10^mem[_104 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_104 + 31 len 1]):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_105)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_105) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_105) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_105) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if var311005 > 1:
                t = var311001
                u = var311002
                v = var311005
                while t <= -1 / t:
                    if not bool(v):
                        if uint255(v) * 0.5 > 1:
                            t = t * t
                            u = u
                            v = uint255(v) * 0.5
                            continue 
                        if u > -1 / t * t:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = t * u
                        v = uint255(v) * 0.5
                        continue 
                    if t * u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                revert with 0, 17
            if var311002 > -1 / var311001:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and var311001 * var311002 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var311001 * var311002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var311001 * var311002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var311001 * var311002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var311001 * var311002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var311001 * var311002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if bool(bool(mem[_99 + 31 len 1] < 78)) or bool(bool(mem[_99 + 31 len 1] < 32)):
            if 10^mem[_99 + 31 len 1] > -1:
                revert with 0, 17
            require ext_code.size(tokenAddress)
            staticcall tokenAddress.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _108 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _111 = mem[_108]
            require mem[_108] == mem[_108 + 31 len 1]
            if not mem[_108 + 31 len 1]:
                if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not 10^uint8(_101):
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / 10^uint8(_101)):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / 10^uint8(_101)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if bool(bool(mem[_108 + 31 len 1] < 78)) or bool(bool(mem[_108 + 31 len 1] < 32)):
                if 10^mem[_108 + 31 len 1] > -1:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and 10^mem[_108 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not 10^uint8(_101):
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_108 + 31 len 1] / 10^uint8(_101)):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_111) / 10^uint8(_101)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_111) / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_111) / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_111) / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if var317005 > 1:
                t = var317001
                u = var317002
                v = var317005
                while t <= -1 / t:
                    if not bool(v):
                        if uint255(v) * 0.5 > 1:
                            t = t * t
                            u = u
                            v = uint255(v) * 0.5
                            continue 
                        if u > -1 / t * t:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not 10^uint8(_101):
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_101)):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_101)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = t * u
                        v = uint255(v) * 0.5
                        continue 
                    if t * u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not 10^uint8(_101):
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_101)):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_101)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                revert with 0, 17
            if var317002 > -1 / var317001:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and var317001 * var317002 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not 10^uint8(_101):
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var317001 * var317002 / 10^uint8(_101)):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var317001 * var317002 / 10^uint8(_101)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var317001 * var317002 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var317001 * var317002 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var317001 * var317002 / 10^uint8(_101) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if var300005 > 1:
            t = var300001
            u = var300002
            v = var300005
            while t <= -1 / t:
                if not bool(v):
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = u
                        v = uint255(v) * 0.5
                        continue 
                    if u > -1 / t * t:
                        revert with 0, 17
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x313ce567 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _280 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _285 = mem[_280]
                    require mem[_280] == mem[_280 + 31 len 1]
                    if not mem[_280 + 31 len 1]:
                        if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if bool(bool(mem[_280 + 31 len 1] < 78)) or bool(bool(mem[_280 + 31 len 1] < 32)):
                        if 10^mem[_280 + 31 len 1] > -1:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and 10^mem[_280 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_280 + 31 len 1] / t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_285) / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_285) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_285) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_285) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if var327005 > 1:
                        v = var327001
                        w = var327002
                        x = var327005
                        while v <= -1 / v:
                            if not bool(x):
                                if uint255(x) * 0.5 > 1:
                                    v = v * v
                                    w = w
                                    x = uint255(x) * 0.5
                                    continue 
                                if w > -1 / v * v:
                                    revert with 0, 17
                                if balanceOf[address(arg1)].field_512 and v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                    revert with 0, 17
                                if not t * t * u:
                                    revert with 0, 18
                                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                    revert with 0, 17
                                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * w / t * t * u):
                                    revert with 0, 17
                                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                    revert with 0, 17
                                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                                mem[32] = 4
                                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                    revert with 0, 17
                                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                    revert with 0, 17
                                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                    revert with 0, 18
                                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                                continue 
                            if uint255(x) * 0.5 > 1:
                                v = v * v
                                w = v * w
                                x = uint255(x) * 0.5
                                continue 
                            if v * w > -1 / v * v:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_512 and v * v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                revert with 0, 17
                            if not t * t * u:
                                revert with 0, 18
                            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u):
                                revert with 0, 17
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                revert with 0, 17
                            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                            mem[32] = 4
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                revert with 0, 17
                            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                revert with 0, 17
                            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                revert with 0, 18
                            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                            continue 
                        revert with 0, 17
                    if var327002 > -1 / var327001:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and var327001 * var327002 > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var327001 * var327002 / t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var327001 * var327002 / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var327001 * var327002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var327001 * var327002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var327001 * var327002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if uint255(v) * 0.5 > 1:
                    t = t * t
                    u = t * u
                    v = uint255(v) * 0.5
                    continue 
                if t * u > -1 / t * t:
                    revert with 0, 17
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x313ce567 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _282 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _286 = mem[_282]
                require mem[_282] == mem[_282 + 31 len 1]
                if not mem[_282 + 31 len 1]:
                    if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if bool(bool(mem[_282 + 31 len 1] < 78)) or bool(bool(mem[_282 + 31 len 1] < 32)):
                    if 10^mem[_282 + 31 len 1] > -1:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and 10^mem[_282 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_282 + 31 len 1] / t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_286) / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_286) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_286) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_286) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if var328005 > 1:
                    v = var328001
                    w = var328002
                    x = var328005
                    while v <= -1 / v:
                        if not bool(x):
                            if uint255(x) * 0.5 > 1:
                                v = v * v
                                w = w
                                x = uint255(x) * 0.5
                                continue 
                            if w > -1 / v * v:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_512 and v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                revert with 0, 17
                            if not t * t * t * u:
                                revert with 0, 18
                            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u):
                                revert with 0, 17
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                revert with 0, 17
                            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                            mem[32] = 4
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                revert with 0, 17
                            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                revert with 0, 17
                            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                revert with 0, 18
                            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                            continue 
                        if uint255(x) * 0.5 > 1:
                            v = v * v
                            w = v * w
                            x = uint255(x) * 0.5
                            continue 
                        if v * w > -1 / v * v:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and v * v * v * w > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    revert with 0, 17
                if var328002 > -1 / var328001:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and var328001 * var328002 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not t * t * t * u:
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var328001 * var328002 / t * t * t * u):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var328001 * var328002 / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var328001 * var328002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var328001 * var328002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var328001 * var328002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            revert with 0, 17
        if var300002 > -1 / var300001:
            revert with 0, 17
        require ext_code.size(tokenAddress)
        staticcall tokenAddress.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _172 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _175 = mem[_172]
        require mem[_172] == mem[_172 + 31 len 1]
        if not mem[_172 + 31 len 1]:
            if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not var300001 * var300002:
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / var300001 * var300002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / var300001 * var300002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if bool(bool(mem[_172 + 31 len 1] < 78)) or bool(bool(mem[_172 + 31 len 1] < 32)):
            if 10^mem[_172 + 31 len 1] > -1:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and 10^mem[_172 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not var300001 * var300002:
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_172 + 31 len 1] / var300001 * var300002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_175) / var300001 * var300002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_175) / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_175) / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_175) / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if var322005 > 1:
            t = var322001
            u = var322002
            v = var322005
            while t <= -1 / t:
                if not bool(v):
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = u
                        v = uint255(v) * 0.5
                        continue 
                    if u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not var300001 * var300002:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u / var300001 * var300002):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u / var300001 * var300002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if uint255(v) * 0.5 > 1:
                    t = t * t
                    u = t * u
                    v = uint255(v) * 0.5
                    continue 
                if t * u > -1 / t * t:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not var300001 * var300002:
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u / var300001 * var300002):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u / var300001 * var300002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            revert with 0, 17
        if var322002 > -1 / var322001:
            revert with 0, 17
        if balanceOf[address(arg1)].field_512 and var322001 * var322002 > -1 / balanceOf[address(arg1)].field_512:
            revert with 0, 17
        if not var300001 * var300002:
            revert with 0, 18
        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
            revert with 0, 17
        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var322001 * var322002 / var300001 * var300002):
            revert with 0, 17
        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
            revert with 0, 17
        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
        mem[32] = 4
        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var322001 * var322002 / var300001 * var300002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
            revert with 0, 17
        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var322001 * var322002 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
            revert with 0, 17
        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
            revert with 0, 18
        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var322001 * var322002 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var322001 * var322002 / var300001 * var300002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
        continue 
    if s / 100 * 10^6 > !balanceOf[address(arg1)].field_512:
        revert with 0, 17
    return ((s / 100 * 10^6) + balanceOf[address(arg1)].field_512)
}

function allocateRewards(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if not roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'caller has no access to the method'
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_0:
        if sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 > !arg1:
            revert with 0, 17
        sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 += arg1
        emit RewardAllocated(arg1, (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600));
    if not sub_12a12a06:
        if sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 > !arg1:
            revert with 0, 17
        sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 += arg1
        emit RewardAllocated(arg1, (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600));
    if (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600) < sub_12a12a06:
        revert with 0, 17
    if var548002 > (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + -sub_12a12a06 + (876600 * 24 * 3600) / 24 * 3600:
        if (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600) > sub_12a12a06:
            sub_12a12a06 = (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)
        if sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 > !arg1:
            revert with 0, 17
        sub_77ce4643[(24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)].field_256 += arg1
        emit RewardAllocated(arg1, (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600));
    mem[64] = 160
    mem[96] = sub_77ce4643[stor5].field_0
    mem[128] = 0
    if var552002 > 0xc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab:
        revert with 0, 17
    if sub_12a12a06 > !var558002:
        revert with 0, 17
    mem[0] = var562001
    mem[32] = 4
    sub_77ce4643[var562001].field_0 = mem[var562004]
    sub_77ce4643[var562001].field_256 = mem[var562004 + 32]
    if var564001 == -1:
        revert with 0, 17
    # nil
}

function withdrawRewards(address arg1) payable {
    mem[64] = 96
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not roleAdmin[0xfe241ecf16d79d0f8dbfb92cbc07fe17840425976cf0667f022fe9877caa831b][address(msg.sender)].field_0:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'caller has no access to the method'
    if not balanceOf[address(arg1)].field_0:
        if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
            revert with 0, 17
        if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
            revert with 0, 17
        if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
            revert with 0, 17
        if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
            revert with 0, 17
        if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
            revert with 0, 17
        if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
            revert with 0, 17
        if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
            revert with 0, 17
        if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
            revert with 0, 17
        if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
            revert with 0, 17
        if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
            revert with 0, 17
        if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
            revert with 0, 17
        if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
            revert with 0, 17
        if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
            revert with 0, 17
        if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
            revert with 0, 17
        if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
            revert with 0, 17
        if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
            revert with 0, 17
        if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
            revert with 0, 17
        if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
            revert with 0, 17
        if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
            revert with 0, 17
        if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
            revert with 0, 17
        if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
            revert with 0, 17
        if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
            revert with 0, 17
        require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
            revert with 0, 17
        if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
            revert with 0, 17
        if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
            revert with 0, 17
        if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
            revert with 0, 17
        if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
            revert with 0, 17
        if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
            revert with 0, 17
        if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
            revert with 0, 17
        if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
            revert with 0, 17
        if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
            revert with 0, 17
        if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
            revert with 0, 17
        if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
            revert with 0, 17
        balanceOf[address(arg1)].field_768 = (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)
        balanceOf[address(arg1)].field_1280 = block.timestamp
        balanceOf[address(arg1)].field_512 = 0
        return balanceOf[address(arg1)].field_512
    mem[0] = arg1
    mem[32] = 3
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    if (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600) < balanceOf[address(arg1)].field_768:
        revert with 0, 17
    idx = 0
    s = 0
    while idx < (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + -balanceOf[address(arg1)].field_768 + (876600 * 24 * 3600) / 24 * 3600:
        if idx > 0xc22e450672894ab6cd8efb11d33f5617839a5bc7dea00c22e450672894ab:
            revert with 0, 17
        if balanceOf[address(arg1)].field_768 > !(24 * 3600 * idx):
            revert with 0, 17
        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
        mem[32] = 4
        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
            revert with 0, 'Stake Error: invalid daily total active stake'
        if tokenAddress == rewardsTokenAddress:
            if balanceOf[address(arg1)].field_0 > !balanceOf[address(arg1)].field_512:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and balanceOf[address(arg1)].field_0 + balanceOf[address(arg1)].field_512 > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0)
            continue 
        if balanceOf[address(arg1)].field_768 + (24 * 3600 * idx) > sub_771d2904:
            revert with 0, 'Stake Error: auto compound reward failed'
        require ext_code.size(rewardsTokenAddress)
        staticcall rewardsTokenAddress.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _102 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _104 = mem[_102]
        require mem[_102] == mem[_102 + 31 len 1]
        if not mem[_102 + 31 len 1]:
            require ext_code.size(tokenAddress)
            staticcall tokenAddress.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _107 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _108 = mem[_107]
            require mem[_107] == mem[_107 + 31 len 1]
            if not mem[_107 + 31 len 1]:
                if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + balanceOf[address(arg1)].field_512 > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if bool(bool(mem[_107 + 31 len 1] < 78)) or bool(bool(mem[_107 + 31 len 1] < 32)):
                if 10^mem[_107 + 31 len 1] > -1:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and 10^mem[_107 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_107 + 31 len 1]):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_108)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_108) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_108) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_108) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if var315005 > 1:
                t = var315001
                u = var315002
                v = var315005
                while t <= -1 / t:
                    if not bool(v):
                        if uint255(v) * 0.5 > 1:
                            t = t * t
                            u = u
                            v = uint255(v) * 0.5
                            continue 
                        if u > -1 / t * t:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = t * u
                        v = uint255(v) * 0.5
                        continue 
                    if t * u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                revert with 0, 17
            if var315002 > -1 / var315001:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and var315001 * var315002 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var315001 * var315002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var315001 * var315002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var315001 * var315002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var315001 * var315002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var315001 * var315002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if bool(bool(mem[_102 + 31 len 1] < 78)) or bool(bool(mem[_102 + 31 len 1] < 32)):
            if 10^mem[_102 + 31 len 1] > -1:
                revert with 0, 17
            require ext_code.size(tokenAddress)
            staticcall tokenAddress.0x313ce567 with:
                    gas gas_remaining wei
            mem[mem[64]] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            _111 = mem[64]
            mem[64] = mem[64] + ceil32(return_data.size)
            require return_data.size >= 32
            _114 = mem[_111]
            require mem[_111] == mem[_111 + 31 len 1]
            if not mem[_111 + 31 len 1]:
                if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not 10^uint8(_104):
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / 10^uint8(_104)):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / 10^uint8(_104)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if bool(bool(mem[_111 + 31 len 1] < 78)) or bool(bool(mem[_111 + 31 len 1] < 32)):
                if 10^mem[_111 + 31 len 1] > -1:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and 10^mem[_111 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not 10^uint8(_104):
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_111 + 31 len 1] / 10^uint8(_104)):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_114) / 10^uint8(_104)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_114) / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_114) / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_114) / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            if var321005 > 1:
                t = var321001
                u = var321002
                v = var321005
                while t <= -1 / t:
                    if not bool(v):
                        if uint255(v) * 0.5 > 1:
                            t = t * t
                            u = u
                            v = uint255(v) * 0.5
                            continue 
                        if u > -1 / t * t:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not 10^uint8(_104):
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_104)):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_104)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = t * u
                        v = uint255(v) * 0.5
                        continue 
                    if t * u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not 10^uint8(_104):
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_104)):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_104)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                revert with 0, 17
            if var321002 > -1 / var321001:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and var321001 * var321002 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not 10^uint8(_104):
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var321001 * var321002 / 10^uint8(_104)):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var321001 * var321002 / 10^uint8(_104)) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var321001 * var321002 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var321001 * var321002 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var321001 * var321002 / 10^uint8(_104) * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if var304005 > 1:
            t = var304001
            u = var304002
            v = var304005
            while t <= -1 / t:
                if not bool(v):
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = u
                        v = uint255(v) * 0.5
                        continue 
                    if u > -1 / t * t:
                        revert with 0, 17
                    require ext_code.size(tokenAddress)
                    staticcall tokenAddress.0x313ce567 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _286 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _291 = mem[_286]
                    require mem[_286] == mem[_286 + 31 len 1]
                    if not mem[_286 + 31 len 1]:
                        if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if bool(bool(mem[_286 + 31 len 1] < 78)) or bool(bool(mem[_286 + 31 len 1] < 32)):
                        if 10^mem[_286 + 31 len 1] > -1:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and 10^mem[_286 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_286 + 31 len 1] / t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_291) / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_291) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_291) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_291) / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    if var331005 > 1:
                        v = var331001
                        w = var331002
                        x = var331005
                        while v <= -1 / v:
                            if not bool(x):
                                if uint255(x) * 0.5 > 1:
                                    v = v * v
                                    w = w
                                    x = uint255(x) * 0.5
                                    continue 
                                if w > -1 / v * v:
                                    revert with 0, 17
                                if balanceOf[address(arg1)].field_512 and v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                    revert with 0, 17
                                if not t * t * u:
                                    revert with 0, 18
                                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                    revert with 0, 17
                                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * w / t * t * u):
                                    revert with 0, 17
                                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                    revert with 0, 17
                                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                                mem[32] = 4
                                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                    revert with 0, 17
                                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                    revert with 0, 17
                                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                    revert with 0, 18
                                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                    revert with 0, 17
                                if idx == -1:
                                    revert with 0, 17
                                idx = idx + 1
                                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                                continue 
                            if uint255(x) * 0.5 > 1:
                                v = v * v
                                w = v * w
                                x = uint255(x) * 0.5
                                continue 
                            if v * w > -1 / v * v:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_512 and v * v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                revert with 0, 17
                            if not t * t * u:
                                revert with 0, 18
                            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u):
                                revert with 0, 17
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                revert with 0, 17
                            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                            mem[32] = 4
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                revert with 0, 17
                            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                revert with 0, 17
                            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                revert with 0, 18
                            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                            continue 
                        revert with 0, 17
                    if var331002 > -1 / var331001:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and var331001 * var331002 > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var331001 * var331002 / t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var331001 * var331002 / t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var331001 * var331002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var331001 * var331002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var331001 * var331002 / t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if uint255(v) * 0.5 > 1:
                    t = t * t
                    u = t * u
                    v = uint255(v) * 0.5
                    continue 
                if t * u > -1 / t * t:
                    revert with 0, 17
                require ext_code.size(tokenAddress)
                staticcall tokenAddress.0x313ce567 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _288 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _292 = mem[_288]
                require mem[_288] == mem[_288 + 31 len 1]
                if not mem[_288 + 31 len 1]:
                    if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if bool(bool(mem[_288 + 31 len 1] < 78)) or bool(bool(mem[_288 + 31 len 1] < 32)):
                    if 10^mem[_288 + 31 len 1] > -1:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and 10^mem[_288 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not t * t * t * u:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_288 + 31 len 1] / t * t * t * u):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_292) / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_292) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_292) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_292) / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if var332005 > 1:
                    v = var332001
                    w = var332002
                    x = var332005
                    while v <= -1 / v:
                        if not bool(x):
                            if uint255(x) * 0.5 > 1:
                                v = v * v
                                w = w
                                x = uint255(x) * 0.5
                                continue 
                            if w > -1 / v * v:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_512 and v * v * w > -1 / balanceOf[address(arg1)].field_512:
                                revert with 0, 17
                            if not t * t * t * u:
                                revert with 0, 18
                            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                                revert with 0, 17
                            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u):
                                revert with 0, 17
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                                revert with 0, 17
                            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                            mem[32] = 4
                            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                                revert with 0, 17
                            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                                revert with 0, 17
                            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                                revert with 0, 18
                            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                            continue 
                        if uint255(x) * 0.5 > 1:
                            v = v * v
                            w = v * w
                            x = uint255(x) * 0.5
                            continue 
                        if v * w > -1 / v * v:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_512 and v * v * v * w > -1 / balanceOf[address(arg1)].field_512:
                            revert with 0, 17
                        if not t * t * t * u:
                            revert with 0, 18
                        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                            revert with 0, 17
                        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u):
                            revert with 0, 17
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                            revert with 0, 17
                        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                        mem[32] = 4
                        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                            revert with 0, 17
                        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                            revert with 0, 17
                        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                            revert with 0, 18
                        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * v * v * v * w / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                        continue 
                    revert with 0, 17
                if var332002 > -1 / var332001:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and var332001 * var332002 > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not t * t * t * u:
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var332001 * var332002 / t * t * t * u):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var332001 * var332002 / t * t * t * u) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var332001 * var332002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var332001 * var332002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var332001 * var332002 / t * t * t * u * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            revert with 0, 17
        if var304002 > -1 / var304001:
            revert with 0, 17
        require ext_code.size(tokenAddress)
        staticcall tokenAddress.0x313ce567 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _175 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _178 = mem[_175]
        require mem[_175] == mem[_175 + 31 len 1]
        if not mem[_175 + 31 len 1]:
            if balanceOf[address(arg1)].field_512 and 1 > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not var304001 * var304002:
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 / var304001 * var304002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 / var304001 * var304002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if bool(bool(mem[_175 + 31 len 1] < 78)) or bool(bool(mem[_175 + 31 len 1] < 32)):
            if 10^mem[_175 + 31 len 1] > -1:
                revert with 0, 17
            if balanceOf[address(arg1)].field_512 and 10^mem[_175 + 31 len 1] > -1 / balanceOf[address(arg1)].field_512:
                revert with 0, 17
            if not var304001 * var304002:
                revert with 0, 18
            if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                revert with 0, 17
            if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * 10^mem[_175 + 31 len 1] / var304001 * var304002):
                revert with 0, 17
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                revert with 0, 17
            mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
            mem[32] = 4
            if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * 10^uint8(_178) / var304001 * var304002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                revert with 0, 17
            if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * 10^uint8(_178) / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                revert with 0, 17
            if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                revert with 0, 18
            if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_178) / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * 10^uint8(_178) / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
            continue 
        if var326005 > 1:
            t = var326001
            u = var326002
            v = var326005
            while t <= -1 / t:
                if not bool(v):
                    if uint255(v) * 0.5 > 1:
                        t = t * t
                        u = u
                        v = uint255(v) * 0.5
                        continue 
                    if u > -1 / t * t:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_512 and t * t * u > -1 / balanceOf[address(arg1)].field_512:
                        revert with 0, 17
                    if not var304001 * var304002:
                        revert with 0, 18
                    if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                        revert with 0, 17
                    if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * u / var304001 * var304002):
                        revert with 0, 17
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                        revert with 0, 17
                    mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                    mem[32] = 4
                    if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * u / var304001 * var304002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                        revert with 0, 17
                    if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                        revert with 0, 17
                    if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                        revert with 0, 18
                    if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                    continue 
                if uint255(v) * 0.5 > 1:
                    t = t * t
                    u = t * u
                    v = uint255(v) * 0.5
                    continue 
                if t * u > -1 / t * t:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_512 and t * t * t * u > -1 / balanceOf[address(arg1)].field_512:
                    revert with 0, 17
                if not var304001 * var304002:
                    revert with 0, 18
                if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
                    revert with 0, 17
                if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * t * t * t * u / var304001 * var304002):
                    revert with 0, 17
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
                    revert with 0, 17
                mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
                mem[32] = 4
                if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * t * t * t * u / var304001 * var304002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
                    revert with 0, 17
                if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * t * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
                    revert with 0, 17
                if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
                    revert with 0, 18
                if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * t * t * t * u / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
                continue 
            revert with 0, 17
        if var326002 > -1 / var326001:
            revert with 0, 17
        if balanceOf[address(arg1)].field_512 and var326001 * var326002 > -1 / balanceOf[address(arg1)].field_512:
            revert with 0, 17
        if not var304001 * var304002:
            revert with 0, 18
        if balanceOf[address(arg1)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / balanceOf[address(arg1)].field_0:
            revert with 0, 17
        if balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 > !(balanceOf[address(arg1)].field_512 * var326001 * var326002 / var304001 * var304002):
            revert with 0, 17
        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 and sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0:
            revert with 0, 17
        mem[0] = balanceOf[address(arg1)].field_768 + (24 * 3600 * idx)
        mem[32] = 4
        if sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256 and (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000) + (balanceOf[address(arg1)].field_512 * var326001 * var326002 / var304001 * var304002) > -1 / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256:
            revert with 0, 17
        if (balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (balanceOf[address(arg1)].field_512 * var326001 * var326002 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) > 0x2af31dc4611873bf3f70834acdae9f0f4f534f5d60585a5f1c1a3ced1b:
            revert with 0, 17
        if not sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000:
            revert with 0, 18
        if s > !((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var326001 * var326002 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + ((100 * 10^6 * balanceOf[address(arg1)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) + (100 * 10^6 * balanceOf[address(arg1)].field_512 * var326001 * var326002 / var304001 * var304002 * sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_256) / sub_77ce4643[stor3[address(arg1)].field_768 + (24 * 3600 * idx)].field_0 * sub_652d7c0f[stor3[address(arg1)].field_768 + (24 * 3600 * idx)] / 1000)
        continue 
    if s / 100 * 10^6 > !balanceOf[address(arg1)].field_512:
        revert with 0, 17
    if block.timestamp / 24 * 3600 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426:
        revert with 0, 17
    if 2440588 > -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef426 and (block.timestamp / 24 * 3600) + 68569 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 68569 < 0 and 2440588 < -(block.timestamp / 24 * 3600) + 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef427:
        revert with 0, 17
    if 4 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + 2509157 and bool((block.timestamp / 24 * 3600) + 2509157 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < 0xe000000000000000000000000000000000000000000000000000000000000000 and bool((block.timestamp / 24 * 3600) + 2509157 < 0):
        revert with 0, 17
    if 146097 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0):
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0xffffc694f94337079d130ab45dff8e0f9ea161331bb1c93dea871de6fec83ce2 and bool(4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0):
        revert with 0, 17
    if 146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + 2509157 < ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 >= 0:
        revert with 0, 17
    if (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4 < 0 and (block.timestamp / 24 * 3600) + 2509157 > ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe:
        revert with 0, 17
    if 4000 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0xfff7ced916872b020c49ba5e353f7ced916872b020c49ba5e353f7ced916872c and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509158 < 0):
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 < (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 >= 0:
        revert with 0, 17
    if 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 2509157 > (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509157 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:
        revert with 0, 17
    if 80 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0xfe66666666666666666666666666666666666666666666666666666666666667 and bool((block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < 0):
        revert with 0, 17
    if 2447 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0xfff29be1739a4fb805dbcd5d6c7d1f7d6fd627208942391f124ee1c3f3070268 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 < (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 >= 0:
        revert with 0, 17
    if 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 2509188 > (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0):
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 > 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 < (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 >= 0:
        revert with 0, 17
    if 12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + 2 > (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097 < 0x8000000000000000000000000000000000000000000000000000000000000031:
        revert with 0, 17
    if 100 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 > 0):
        revert with 0, 17
    if (4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0xfeb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb851eb9 and bool((4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 49 < 0):
        revert with 0, 17
    if (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 4900 < 0 and (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    if (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdd and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 4900 < 0 and (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdc:
        revert with 0, 17
    require (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 >= 1970
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecdb:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x8000000000000000000000000000000000000000000000000000000000000000:
        revert with 0, 17
    if 3 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0xd555555555555555555555555555555555555555555555555555555555555556 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if 12 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0xf555555555555555555555555555555555555555555555555555555555555556 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x8000000000000000000000000000000000000000000000000000000000000002:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) < (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 >= 0:
        revert with 0, 17
    if 12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) > (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if 367 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) > 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0xffa6b6c1eb12d573186a06f9b8d9a287530217b7747d8eff4d6d83d625aae631 and bool(((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (12 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) < 0):
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + 2 < 0x800000000000000000000000000000000000000000000000000000000000000e:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 4900 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed3f:
        revert with 0, 17
    if ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 > (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d and (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 >= 0:
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 100 < 0 and ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12 < (-100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + -((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + -((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c:
        revert with 0, 17
    if 1461 > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff / (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 > 0):
        revert with 0, 17
    if (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0xffe9924f8d0dd7b2e6f174df9576f9de01c091c8faeb2605f522de8852b47aa8 and bool((100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 100 < 0):
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2509188 < 0x8000000000000000000000000000000000000000000000000000000000007d4b:
        revert with 0, 17
    if (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 2477113 < 0 and (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 > -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c6 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 >= 0:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 2477113 < 0 and (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12 < -(block.timestamp / 24 * 3600) + ((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + -((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffda33c7:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 < (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) - 0x8000000000000000000000000000000000000000000000000000000000000000 and 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 >= 0:
        revert with 0, 17
    if 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4 < 0 and (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + 2477113 > (3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 2477113 < 0x8000000000000000000000000000000000000000000000000000000000253d8c:
        revert with 0, 17
    if (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525 and 24 * 3600 > -1 / (block.timestamp / 24 * 3600) + -((146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + -(1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + -(2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + ((146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + ((367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + -(3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + 36525:
        revert with 0, 17
    balanceOf[address(arg1)].field_768 = (24 * 3600 * block.timestamp / 24 * 3600) + (-86400 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-86400 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + (-86400 * 2447 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 80) + (24 * 3600 * (146100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + (1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + (1461 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (1461 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) - 146100 / 4) + (24 * 3600 * (367 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) - (4404 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - (4404 * ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 12) + (-86400 * 3 * (100 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + ((4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001) + ((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) + (((80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447) + (-12 * (80 * block.timestamp / 24 * 3600) + (-80 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + (-80 * 1461 * (4000 * block.timestamp / 24 * 3600) + (-4000 * (146097 * 4 * (block.timestamp / 24 * 3600) + 2509157 / 146097) + 3 / 4) + 10036632000 / 1461001 / 4) + 200735040 / 2447 / 11) - 12 / 12) / 100 / 4) + (876600 * 24 * 3600)
    balanceOf[address(arg1)].field_1280 = block.timestamp
    balanceOf[address(arg1)].field_512 = 0
    return ((s / 100 * 10^6) + balanceOf[address(arg1)].field_512)
}



}
