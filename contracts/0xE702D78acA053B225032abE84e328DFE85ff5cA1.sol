contract main {




// =====================  Runtime code  =====================


#
#  - sub_474a0fa6(?)
#  - withdrawTo(address arg1, address arg2, uint256 arg3)
#  - approve(address arg1, address arg2, uint256 arg3)
#  - withdraw(address arg1, uint256 arg2)
#
address owner;
array of address stor1;
array of uint256 stor2;
array of uint256 stor3;
array of address stor4;
array of uint256 stor5;
uint256 stor7;

function sub_5bcf1f76(?) {
    return stor1.length
}

function getOwner() {
    return owner
}

function changeOwner(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Caller is not owner'
    owner = arg1
}

function sub_63e91678(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if owner != msg.sender:
        revert with 0, 'Caller is not owner'
    uint256(stor4[address(arg1)]) = 1
}

function removeAccessor(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Caller is not owner'
    uint256(stor4[address(arg1)]) = 0
}

function getTokenBalance(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor1.length == arg1:
        return eth.balance(this.address)
    staticcall arg1.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    return ext_call.return_data[0]
}

function sub_697b894a(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    if owner != msg.sender:
        if uint256(stor4[msg.sender]) != 1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    call address(arg1) with:
       value arg2 wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'TransferHelper: ETH_TRANSFER_FAILED'
}

function withdrawETH(uint256 arg1) {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        if uint256(stor4[msg.sender]) != 1:
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
        if owner != msg.sender:
            if uint256(stor4[msg.sender]) != 1:
                revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    call msg.sender with:
       value arg1 wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'TransferHelper: ETH_TRANSFER_FAILED'
}

function swapExactTokensForETH(address arg1, uint256 arg2, uint256 arg3, address[] arg4, address arg5, uint256 arg6) {
    require calldata.size - 4 >= 192
    require arg1 == arg1
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    require arg4.length <= test266151307()
    require arg4 + (32 * arg4.length) + 36 <= calldata.size
    require arg5 == arg5
    if msg.sender == owner:
        mem[96] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
        mem[100] = arg2
        mem[132] = arg3
        mem[164] = 160
        mem[260] = arg4.length
        idx = 0
        s = arg4 + 36
        t = 292
        while idx < arg4.length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[196] = arg5
        mem[228] = arg6
        call arg1.0x18cbafe5 with:
             gas gas_remaining wei
            args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, arg2) >> 32
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
    mem[100] = arg2
    mem[132] = arg3
    mem[164] = 160
    mem[260] = arg4.length
    idx = 0
    s = arg4 + 36
    t = 292
    while idx < arg4.length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[196] = arg5
    mem[228] = arg6
    call arg1.0x18cbafe5 with:
         gas gas_remaining wei
        args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, arg2) >> 32
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function swapExactTokensForTokens(address arg1, uint256 arg2, uint256 arg3, address[] arg4, address arg5, uint256 arg6) {
    require calldata.size - 4 >= 192
    require arg1 == arg1
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    require arg4.length <= test266151307()
    require arg4 + (32 * arg4.length) + 36 <= calldata.size
    require arg5 == arg5
    if msg.sender == owner:
        mem[96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[100] = arg2
        mem[132] = arg3
        mem[164] = 160
        mem[260] = arg4.length
        idx = 0
        s = arg4 + 36
        t = 292
        while idx < arg4.length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[196] = arg5
        mem[228] = arg6
        call arg1.0x38ed1739 with:
             gas gas_remaining wei
            args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, arg2) >> 32
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0x38ed173900000000000000000000000000000000000000000000000000000000
    mem[100] = arg2
    mem[132] = arg3
    mem[164] = 160
    mem[260] = arg4.length
    idx = 0
    s = arg4 + 36
    t = 292
    while idx < arg4.length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[196] = arg5
    mem[228] = arg6
    call arg1.0x38ed1739 with:
         gas gas_remaining wei
        args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, arg2) >> 32
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function swapTokensForExactETH(address arg1, uint256 arg2, uint256 arg3, address[] arg4, address arg5, uint256 arg6) {
    require calldata.size - 4 >= 192
    require arg1 == arg1
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    require arg4.length <= test266151307()
    require arg4 + (32 * arg4.length) + 36 <= calldata.size
    require arg5 == arg5
    if msg.sender == owner:
        mem[96] = 0x4a25d94a00000000000000000000000000000000000000000000000000000000
        mem[100] = arg2
        mem[132] = arg3
        mem[164] = 160
        mem[260] = arg4.length
        idx = 0
        s = arg4 + 36
        t = 292
        while idx < arg4.length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[196] = arg5
        mem[228] = arg6
        call arg1.swapTokensForExactETH(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, arg2) >> 32
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0x4a25d94a00000000000000000000000000000000000000000000000000000000
    mem[100] = arg2
    mem[132] = arg3
    mem[164] = 160
    mem[260] = arg4.length
    idx = 0
    s = arg4 + 36
    t = 292
    while idx < arg4.length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[196] = arg5
    mem[228] = arg6
    call arg1.swapTokensForExactETH(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, arg2) >> 32
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function swapTokensForExactTokens(address arg1, uint256 arg2, uint256 arg3, address[] arg4, address arg5, uint256 arg6) {
    require calldata.size - 4 >= 192
    require arg1 == arg1
    require arg4 <= test266151307()
    require arg4 + 35 < calldata.size
    require arg4.length <= test266151307()
    require arg4 + (32 * arg4.length) + 36 <= calldata.size
    require arg5 == arg5
    if msg.sender == owner:
        mem[96] = 0x8803dbee00000000000000000000000000000000000000000000000000000000
        mem[100] = arg2
        mem[132] = arg3
        mem[164] = 160
        mem[260] = arg4.length
        idx = 0
        s = arg4 + 36
        t = 292
        while idx < arg4.length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[196] = arg5
        mem[228] = arg6
        call arg1.swapTokensForExactTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, arg2) >> 32
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0x8803dbee00000000000000000000000000000000000000000000000000000000
    mem[100] = arg2
    mem[132] = arg3
    mem[164] = 160
    mem[260] = arg4.length
    idx = 0
    s = arg4 + 36
    t = 292
    while idx < arg4.length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[196] = arg5
    mem[228] = arg6
    call arg1.swapTokensForExactTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args arg2, arg3, Array(len=arg4.length, data=mem[292 len 32 * arg4.length]), address(arg5), arg6
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, arg2) >> 32
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, arg2) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, arg2) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function sub_0d8ca571(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    require cd[132] == address(cd[132])
    if msg.sender == owner:
        mem[96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
        mem[100] = cd[68]
        mem[132] = 128
        mem[228] = ('cd', 100).length
        idx = 0
        s = cd[100] + 36
        t = 260
        while idx < ('cd', 100).length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[164] = address(cd[132])
        mem[196] = cd[164]
        call address(cd[4]).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
           value cd[36] wei
             gas gas_remaining wei
            args cd[68], Array(len=('cd', 100).length, data=mem[260 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, cd[68]) >> 32
        require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
    mem[100] = cd[68]
    mem[132] = 128
    mem[228] = ('cd', 100).length
    idx = 0
    s = cd[100] + 36
    t = 260
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[164] = address(cd[132])
    mem[196] = cd[164]
    call address(cd[4]).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
       value cd[36] wei
         gas gas_remaining wei
        args cd[68], Array(len=('cd', 100).length, data=mem[260 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, cd[68]) >> 32
    require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function sub_58c32ba8(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    require cd[132] == address(cd[132])
    if msg.sender == owner:
        mem[96] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
        mem[100] = cd[68]
        mem[132] = 128
        mem[228] = ('cd', 100).length
        idx = 0
        s = cd[100] + 36
        t = 260
        while idx < ('cd', 100).length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[164] = address(cd[132])
        mem[196] = cd[164]
        call address(cd[4]).swapETHForExactTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
           value cd[36] wei
             gas gas_remaining wei
            args cd[68], Array(len=('cd', 100).length, data=mem[260 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 96
        require return_data.size >= 32
        _30 = mem[96 len 4], Mask(224, 32, cd[68]) >> 32
        require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
        require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 127 < return_data.size + 96
        _32 = mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]
        if mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97
        mem[ceil32(return_data.size) + 96] = _32
        require (32 * _32) + _30 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 128 len ceil32(32 * _32)] = mem[_30 + 128 len ceil32(32 * _32)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _32
        mem[mem[64] + 64 len 32 * _32] = mem[ceil32(return_data.size) + 128 len 32 * _32]
        return Array(len=_32, data=mem[mem[64] + 64 len 32 * _32])
    mem[0] = msg.sender
    mem[32] = 4
    if uint256(stor4[msg.sender]) != 1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Caller is neither owner nor accessor'
    mem[96] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
    mem[100] = cd[68]
    mem[132] = 128
    mem[228] = ('cd', 100).length
    idx = 0
    s = cd[100] + 36
    t = 260
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[164] = address(cd[132])
    mem[196] = cd[164]
    call address(cd[4]).swapETHForExactTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
       value cd[36] wei
         gas gas_remaining wei
        args cd[68], Array(len=('cd', 100).length, data=mem[260 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[96 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 96
    require return_data.size >= 32
    _31 = mem[96 len 4], Mask(224, 32, cd[68]) >> 32
    require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
    require mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 127 < return_data.size + 96
    _33 = mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]
    if mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[96 len 4], Mask(224, 32, cd[68]) >> 32 + 96]) + 97
    mem[ceil32(return_data.size) + 96] = _33
    require (32 * _33) + _31 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 128 len ceil32(32 * _33)] = mem[_31 + 128 len ceil32(32 * _33)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _33
    mem[mem[64] + 64 len 32 * _33] = mem[ceil32(return_data.size) + 128 len 32 * _33]
    return Array(len=_33, data=mem[mem[64] + 64 len 32 * _33])
}

function _fallback() payable {
    mem[64] = 128
    if calldata.size < 4:
        require not calldata.size
    if unknown_0x697b894a(?????) > uint32(call.func_hash) >> 224:
        if unknown_0x3aecd0e3(?????) <= uint32(call.func_hash) >> 224:
            if unknown_0x3aecd0e3(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 32
                require cd[4] == address(cd[4])
                if stor1.length == address(cd[4]):
                    return eth.balance(this.address)
                staticcall address(cd[4]).0x70a08231 with:
                        gas gas_remaining wei
                       args this.address
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                return ext_call.return_data[0]
            if unknown_0x474a0fa6(?????) == uint32(call.func_hash) >> 224:
                require not msg.value
                require calldata.size - 4 >= 160
                require cd[4] <= test266151307()
                require cd[4] + 35 < calldata.size
                require ('cd', 4).length <= test266151307()
                require cd[4] + (32 * ('cd', 4).length) + 36 <= calldata.size
                require cd[36] <= test266151307()
                require cd[36] + 35 < calldata.size
                require ('cd', 36).length <= test266151307()
                require cd[36] + (32 * ('cd', 36).length) + 36 <= calldata.size
                require cd[68] <= test266151307()
                require cd[68] + 35 < calldata.size
                require ('cd', 68).length <= test266151307()
                require cd[68] + (32 * ('cd', 68).length) + 36 <= calldata.size
                require cd[100] <= test266151307()
                require cd[100] + 35 < calldata.size
                require ('cd', 100).length <= test266151307()
                require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
                if msg.sender == owner:
                    if cd[132] < block.timestamp:
                        revert with 0, 'PancakeRouter: EXPIRED'
                    idx = 0
                    s = 0
                    while idx < ('cd', 68).length:
                        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if 2 * idx >= ('cd', 4).length:
                            revert with 0, 50
                        require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if 1 > !(2 * idx):
                            revert with 0, 17
                        if (2 * idx) + 1 >= ('cd', 4).length:
                            revert with 0, 50
                        require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                        if idx >= ('cd', 68).length:
                            revert with 0, 50
                        if idx >= ('cd', 100).length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] < s:
                            revert with 0, 17
                        stor6.length = 0
                        mem[0] = 6
                        t = sha3(6)
                        while sha3(6) + (6 * stor6.length) > t:
                            stor[t] = 0
                            stor1[t] = 0
                            stor2[t] = 0
                            stor3[t] = 0
                            address(stor4[t]) = 0
                            stor5[t] = 0
                            t = t + 6
                            continue 
                        t = 0
                        while t < cd[((32 * idx) + cd[68] + 36)] - s:
                            if t > !s:
                                revert with 0, 17
                            if t + s >= ('cd', 36).length:
                                revert with 0, 50
                            require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                            _1275 = mem[64]
                            mem[64] = mem[64] + 192
                            mem[_1275] = address(cd[((64 * idx) + cd[4] + 36)])
                            mem[_1275 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[_1275 + 64] = 0
                            mem[_1275 + 96] = 0
                            mem[_1275 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                            mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                            mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1283 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_1275 + 160] = mem[_1283]
                            stor6.length++
                            mem[0] = 6
                            stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                            stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            uint256(stor6[stor6.length].field_512) = 0
                            uint256(stor6[stor6.length].field_768) = 0
                            stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                            uint256(stor6[stor6.length].field_1280) = mem[_1275 + 160]
                            mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1307 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1309 = mem[_1307]
                            _1310 = mem[_1307 + 32]
                            if t >= stor6.length:
                                revert with 0, 50
                            mem[0] = 6
                            uint256(stor6[t].field_768) = _1310
                            uint256(stor6[t].field_512) = _1309
                            if t == -1:
                                revert with 0, 17
                            t = t + 1
                            continue 
                        _1251 = mem[64]
                        mem[64] = mem[64] + 192
                        mem[_1251] = 0
                        mem[_1251 + 32] = 0
                        mem[_1251 + 64] = 0
                        mem[_1251 + 96] = 0
                        mem[_1251 + 128] = 0
                        mem[_1251 + 160] = 0
                        t = 0
                        while t < cd[((32 * idx) + cd[68] + 36)] - s:
                            if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                revert with 0, 17
                            if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                revert with 0, 17
                            if var145002 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                if t == -1:
                                    revert with 0, 17
                                t = t + 1
                                continue 
                            if var147001 < stor6.length:
                                if 1 > !var151002:
                                    revert with 0, 17
                                u = var153003 + 1
                                v = var153006
                                w = var153007
                                x = var153009
                                while u < stor6.length:
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if uint256(stor6[w].field_2304) and uint256(stor6[u].field_1280) > -1 / uint256(stor6[w].field_2304):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280) and v > -1 / uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280):
                                        revert with 0, 17
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    if uint256(stor6[w].field_768) and uint256(stor6[w].field_1280) > -1 / uint256(stor6[w].field_768):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_768) * uint256(stor6[w].field_1280) and uint256(stor6[w].field_2048) > -1 / uint256(stor6[w].field_768) * uint256(stor6[w].field_1280):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_768) * uint256(stor6[w].field_1280) * uint256(stor6[w].field_2048) >= uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280) * v:
                                        if w == -1:
                                            revert with 0, 17
                                        if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                            revert with 0, 17
                                        if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                            revert with 0, 17
                                        if w + 1 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                            if t == -1:
                                                revert with 0, 17
                                            t = t + 1
                                            continue 
                                        if w + 1 >= stor6.length:
                                            revert with 0, 50
                                        mem[0] = 6
                                        if 1 > !(w + 1):
                                            revert with 0, 17
                                        u = w + 2
                                        v = uint256(stor6[w].field_2048)
                                        w = w + 1
                                        x = x
                                        continue 
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    _14040 = mem[64]
                                    mem[64] = mem[64] + 192
                                    mem[_14040] = stor6[w].field_0
                                    mem[_14040 + 32] = stor6[w].field_256
                                    mem[_14040 + 64] = uint256(stor6[w].field_512)
                                    mem[_14040 + 96] = uint256(stor6[w].field_768)
                                    mem[_14040 + 128] = stor6[w].field_1024
                                    mem[_14040 + 160] = uint256(stor6[w].field_1280)
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    stor6[w].field_0 = stor6[w].field_1536
                                    stor6[w].field_256 = stor6[w].field_1792
                                    uint256(stor6[w].field_512) = uint256(stor6[w].field_2048)
                                    uint256(stor6[w].field_768) = uint256(stor6[w].field_2304)
                                    stor6[w].field_1024 = stor6[w].field_2560
                                    uint256(stor6[w].field_1280) = uint256(stor6[w].field_2816)
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    stor6[w].field_1536 = stor6[w].field_0
                                    stor6[w].field_1792 = stor6[w].field_256
                                    uint256(stor6[w].field_2048) = uint256(stor6[w].field_512)
                                    uint256(stor6[w].field_2304) = uint256(stor6[w].field_768)
                                    stor6[w].field_2560 = stor6[w].field_1024
                                    uint256(stor6[w].field_2816) = uint256(stor6[w].field_1280)
                                    if w == -1:
                                        revert with 0, 17
                                    if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                        revert with 0, 17
                                    if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                        revert with 0, 17
                                    if w + 1 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        continue 
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    if 1 > !(w + 1):
                                        revert with 0, 17
                                    u = w + 2
                                    v = uint256(stor6[w].field_2048)
                                    w = w + 1
                                    x = _14040
                                    continue 
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                            revert with 0, 17
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                            revert with 0, 17
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        mem[0] = 6
                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                            if 0 >= stor6.length:
                                revert with 0, 50
                            if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                revert with 0, 17
                            if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                revert with 0, 50
                            mem[0] = 6
                            if stor1.length == address(stor6.field_0):
                                t = 0
                                u = 0
                                v = eth.balance(this.address) / 2
                                w = 0
                                while t < stor7:
                                    if v <= 0:
                                        revert with 0, 'RELAY:InvalidQty'
                                    if uint256(stor6.field_512) > !v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if not uint256(stor6.field_768):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                        revert with 0, 17
                                    if not uint256(stor6.field_512):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                        revert with 0, 17
                                    if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 18
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if eth.balance(this.address) < v:
                                        revert with 0, 17
                                    if v > !(eth.balance(this.address) - v / 2):
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    t = t + 1
                                    u = v
                                    v = v + (eth.balance(this.address) - v / 2)
                                    w = v
                                    continue 
                                _1492 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                mem[mem[64] + 96] = 2
                                mem[64] = mem[64] + 192
                                if not mem[_1492]:
                                    revert with 0, 50
                                mem[_1492 + 32] = address(stor6.field_0)
                                if 1 >= mem[_1492]:
                                    revert with 0, 50
                                mem[_1492 + 64] = address(stor6.field_256)
                                if not mem[_1492 + 96]:
                                    revert with 0, 50
                                mem[_1492 + 128] = address(stor6.field_256)
                                if 1 >= mem[_1492 + 96]:
                                    revert with 0, 50
                                mem[_1492 + 160] = address(stor6.field_0)
                                if u:
                                    if stor1.length == address(stor6.field_0):
                                        mem[_1492 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                        mem[_1492 + 196] = 1
                                        mem[_1492 + 228] = 128
                                        mem[_1492 + 324] = mem[_1492]
                                        t = 0
                                        v = _1492 + 32
                                        w = _1492 + 356
                                        while t < mem[_1492]:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_1492 + 260] = this.address
                                        mem[_1492 + 292] = stor2.length
                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                           value u wei
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _1492 + (32 * mem[_1492]) + -mem[64] + 352]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2508 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2520 = mem[_2508]
                                        require mem[_2508] <= test266151307()
                                        require _2508 + mem[_2508] + 31 < _2508 + return_data.size
                                        _2534 = mem[_2508 + mem[_2508]]
                                        if mem[_2508 + mem[_2508]] > test266151307():
                                            revert with 0, 65
                                        if _2508 + ceil32(return_data.size) + ceil32(32 * mem[_2508 + mem[_2508]]) + 1 > test266151307() or ceil32(32 * mem[_2508 + mem[_2508]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _2508 + ceil32(return_data.size) + ceil32(32 * mem[_2508 + mem[_2508]]) + 1
                                        mem[_2508 + ceil32(return_data.size)] = _2534
                                        require (32 * _2534) + _2520 + 32 <= return_data.size
                                        v = _2508 + ceil32(return_data.size) + 32
                                        t = _2508 + _2520 + 32
                                        while t < (32 * _2534) + _2508 + _2520 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _2534 < 1:
                                            revert with 0, 17
                                        if _2534 - 1 >= _2534:
                                            revert with 0, 50
                                        _3460 = mem[64]
                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = mem[(32 * _2534 - 1) + _2508 + ceil32(return_data.size) + 32]
                                        mem[mem[64] + 36] = 1
                                        mem[mem[64] + 68] = 160
                                        _3480 = mem[_1492 + 96]
                                        mem[mem[64] + 164] = mem[_1492 + 96]
                                        t = 0
                                        v = _1492 + 128
                                        w = mem[64] + 196
                                        while t < _3480:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_3460 + 100] = this.address
                                        mem[_3460 + 132] = stor2.length
                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3460 + (32 * _3480) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4304 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _4318 = mem[_4304]
                                        require mem[_4304] <= test266151307()
                                        require _4304 + mem[_4304] + 31 < _4304 + return_data.size
                                        _4330 = mem[_4304 + mem[_4304]]
                                        if mem[_4304 + mem[_4304]] > test266151307():
                                            revert with 0, 65
                                        if _4304 + ceil32(return_data.size) + ceil32(32 * mem[_4304 + mem[_4304]]) + 1 > test266151307() or ceil32(32 * mem[_4304 + mem[_4304]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _4304 + ceil32(return_data.size) + ceil32(32 * mem[_4304 + mem[_4304]]) + 1
                                        mem[_4304 + ceil32(return_data.size)] = _4330
                                        require (32 * _4330) + _4318 + 32 <= return_data.size
                                        v = _4304 + ceil32(return_data.size) + 32
                                        t = _4304 + _4318 + 32
                                        while t < (32 * _4330) + _4304 + _4318 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _4330 < 1:
                                            revert with 0, 17
                                        if _4330 - 1 >= _4330:
                                            revert with 0, 50
                                        _5108 = mem[(32 * _4330 - 1) + _4304 + ceil32(return_data.size) + 32]
                                        if mem[(32 * _4330 - 1) + _4304 + ceil32(return_data.size) + 32] < u:
                                            revert with 0, 17
                                        if mem[(32 * _4330 - 1) + _4304 + ceil32(return_data.size) + 32] - u <= 0:
                                            revert with 0, 'RELAY:NegGain'
                                        if mem[(32 * _4330 - 1) + _4304 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                            mem[mem[64]] = address(stor6.field_256)
                                            mem[mem[64] + 32] = _5108 - u
                                            emit 0x2bcd0e02: address(stor6.field_256), _5108 - u, address(stor6.field_0)
                                            t = _5108 - u
                                            while t:
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 2 * idx >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 1 > !(2 * idx):
                                                    revert with 0, 17
                                                if (2 * idx) + 1 >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                if idx >= ('cd', 68).length:
                                                    revert with 0, 50
                                                if idx >= ('cd', 100).length:
                                                    revert with 0, 50
                                                if cd[((32 * idx) + cd[68] + 36)] < s:
                                                    revert with 0, 17
                                                stor6.length = 0
                                                mem[0] = 6
                                                t = sha3(6)
                                                while sha3(6) + (6 * stor6.length) > t:
                                                    stor[t] = 0
                                                    stor1[t] = 0
                                                    stor2[t] = 0
                                                    stor3[t] = 0
                                                    address(stor4[t]) = 0
                                                    stor5[t] = 0
                                                    t = t + 6
                                                    continue 
                                                t = 0
                                                while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if t > !s:
                                                        revert with 0, 17
                                                    if t + s >= ('cd', 36).length:
                                                        revert with 0, 50
                                                    require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                    _7067 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7067] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[_7067 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[_7067 + 64] = 0
                                                    mem[_7067 + 96] = 0
                                                    mem[_7067 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7110 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    mem[_7067 + 160] = mem[_7110]
                                                    stor6.length++
                                                    mem[0] = 6
                                                    stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                    stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    uint256(stor6[stor6.length].field_512) = 0
                                                    uint256(stor6[stor6.length].field_768) = 0
                                                    stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    uint256(stor6[stor6.length].field_1280) = mem[_7067 + 160]
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7254 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _7271 = mem[_7254]
                                                    _7272 = mem[_7254 + 32]
                                                    if t >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    uint256(stor6[t].field_768) = _7272
                                                    uint256(stor6[t].field_512) = _7271
                                                    if t == -1:
                                                        revert with 0, 17
                                                    t = t + 1
                                                    continue 
                                                _7020 = mem[64]
                                                mem[64] = mem[64] + 192
                                                mem[_7020] = 0
                                                mem[_7020 + 32] = 0
                                                mem[_7020 + 64] = 0
                                                mem[_7020 + 96] = 0
                                                mem[_7020 + 128] = 0
                                                mem[_7020 + 160] = 0
                                                if var247001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < var247001:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s - var247001 < 1:
                                                        revert with 0, 17
                                                    # nil
                                                else:
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                        t = 0
                                                        continue 
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if stor1.length == address(stor6.field_0):
                                                        t = 0
                                                        u = 0
                                                        v = eth.balance(this.address) / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if eth.balance(this.address) < v:
                                                                revert with 0, 17
                                                            if v > !(eth.balance(this.address) - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (eth.balance(this.address) - v / 2)
                                                            w = v
                                                            continue 
                                                        _8440 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8440]:
                                                            revert with 0, 50
                                                        mem[_8440 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8440]:
                                                            revert with 0, 50
                                                        mem[_8440 + 64] = address(stor6.field_256)
                                                        if not mem[_8440 + 96]:
                                                            revert with 0, 50
                                                        mem[_8440 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8440 + 96]:
                                                            revert with 0, 50
                                                        mem[_8440 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8440 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8440 + 196] = 1
                                                            mem[_8440 + 228] = 128
                                                            mem[_8440 + 324] = mem[_8440]
                                                            t = 0
                                                            v = _8440 + 32
                                                            w = _8440 + 356
                                                            while t < mem[_8440]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8440 + 260] = this.address
                                                            mem[_8440 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8440 + (32 * mem[_8440]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11036 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11108 = mem[_11036]
                                                            require mem[_11036] <= test266151307()
                                                            require _11036 + mem[_11036] + 31 < _11036 + return_data.size
                                                            _11194 = mem[_11036 + mem[_11036]]
                                                            if mem[_11036 + mem[_11036]] > test266151307():
                                                                revert with 0, 65
                                                            if _11036 + ceil32(return_data.size) + ceil32(32 * mem[_11036 + mem[_11036]]) + 1 > test266151307() or ceil32(32 * mem[_11036 + mem[_11036]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11036 + ceil32(return_data.size) + ceil32(32 * mem[_11036 + mem[_11036]]) + 1
                                                            mem[_11036 + ceil32(return_data.size)] = _11194
                                                            require (32 * _11194) + _11108 + 32 <= return_data.size
                                                            v = _11036 + ceil32(return_data.size) + 32
                                                            t = _11036 + _11108 + 32
                                                            while t < (32 * _11194) + _11036 + _11108 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11194 < 1:
                                                                revert with 0, 17
                                                            if _11194 - 1 >= _11194:
                                                                revert with 0, 50
                                                            _13262 = mem[(32 * _11194 - 1) + _11036 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13262
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13378 = mem[_8440 + 96]
                                                            mem[mem[64] + 164] = mem[_8440 + 96]
                                                            t = 0
                                                            v = _8440 + 128
                                                            w = mem[64] + 196
                                                            while t < _13378:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13262, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13378) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14826 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14910 = mem[_14826]
                                                            require mem[_14826] <= test266151307()
                                                            require _14826 + mem[_14826] + 31 < _14826 + return_data.size
                                                            _14982 = mem[_14826 + mem[_14826]]
                                                            if mem[_14826 + mem[_14826]] > test266151307():
                                                                revert with 0, 65
                                                            if _14826 + ceil32(return_data.size) + ceil32(32 * mem[_14826 + mem[_14826]]) + 1 > test266151307() or ceil32(32 * mem[_14826 + mem[_14826]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14826 + ceil32(return_data.size) + ceil32(32 * mem[_14826 + mem[_14826]]) + 1
                                                            mem[_14826 + ceil32(return_data.size)] = _14982
                                                            require (32 * _14982) + _14910 + 32 <= return_data.size
                                                            t = _14826 + ceil32(return_data.size) + 32
                                                            s = _14826 + _14910 + 32
                                                            while s < (32 * _14982) + _14826 + _14910 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14982 < 1:
                                                                revert with 0, 17
                                                            if _14982 - 1 >= _14982:
                                                                revert with 0, 50
                                                            _16122 = mem[(32 * _14982 - 1) + _14826 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14982 - 1) + _14826 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14982 - 1) + _14826 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14982 - 1) + _14826 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16122 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16122 - u, address(stor6.field_0)
                                                            t = _16122 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8440 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8440 + 196] = u
                                                            mem[_8440 + 228] = 1
                                                            mem[_8440 + 260] = 160
                                                            mem[_8440 + 356] = mem[_8440]
                                                            t = 0
                                                            v = _8440 + 32
                                                            w = _8440 + 388
                                                            while t < mem[_8440]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8440 + 292] = this.address
                                                            mem[_8440 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8440 + (32 * mem[_8440]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11035 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11107 = mem[_11035]
                                                            require mem[_11035] <= test266151307()
                                                            require _11035 + mem[_11035] + 31 < _11035 + return_data.size
                                                            _11193 = mem[_11035 + mem[_11035]]
                                                            if mem[_11035 + mem[_11035]] > test266151307():
                                                                revert with 0, 65
                                                            if _11035 + ceil32(return_data.size) + ceil32(32 * mem[_11035 + mem[_11035]]) + 1 > test266151307() or ceil32(32 * mem[_11035 + mem[_11035]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11035 + ceil32(return_data.size) + ceil32(32 * mem[_11035 + mem[_11035]]) + 1
                                                            mem[_11035 + ceil32(return_data.size)] = _11193
                                                            require (32 * _11193) + _11107 + 32 <= return_data.size
                                                            v = _11035 + ceil32(return_data.size) + 32
                                                            t = _11035 + _11107 + 32
                                                            while t < (32 * _11193) + _11035 + _11107 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11193 < 1:
                                                                revert with 0, 17
                                                            if _11193 - 1 >= _11193:
                                                                revert with 0, 50
                                                            _13260 = mem[(32 * _11193 - 1) + _11035 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13377 = mem[_8440 + 96]
                                                            mem[mem[64] + 132] = mem[_8440 + 96]
                                                            t = 0
                                                            v = _8440 + 128
                                                            w = mem[64] + 164
                                                            while t < _13377:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 68] = this.address
                                                            mem[mem[64] + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                               value _13260 wei
                                                                 gas gas_remaining wei
                                                                args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13377) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14825 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14909 = mem[_14825]
                                                            require mem[_14825] <= test266151307()
                                                            require _14825 + mem[_14825] + 31 < _14825 + return_data.size
                                                            _14981 = mem[_14825 + mem[_14825]]
                                                            if mem[_14825 + mem[_14825]] > test266151307():
                                                                revert with 0, 65
                                                            if _14825 + ceil32(return_data.size) + ceil32(32 * mem[_14825 + mem[_14825]]) + 1 > test266151307() or ceil32(32 * mem[_14825 + mem[_14825]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14825 + ceil32(return_data.size) + ceil32(32 * mem[_14825 + mem[_14825]]) + 1
                                                            mem[_14825 + ceil32(return_data.size)] = _14981
                                                            require (32 * _14981) + _14909 + 32 <= return_data.size
                                                            t = _14825 + ceil32(return_data.size) + 32
                                                            s = _14825 + _14909 + 32
                                                            while s < (32 * _14981) + _14825 + _14909 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14981 < 1:
                                                                revert with 0, 17
                                                            if _14981 - 1 >= _14981:
                                                                revert with 0, 50
                                                            _16121 = mem[(32 * _14981 - 1) + _14825 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14981 - 1) + _14825 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14981 - 1) + _14825 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14981 - 1) + _14825 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16121 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16121 - u, address(stor6.field_0)
                                                            t = _16121 - u
                                                            continue 
                                                        mem[_8440 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8440 + 196] = u
                                                        mem[_8440 + 228] = 1
                                                        mem[_8440 + 260] = 160
                                                        mem[_8440 + 356] = mem[_8440]
                                                        t = 0
                                                        v = _8440 + 32
                                                        w = _8440 + 388
                                                        while t < mem[_8440]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8440 + 292] = this.address
                                                        mem[_8440 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8440 + (32 * mem[_8440]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11034 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11106 = mem[_11034]
                                                        require mem[_11034] <= test266151307()
                                                        require _11034 + mem[_11034] + 31 < _11034 + return_data.size
                                                        _11192 = mem[_11034 + mem[_11034]]
                                                        if mem[_11034 + mem[_11034]] > test266151307():
                                                            revert with 0, 65
                                                        if _11034 + ceil32(return_data.size) + ceil32(32 * mem[_11034 + mem[_11034]]) + 1 > test266151307() or ceil32(32 * mem[_11034 + mem[_11034]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11034 + ceil32(return_data.size) + ceil32(32 * mem[_11034 + mem[_11034]]) + 1
                                                        mem[_11034 + ceil32(return_data.size)] = _11192
                                                        require (32 * _11192) + _11106 + 32 <= return_data.size
                                                        v = _11034 + ceil32(return_data.size) + 32
                                                        t = _11034 + _11106 + 32
                                                        while t < (32 * _11192) + _11034 + _11106 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11192 < 1:
                                                            revert with 0, 17
                                                        if _11192 - 1 >= _11192:
                                                            revert with 0, 50
                                                        _13258 = mem[(32 * _11192 - 1) + _11034 + ceil32(return_data.size) + 32]
                                                        _13259 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13258
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13376 = mem[_8440 + 96]
                                                        mem[mem[64] + 164] = mem[_8440 + 96]
                                                        t = 0
                                                        v = _8440 + 128
                                                        w = mem[64] + 196
                                                        while t < _13376:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13259 + 100] = this.address
                                                        mem[_13259 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13259 + (32 * _13376) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14824 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14908 = mem[_14824]
                                                        require mem[_14824] <= test266151307()
                                                        require _14824 + mem[_14824] + 31 < _14824 + return_data.size
                                                        _14980 = mem[_14824 + mem[_14824]]
                                                        if mem[_14824 + mem[_14824]] > test266151307():
                                                            revert with 0, 65
                                                        if _14824 + ceil32(return_data.size) + ceil32(32 * mem[_14824 + mem[_14824]]) + 1 > test266151307() or ceil32(32 * mem[_14824 + mem[_14824]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14824 + ceil32(return_data.size) + ceil32(32 * mem[_14824 + mem[_14824]]) + 1
                                                        mem[_14824 + ceil32(return_data.size)] = _14980
                                                        require (32 * _14980) + _14908 + 32 <= return_data.size
                                                        t = _14824 + ceil32(return_data.size) + 32
                                                        s = _14824 + _14908 + 32
                                                        while s < (32 * _14980) + _14824 + _14908 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14980 < 1:
                                                            revert with 0, 17
                                                        if _14980 - 1 >= _14980:
                                                            revert with 0, 50
                                                        _16120 = mem[(32 * _14980 - 1) + _14824 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14980 - 1) + _14824 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14980 - 1) + _14824 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14980 - 1) + _14824 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16120 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16120 - u, address(stor6.field_0)
                                                        t = _16120 - u
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    staticcall address(stor6.field_0).0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8103 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    t = 0
                                                    u = 0
                                                    v = mem[_8103] / 2
                                                    w = 0
                                                    while t < stor7:
                                                        if v <= 0:
                                                            revert with 0, 'RELAY:InvalidQty'
                                                        if uint256(stor6.field_512) > !v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_768):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_512):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 18
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if mem[_8103] < v:
                                                            revert with 0, 17
                                                        if v > !(mem[_8103] - v / 2):
                                                            revert with 0, 17
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        u = v
                                                        v = v + (mem[_8103] - v / 2)
                                                        w = v
                                                        continue 
                                                    _8437 = mem[64]
                                                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                    mem[mem[64] + 96] = 2
                                                    mem[64] = mem[64] + 192
                                                    if not mem[_8437]:
                                                        revert with 0, 50
                                                    mem[_8437 + 32] = address(stor6.field_0)
                                                    if 1 >= mem[_8437]:
                                                        revert with 0, 50
                                                    mem[_8437 + 64] = address(stor6.field_256)
                                                    if not mem[_8437 + 96]:
                                                        revert with 0, 50
                                                    mem[_8437 + 128] = address(stor6.field_256)
                                                    if 1 >= mem[_8437 + 96]:
                                                        revert with 0, 50
                                                    mem[_8437 + 160] = address(stor6.field_0)
                                                    if not u:
                                                        t = 0
                                                        continue 
                                                    if stor1.length == address(stor6.field_0):
                                                        mem[_8437 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[_8437 + 196] = 1
                                                        mem[_8437 + 228] = 128
                                                        mem[_8437 + 324] = mem[_8437]
                                                        t = 0
                                                        v = _8437 + 32
                                                        w = _8437 + 356
                                                        while t < mem[_8437]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8437 + 260] = this.address
                                                        mem[_8437 + 292] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                           value u wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8437 + (32 * mem[_8437]) + -mem[64] + 352]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11033 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11105 = mem[_11033]
                                                        require mem[_11033] <= test266151307()
                                                        require _11033 + mem[_11033] + 31 < _11033 + return_data.size
                                                        _11191 = mem[_11033 + mem[_11033]]
                                                        if mem[_11033 + mem[_11033]] > test266151307():
                                                            revert with 0, 65
                                                        if _11033 + ceil32(return_data.size) + ceil32(32 * mem[_11033 + mem[_11033]]) + 1 > test266151307() or ceil32(32 * mem[_11033 + mem[_11033]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11033 + ceil32(return_data.size) + ceil32(32 * mem[_11033 + mem[_11033]]) + 1
                                                        mem[_11033 + ceil32(return_data.size)] = _11191
                                                        require (32 * _11191) + _11105 + 32 <= return_data.size
                                                        v = _11033 + ceil32(return_data.size) + 32
                                                        t = _11033 + _11105 + 32
                                                        while t < (32 * _11191) + _11033 + _11105 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11191 < 1:
                                                            revert with 0, 17
                                                        if _11191 - 1 >= _11191:
                                                            revert with 0, 50
                                                        _13256 = mem[(32 * _11191 - 1) + _11033 + ceil32(return_data.size) + 32]
                                                        _13257 = mem[64]
                                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13256
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13375 = mem[_8437 + 96]
                                                        mem[mem[64] + 164] = mem[_8437 + 96]
                                                        t = 0
                                                        v = _8437 + 128
                                                        w = mem[64] + 196
                                                        while t < _13375:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13257 + 100] = this.address
                                                        mem[_13257 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13257 + (32 * _13375) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14823 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14907 = mem[_14823]
                                                        require mem[_14823] <= test266151307()
                                                        require _14823 + mem[_14823] + 31 < _14823 + return_data.size
                                                        _14979 = mem[_14823 + mem[_14823]]
                                                        if mem[_14823 + mem[_14823]] > test266151307():
                                                            revert with 0, 65
                                                        if _14823 + ceil32(return_data.size) + ceil32(32 * mem[_14823 + mem[_14823]]) + 1 > test266151307() or ceil32(32 * mem[_14823 + mem[_14823]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14823 + ceil32(return_data.size) + ceil32(32 * mem[_14823 + mem[_14823]]) + 1
                                                        mem[_14823 + ceil32(return_data.size)] = _14979
                                                        require (32 * _14979) + _14907 + 32 <= return_data.size
                                                        t = _14823 + ceil32(return_data.size) + 32
                                                        s = _14823 + _14907 + 32
                                                        while s < (32 * _14979) + _14823 + _14907 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14979 < 1:
                                                            revert with 0, 17
                                                        if _14979 - 1 >= _14979:
                                                            revert with 0, 50
                                                        _16119 = mem[(32 * _14979 - 1) + _14823 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14979 - 1) + _14823 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14979 - 1) + _14823 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14979 - 1) + _14823 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16119 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16119 - u, address(stor6.field_0)
                                                        t = _16119 - u
                                                        continue 
                                                    if stor1.length == address(stor6.field_256):
                                                        mem[_8437 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8437 + 196] = u
                                                        mem[_8437 + 228] = 1
                                                        mem[_8437 + 260] = 160
                                                        mem[_8437 + 356] = mem[_8437]
                                                        t = 0
                                                        v = _8437 + 32
                                                        w = _8437 + 388
                                                        while t < mem[_8437]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8437 + 292] = this.address
                                                        mem[_8437 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8437 + (32 * mem[_8437]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11032 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11104 = mem[_11032]
                                                        require mem[_11032] <= test266151307()
                                                        require _11032 + mem[_11032] + 31 < _11032 + return_data.size
                                                        _11190 = mem[_11032 + mem[_11032]]
                                                        if mem[_11032 + mem[_11032]] > test266151307():
                                                            revert with 0, 65
                                                        if _11032 + ceil32(return_data.size) + ceil32(32 * mem[_11032 + mem[_11032]]) + 1 > test266151307() or ceil32(32 * mem[_11032 + mem[_11032]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11032 + ceil32(return_data.size) + ceil32(32 * mem[_11032 + mem[_11032]]) + 1
                                                        mem[_11032 + ceil32(return_data.size)] = _11190
                                                        require (32 * _11190) + _11104 + 32 <= return_data.size
                                                        v = _11032 + ceil32(return_data.size) + 32
                                                        t = _11032 + _11104 + 32
                                                        while t < (32 * _11190) + _11032 + _11104 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11190 < 1:
                                                            revert with 0, 17
                                                        if _11190 - 1 >= _11190:
                                                            revert with 0, 50
                                                        _13254 = mem[(32 * _11190 - 1) + _11032 + ceil32(return_data.size) + 32]
                                                        _13255 = mem[64]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13374 = mem[_8437 + 96]
                                                        mem[mem[64] + 132] = mem[_8437 + 96]
                                                        t = 0
                                                        v = _8437 + 128
                                                        w = mem[64] + 164
                                                        while t < _13374:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13255 + 68] = this.address
                                                        mem[_13255 + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                           value _13254 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13255 + (32 * _13374) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14822 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14906 = mem[_14822]
                                                        require mem[_14822] <= test266151307()
                                                        require _14822 + mem[_14822] + 31 < _14822 + return_data.size
                                                        _14978 = mem[_14822 + mem[_14822]]
                                                        if mem[_14822 + mem[_14822]] > test266151307():
                                                            revert with 0, 65
                                                        if _14822 + ceil32(return_data.size) + ceil32(32 * mem[_14822 + mem[_14822]]) + 1 > test266151307() or ceil32(32 * mem[_14822 + mem[_14822]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14822 + ceil32(return_data.size) + ceil32(32 * mem[_14822 + mem[_14822]]) + 1
                                                        mem[_14822 + ceil32(return_data.size)] = _14978
                                                        require (32 * _14978) + _14906 + 32 <= return_data.size
                                                        t = _14822 + ceil32(return_data.size) + 32
                                                        s = _14822 + _14906 + 32
                                                        while s < (32 * _14978) + _14822 + _14906 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14978 < 1:
                                                            revert with 0, 17
                                                        if _14978 - 1 >= _14978:
                                                            revert with 0, 50
                                                        _16118 = mem[(32 * _14978 - 1) + _14822 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14978 - 1) + _14822 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14978 - 1) + _14822 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14978 - 1) + _14822 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16118 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16118 - u, address(stor6.field_0)
                                                        t = _16118 - u
                                                        continue 
                                                    mem[_8437 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[_8437 + 196] = u
                                                    mem[_8437 + 228] = 1
                                                    mem[_8437 + 260] = 160
                                                    mem[_8437 + 356] = mem[_8437]
                                                    t = 0
                                                    v = _8437 + 32
                                                    w = _8437 + 388
                                                    while t < mem[_8437]:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_8437 + 292] = this.address
                                                    mem[_8437 + 324] = stor2.length
                                                    call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _8437 + (32 * mem[_8437]) + -mem[64] + 384]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _11031 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _11103 = mem[_11031]
                                                    require mem[_11031] <= test266151307()
                                                    require _11031 + mem[_11031] + 31 < _11031 + return_data.size
                                                    _11189 = mem[_11031 + mem[_11031]]
                                                    if mem[_11031 + mem[_11031]] > test266151307():
                                                        revert with 0, 65
                                                    if _11031 + ceil32(return_data.size) + ceil32(32 * mem[_11031 + mem[_11031]]) + 1 > test266151307() or ceil32(32 * mem[_11031 + mem[_11031]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _11031 + ceil32(return_data.size) + ceil32(32 * mem[_11031 + mem[_11031]]) + 1
                                                    mem[_11031 + ceil32(return_data.size)] = _11189
                                                    require (32 * _11189) + _11103 + 32 <= return_data.size
                                                    v = _11031 + ceil32(return_data.size) + 32
                                                    t = _11031 + _11103 + 32
                                                    while t < (32 * _11189) + _11031 + _11103 + 32:
                                                        mem[v] = mem[t]
                                                        v = v + 32
                                                        t = t + 32
                                                        continue 
                                                    if _11189 < 1:
                                                        revert with 0, 17
                                                    if _11189 - 1 >= _11189:
                                                        revert with 0, 50
                                                    _13252 = mem[(32 * _11189 - 1) + _11031 + ceil32(return_data.size) + 32]
                                                    _13253 = mem[64]
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = _13252
                                                    mem[mem[64] + 36] = 1
                                                    mem[mem[64] + 68] = 160
                                                    _13373 = mem[_8437 + 96]
                                                    mem[mem[64] + 164] = mem[_8437 + 96]
                                                    t = 0
                                                    v = _8437 + 128
                                                    w = mem[64] + 196
                                                    while t < _13373:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_13253 + 100] = this.address
                                                    mem[_13253 + 132] = stor2.length
                                                    call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _13253 + (32 * _13373) + -mem[64] + 192]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14821 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _14905 = mem[_14821]
                                                    require mem[_14821] <= test266151307()
                                                    require _14821 + mem[_14821] + 31 < _14821 + return_data.size
                                                    _14977 = mem[_14821 + mem[_14821]]
                                                    if mem[_14821 + mem[_14821]] > test266151307():
                                                        revert with 0, 65
                                                    if _14821 + ceil32(return_data.size) + ceil32(32 * mem[_14821 + mem[_14821]]) + 1 > test266151307() or ceil32(32 * mem[_14821 + mem[_14821]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _14821 + ceil32(return_data.size) + ceil32(32 * mem[_14821 + mem[_14821]]) + 1
                                                    mem[_14821 + ceil32(return_data.size)] = _14977
                                                    require (32 * _14977) + _14905 + 32 <= return_data.size
                                                    t = _14821 + ceil32(return_data.size) + 32
                                                    s = _14821 + _14905 + 32
                                                    while s < (32 * _14977) + _14821 + _14905 + 32:
                                                        mem[t] = mem[s]
                                                        t = t + 32
                                                        s = s + 32
                                                        continue 
                                                    if _14977 < 1:
                                                        revert with 0, 17
                                                    if _14977 - 1 >= _14977:
                                                        revert with 0, 50
                                                    _16117 = mem[(32 * _14977 - 1) + _14821 + ceil32(return_data.size) + 32]
                                                    if mem[(32 * _14977 - 1) + _14821 + ceil32(return_data.size) + 32] < u:
                                                        revert with 0, 17
                                                    if mem[(32 * _14977 - 1) + _14821 + ceil32(return_data.size) + 32] - u <= 0:
                                                        revert with 0, 'RELAY:NegGain'
                                                    if mem[(32 * _14977 - 1) + _14821 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                        t = 0
                                                        continue 
                                                    mem[mem[64]] = address(stor6.field_256)
                                                    mem[mem[64] + 32] = _16117 - u
                                                    emit 0x2bcd0e02: address(stor6.field_256), _16117 - u, address(stor6.field_0)
                                                    t = _16117 - u
                                                    continue 
                                    else:
                                        if stor1.length != address(stor6.field_256):
                                            mem[_1492 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[_1492 + 196] = u
                                            mem[_1492 + 228] = 1
                                            mem[_1492 + 260] = 160
                                            mem[_1492 + 356] = mem[_1492]
                                            t = 0
                                            v = _1492 + 32
                                            w = _1492 + 388
                                            while t < mem[_1492]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1492 + 292] = this.address
                                            mem[_1492 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1492 + (32 * mem[_1492]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2506 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2518 = mem[_2506]
                                            require mem[_2506] <= test266151307()
                                            require _2506 + mem[_2506] + 31 < _2506 + return_data.size
                                            _2532 = mem[_2506 + mem[_2506]]
                                            if mem[_2506 + mem[_2506]] > test266151307():
                                                revert with 0, 65
                                            if _2506 + ceil32(return_data.size) + ceil32(32 * mem[_2506 + mem[_2506]]) + 1 > test266151307() or ceil32(32 * mem[_2506 + mem[_2506]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2506 + ceil32(return_data.size) + ceil32(32 * mem[_2506 + mem[_2506]]) + 1
                                            mem[_2506 + ceil32(return_data.size)] = _2532
                                            require (32 * _2532) + _2518 + 32 <= return_data.size
                                            v = _2506 + ceil32(return_data.size) + 32
                                            t = _2506 + _2518 + 32
                                            while t < (32 * _2532) + _2506 + _2518 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2532 < 1:
                                                revert with 0, 17
                                            if _2532 - 1 >= _2532:
                                                revert with 0, 50
                                            _3455 = mem[(32 * _2532 - 1) + _2506 + ceil32(return_data.size) + 32]
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = _3455
                                            mem[mem[64] + 36] = 1
                                            mem[mem[64] + 68] = 160
                                            _3478 = mem[_1492 + 96]
                                            mem[mem[64] + 164] = mem[_1492 + 96]
                                            t = 0
                                            v = _1492 + 128
                                            w = mem[64] + 196
                                            while t < _3478:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[mem[64] + 100] = this.address
                                            mem[mem[64] + 132] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                 gas gas_remaining wei
                                                args _3455, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _3478) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4302 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4316 = mem[_4302]
                                            require mem[_4302] <= test266151307()
                                            require _4302 + mem[_4302] + 31 < _4302 + return_data.size
                                            _4328 = mem[_4302 + mem[_4302]]
                                            if mem[_4302 + mem[_4302]] > test266151307():
                                                revert with 0, 65
                                            if _4302 + ceil32(return_data.size) + ceil32(32 * mem[_4302 + mem[_4302]]) + 1 > test266151307() or ceil32(32 * mem[_4302 + mem[_4302]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4302 + ceil32(return_data.size) + ceil32(32 * mem[_4302 + mem[_4302]]) + 1
                                            mem[_4302 + ceil32(return_data.size)] = _4328
                                            require (32 * _4328) + _4316 + 32 <= return_data.size
                                            v = _4302 + ceil32(return_data.size) + 32
                                            t = _4302 + _4316 + 32
                                            while t < (32 * _4328) + _4302 + _4316 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4328 < 1:
                                                revert with 0, 17
                                            if _4328 - 1 >= _4328:
                                                revert with 0, 50
                                            _5106 = mem[(32 * _4328 - 1) + _4302 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4328 - 1) + _4302 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4328 - 1) + _4302 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4328 - 1) + _4302 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5106 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5106 - u, address(stor6.field_0)
                                                t = _5106 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7063 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7063] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7063 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7063 + 64] = 0
                                                        mem[_7063 + 96] = 0
                                                        mem[_7063 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7108 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7063 + 160] = mem[_7108]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7063 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7252 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7267 = mem[_7252]
                                                        _7268 = mem[_7252 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7268
                                                        uint256(stor6[t].field_512) = _7267
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7018 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7018] = 0
                                                    mem[_7018 + 32] = 0
                                                    mem[_7018 + 64] = 0
                                                    mem[_7018 + 96] = 0
                                                    mem[_7018 + 128] = 0
                                                    mem[_7018 + 160] = 0
                                                    if var248001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var248001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var248001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8428 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8428]:
                                                                revert with 0, 50
                                                            mem[_8428 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8428]:
                                                                revert with 0, 50
                                                            mem[_8428 + 64] = address(stor6.field_256)
                                                            if not mem[_8428 + 96]:
                                                                revert with 0, 50
                                                            mem[_8428 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8428 + 96]:
                                                                revert with 0, 50
                                                            mem[_8428 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8428 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8428 + 196] = 1
                                                                mem[_8428 + 228] = 128
                                                                mem[_8428 + 324] = mem[_8428]
                                                                t = 0
                                                                v = _8428 + 32
                                                                w = _8428 + 356
                                                                while t < mem[_8428]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8428 + 260] = this.address
                                                                mem[_8428 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8428 + (32 * mem[_8428]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11024 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11096 = mem[_11024]
                                                                require mem[_11024] <= test266151307()
                                                                require _11024 + mem[_11024] + 31 < _11024 + return_data.size
                                                                _11182 = mem[_11024 + mem[_11024]]
                                                                if mem[_11024 + mem[_11024]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11024 + ceil32(return_data.size) + ceil32(32 * mem[_11024 + mem[_11024]]) + 1 > test266151307() or ceil32(32 * mem[_11024 + mem[_11024]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11024 + ceil32(return_data.size) + ceil32(32 * mem[_11024 + mem[_11024]]) + 1
                                                                mem[_11024 + ceil32(return_data.size)] = _11182
                                                                require (32 * _11182) + _11096 + 32 <= return_data.size
                                                                v = _11024 + ceil32(return_data.size) + 32
                                                                t = _11024 + _11096 + 32
                                                                while t < (32 * _11182) + _11024 + _11096 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11182 < 1:
                                                                    revert with 0, 17
                                                                if _11182 - 1 >= _11182:
                                                                    revert with 0, 50
                                                                _13236 = mem[(32 * _11182 - 1) + _11024 + ceil32(return_data.size) + 32]
                                                                _13237 = mem[64]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13236
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13366 = mem[_8428 + 96]
                                                                mem[mem[64] + 164] = mem[_8428 + 96]
                                                                t = 0
                                                                v = _8428 + 128
                                                                w = mem[64] + 196
                                                                while t < _13366:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_13237 + 100] = this.address
                                                                mem[_13237 + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13237 + (32 * _13366) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14814 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14898 = mem[_14814]
                                                                require mem[_14814] <= test266151307()
                                                                require _14814 + mem[_14814] + 31 < _14814 + return_data.size
                                                                _14970 = mem[_14814 + mem[_14814]]
                                                                if mem[_14814 + mem[_14814]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14814 + ceil32(return_data.size) + ceil32(32 * mem[_14814 + mem[_14814]]) + 1 > test266151307() or ceil32(32 * mem[_14814 + mem[_14814]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14814 + ceil32(return_data.size) + ceil32(32 * mem[_14814 + mem[_14814]]) + 1
                                                                mem[_14814 + ceil32(return_data.size)] = _14970
                                                                require (32 * _14970) + _14898 + 32 <= return_data.size
                                                                t = _14814 + ceil32(return_data.size) + 32
                                                                s = _14814 + _14898 + 32
                                                                while s < (32 * _14970) + _14814 + _14898 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14970 < 1:
                                                                    revert with 0, 17
                                                                if _14970 - 1 >= _14970:
                                                                    revert with 0, 50
                                                                if mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                                t = mem[(32 * _14970 - 1) + _14814 + ceil32(return_data.size) + 32] - u
                                                                continue 
                                                            if stor1.length == address(stor6.field_256):
                                                                mem[_8428 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[_8428 + 196] = u
                                                                mem[_8428 + 228] = 1
                                                                mem[_8428 + 260] = 160
                                                                mem[_8428 + 356] = mem[_8428]
                                                                t = 0
                                                                v = _8428 + 32
                                                                w = _8428 + 388
                                                                while t < mem[_8428]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8428 + 292] = this.address
                                                                mem[_8428 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8428 + (32 * mem[_8428]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11023 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11095 = mem[_11023]
                                                                require mem[_11023] <= test266151307()
                                                                require _11023 + mem[_11023] + 31 < _11023 + return_data.size
                                                                _11181 = mem[_11023 + mem[_11023]]
                                                                if mem[_11023 + mem[_11023]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11023 + ceil32(return_data.size) + ceil32(32 * mem[_11023 + mem[_11023]]) + 1 > test266151307() or ceil32(32 * mem[_11023 + mem[_11023]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11023 + ceil32(return_data.size) + ceil32(32 * mem[_11023 + mem[_11023]]) + 1
                                                                mem[_11023 + ceil32(return_data.size)] = _11181
                                                                require (32 * _11181) + _11095 + 32 <= return_data.size
                                                                v = _11023 + ceil32(return_data.size) + 32
                                                                t = _11023 + _11095 + 32
                                                                while t < (32 * _11181) + _11023 + _11095 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11181 < 1:
                                                                    revert with 0, 17
                                                                if _11181 - 1 >= _11181:
                                                                    revert with 0, 50
                                                                _13234 = mem[(32 * _11181 - 1) + _11023 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 1
                                                                mem[mem[64] + 36] = 128
                                                                _13365 = mem[_8428 + 96]
                                                                mem[mem[64] + 132] = mem[_8428 + 96]
                                                                t = 0
                                                                v = _8428 + 128
                                                                w = mem[64] + 164
                                                                while t < _13365:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 68] = this.address
                                                                mem[mem[64] + 100] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                                   value _13234 wei
                                                                     gas gas_remaining wei
                                                                    args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13365) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14813 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14897 = mem[_14813]
                                                                require mem[_14813] <= test266151307()
                                                                require _14813 + mem[_14813] + 31 < _14813 + return_data.size
                                                                _14969 = mem[_14813 + mem[_14813]]
                                                                if mem[_14813 + mem[_14813]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14813 + ceil32(return_data.size) + ceil32(32 * mem[_14813 + mem[_14813]]) + 1 > test266151307() or ceil32(32 * mem[_14813 + mem[_14813]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14813 + ceil32(return_data.size) + ceil32(32 * mem[_14813 + mem[_14813]]) + 1
                                                                mem[_14813 + ceil32(return_data.size)] = _14969
                                                                require (32 * _14969) + _14897 + 32 <= return_data.size
                                                                t = _14813 + ceil32(return_data.size) + 32
                                                                s = _14813 + _14897 + 32
                                                                while s < (32 * _14969) + _14813 + _14897 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14969 < 1:
                                                                    revert with 0, 17
                                                                if _14969 - 1 >= _14969:
                                                                    revert with 0, 50
                                                                _16109 = mem[(32 * _14969 - 1) + _14813 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14969 - 1) + _14813 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14969 - 1) + _14813 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14969 - 1) + _14813 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16109 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16109 - u, address(stor6.field_0)
                                                                t = _16109 - u
                                                                continue 
                                                            mem[_8428 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8428 + 196] = u
                                                            mem[_8428 + 228] = 1
                                                            mem[_8428 + 260] = 160
                                                            mem[_8428 + 356] = mem[_8428]
                                                            t = 0
                                                            v = _8428 + 32
                                                            w = _8428 + 388
                                                            while t < mem[_8428]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8428 + 292] = this.address
                                                            mem[_8428 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8428 + (32 * mem[_8428]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11022 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11094 = mem[_11022]
                                                            require mem[_11022] <= test266151307()
                                                            require _11022 + mem[_11022] + 31 < _11022 + return_data.size
                                                            _11180 = mem[_11022 + mem[_11022]]
                                                            if mem[_11022 + mem[_11022]] > test266151307():
                                                                revert with 0, 65
                                                            if _11022 + ceil32(return_data.size) + ceil32(32 * mem[_11022 + mem[_11022]]) + 1 > test266151307() or ceil32(32 * mem[_11022 + mem[_11022]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11022 + ceil32(return_data.size) + ceil32(32 * mem[_11022 + mem[_11022]]) + 1
                                                            mem[_11022 + ceil32(return_data.size)] = _11180
                                                            require (32 * _11180) + _11094 + 32 <= return_data.size
                                                            v = _11022 + ceil32(return_data.size) + 32
                                                            t = _11022 + _11094 + 32
                                                            while t < (32 * _11180) + _11022 + _11094 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11180 < 1:
                                                                revert with 0, 17
                                                            if _11180 - 1 >= _11180:
                                                                revert with 0, 50
                                                            _13232 = mem[(32 * _11180 - 1) + _11022 + ceil32(return_data.size) + 32]
                                                            _13233 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13232
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13364 = mem[_8428 + 96]
                                                            mem[mem[64] + 164] = mem[_8428 + 96]
                                                            t = 0
                                                            v = _8428 + 128
                                                            w = mem[64] + 196
                                                            while t < _13364:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13233 + 100] = this.address
                                                            mem[_13233 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13233 + (32 * _13364) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14812 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14896 = mem[_14812]
                                                            require mem[_14812] <= test266151307()
                                                            require _14812 + mem[_14812] + 31 < _14812 + return_data.size
                                                            _14968 = mem[_14812 + mem[_14812]]
                                                            if mem[_14812 + mem[_14812]] > test266151307():
                                                                revert with 0, 65
                                                            if _14812 + ceil32(return_data.size) + ceil32(32 * mem[_14812 + mem[_14812]]) + 1 > test266151307() or ceil32(32 * mem[_14812 + mem[_14812]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14812 + ceil32(return_data.size) + ceil32(32 * mem[_14812 + mem[_14812]]) + 1
                                                            mem[_14812 + ceil32(return_data.size)] = _14968
                                                            require (32 * _14968) + _14896 + 32 <= return_data.size
                                                            t = _14812 + ceil32(return_data.size) + 32
                                                            s = _14812 + _14896 + 32
                                                            while s < (32 * _14968) + _14812 + _14896 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14968 < 1:
                                                                revert with 0, 17
                                                            if _14968 - 1 >= _14968:
                                                                revert with 0, 50
                                                            _16108 = mem[(32 * _14968 - 1) + _14812 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14968 - 1) + _14812 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14968 - 1) + _14812 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14968 - 1) + _14812 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16108 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16108 - u, address(stor6.field_0)
                                                            t = _16108 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8099 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8099] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8099] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8099] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8099] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8425 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8425]:
                                                            revert with 0, 50
                                                        mem[_8425 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8425]:
                                                            revert with 0, 50
                                                        mem[_8425 + 64] = address(stor6.field_256)
                                                        if not mem[_8425 + 96]:
                                                            revert with 0, 50
                                                        mem[_8425 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8425 + 96]:
                                                            revert with 0, 50
                                                        mem[_8425 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8425 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8425 + 196] = 1
                                                            mem[_8425 + 228] = 128
                                                            mem[_8425 + 324] = mem[_8425]
                                                            t = 0
                                                            v = _8425 + 32
                                                            w = _8425 + 356
                                                            while t < mem[_8425]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8425 + 260] = this.address
                                                            mem[_8425 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8425 + (32 * mem[_8425]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11021 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11093 = mem[_11021]
                                                            require mem[_11021] <= test266151307()
                                                            require _11021 + mem[_11021] + 31 < _11021 + return_data.size
                                                            _11179 = mem[_11021 + mem[_11021]]
                                                            if mem[_11021 + mem[_11021]] > test266151307():
                                                                revert with 0, 65
                                                            if _11021 + ceil32(return_data.size) + ceil32(32 * mem[_11021 + mem[_11021]]) + 1 > test266151307() or ceil32(32 * mem[_11021 + mem[_11021]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11021 + ceil32(return_data.size) + ceil32(32 * mem[_11021 + mem[_11021]]) + 1
                                                            mem[_11021 + ceil32(return_data.size)] = _11179
                                                            require (32 * _11179) + _11093 + 32 <= return_data.size
                                                            v = _11021 + ceil32(return_data.size) + 32
                                                            t = _11021 + _11093 + 32
                                                            while t < (32 * _11179) + _11021 + _11093 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11179 < 1:
                                                                revert with 0, 17
                                                            if _11179 - 1 >= _11179:
                                                                revert with 0, 50
                                                            _13231 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = mem[(32 * _11179 - 1) + _11021 + ceil32(return_data.size) + 32]
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13363 = mem[_8425 + 96]
                                                            mem[mem[64] + 164] = mem[_8425 + 96]
                                                            t = 0
                                                            v = _8425 + 128
                                                            w = mem[64] + 196
                                                            while t < _13363:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13231 + 100] = this.address
                                                            mem[_13231 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13231 + (32 * _13363) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14811 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14895 = mem[_14811]
                                                            require mem[_14811] <= test266151307()
                                                            require _14811 + mem[_14811] + 31 < _14811 + return_data.size
                                                            _14967 = mem[_14811 + mem[_14811]]
                                                            if mem[_14811 + mem[_14811]] > test266151307():
                                                                revert with 0, 65
                                                            if _14811 + ceil32(return_data.size) + ceil32(32 * mem[_14811 + mem[_14811]]) + 1 > test266151307() or ceil32(32 * mem[_14811 + mem[_14811]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14811 + ceil32(return_data.size) + ceil32(32 * mem[_14811 + mem[_14811]]) + 1
                                                            mem[_14811 + ceil32(return_data.size)] = _14967
                                                            require (32 * _14967) + _14895 + 32 <= return_data.size
                                                            t = _14811 + ceil32(return_data.size) + 32
                                                            s = _14811 + _14895 + 32
                                                            while s < (32 * _14967) + _14811 + _14895 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14967 < 1:
                                                                revert with 0, 17
                                                            if _14967 - 1 >= _14967:
                                                                revert with 0, 50
                                                            _16107 = mem[(32 * _14967 - 1) + _14811 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14967 - 1) + _14811 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14967 - 1) + _14811 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14967 - 1) + _14811 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16107 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16107 - u, address(stor6.field_0)
                                                            t = _16107 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8425 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8425 + 196] = u
                                                            mem[_8425 + 228] = 1
                                                            mem[_8425 + 260] = 160
                                                            mem[_8425 + 356] = mem[_8425]
                                                            t = 0
                                                            v = _8425 + 32
                                                            w = _8425 + 388
                                                            while t < mem[_8425]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8425 + 292] = this.address
                                                            mem[_8425 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8425 + (32 * mem[_8425]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11020 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11092 = mem[_11020]
                                                            require mem[_11020] <= test266151307()
                                                            require _11020 + mem[_11020] + 31 < _11020 + return_data.size
                                                            _11178 = mem[_11020 + mem[_11020]]
                                                            if mem[_11020 + mem[_11020]] > test266151307():
                                                                revert with 0, 65
                                                            if _11020 + ceil32(return_data.size) + ceil32(32 * mem[_11020 + mem[_11020]]) + 1 > test266151307() or ceil32(32 * mem[_11020 + mem[_11020]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11020 + ceil32(return_data.size) + ceil32(32 * mem[_11020 + mem[_11020]]) + 1
                                                            mem[_11020 + ceil32(return_data.size)] = _11178
                                                            require (32 * _11178) + _11092 + 32 <= return_data.size
                                                            v = _11020 + ceil32(return_data.size) + 32
                                                            t = _11020 + _11092 + 32
                                                            while t < (32 * _11178) + _11020 + _11092 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11178 < 1:
                                                                revert with 0, 17
                                                            if _11178 - 1 >= _11178:
                                                                revert with 0, 50
                                                            _13228 = mem[(32 * _11178 - 1) + _11020 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13362 = mem[_8425 + 96]
                                                            mem[mem[64] + 132] = mem[_8425 + 96]
                                                            t = 0
                                                            v = _8425 + 128
                                                            w = mem[64] + 164
                                                            while t < _13362:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 68] = this.address
                                                            mem[mem[64] + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                               value _13228 wei
                                                                 gas gas_remaining wei
                                                                args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13362) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14810 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14894 = mem[_14810]
                                                            require mem[_14810] <= test266151307()
                                                            require _14810 + mem[_14810] + 31 < _14810 + return_data.size
                                                            _14966 = mem[_14810 + mem[_14810]]
                                                            if mem[_14810 + mem[_14810]] > test266151307():
                                                                revert with 0, 65
                                                            if _14810 + ceil32(return_data.size) + ceil32(32 * mem[_14810 + mem[_14810]]) + 1 > test266151307() or ceil32(32 * mem[_14810 + mem[_14810]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14810 + ceil32(return_data.size) + ceil32(32 * mem[_14810 + mem[_14810]]) + 1
                                                            mem[_14810 + ceil32(return_data.size)] = _14966
                                                            require (32 * _14966) + _14894 + 32 <= return_data.size
                                                            t = _14810 + ceil32(return_data.size) + 32
                                                            s = _14810 + _14894 + 32
                                                            while s < (32 * _14966) + _14810 + _14894 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14966 < 1:
                                                                revert with 0, 17
                                                            if _14966 - 1 >= _14966:
                                                                revert with 0, 50
                                                            _16106 = mem[(32 * _14966 - 1) + _14810 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14966 - 1) + _14810 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14966 - 1) + _14810 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14966 - 1) + _14810 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16106 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16106 - u, address(stor6.field_0)
                                                            t = _16106 - u
                                                            continue 
                                                        mem[_8425 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8425 + 196] = u
                                                        mem[_8425 + 228] = 1
                                                        mem[_8425 + 260] = 160
                                                        mem[_8425 + 356] = mem[_8425]
                                                        t = 0
                                                        v = _8425 + 32
                                                        w = _8425 + 388
                                                        while t < mem[_8425]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8425 + 292] = this.address
                                                        mem[_8425 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8425 + (32 * mem[_8425]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11019 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11091 = mem[_11019]
                                                        require mem[_11019] <= test266151307()
                                                        require _11019 + mem[_11019] + 31 < _11019 + return_data.size
                                                        _11177 = mem[_11019 + mem[_11019]]
                                                        if mem[_11019 + mem[_11019]] > test266151307():
                                                            revert with 0, 65
                                                        if _11019 + ceil32(return_data.size) + ceil32(32 * mem[_11019 + mem[_11019]]) + 1 > test266151307() or ceil32(32 * mem[_11019 + mem[_11019]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11019 + ceil32(return_data.size) + ceil32(32 * mem[_11019 + mem[_11019]]) + 1
                                                        mem[_11019 + ceil32(return_data.size)] = _11177
                                                        require (32 * _11177) + _11091 + 32 <= return_data.size
                                                        v = _11019 + ceil32(return_data.size) + 32
                                                        t = _11019 + _11091 + 32
                                                        while t < (32 * _11177) + _11019 + _11091 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11177 < 1:
                                                            revert with 0, 17
                                                        if _11177 - 1 >= _11177:
                                                            revert with 0, 50
                                                        _13226 = mem[(32 * _11177 - 1) + _11019 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13226
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13361 = mem[_8425 + 96]
                                                        mem[mem[64] + 164] = mem[_8425 + 96]
                                                        t = 0
                                                        v = _8425 + 128
                                                        w = mem[64] + 196
                                                        while t < _13361:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                             gas gas_remaining wei
                                                            args _13226, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13361) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14809 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14893 = mem[_14809]
                                                        require mem[_14809] <= test266151307()
                                                        require _14809 + mem[_14809] + 31 < _14809 + return_data.size
                                                        _14965 = mem[_14809 + mem[_14809]]
                                                        if mem[_14809 + mem[_14809]] > test266151307():
                                                            revert with 0, 65
                                                        if _14809 + ceil32(return_data.size) + ceil32(32 * mem[_14809 + mem[_14809]]) + 1 > test266151307() or ceil32(32 * mem[_14809 + mem[_14809]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14809 + ceil32(return_data.size) + ceil32(32 * mem[_14809 + mem[_14809]]) + 1
                                                        mem[_14809 + ceil32(return_data.size)] = _14965
                                                        require (32 * _14965) + _14893 + 32 <= return_data.size
                                                        t = _14809 + ceil32(return_data.size) + 32
                                                        s = _14809 + _14893 + 32
                                                        while s < (32 * _14965) + _14809 + _14893 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14965 < 1:
                                                            revert with 0, 17
                                                        if _14965 - 1 >= _14965:
                                                            revert with 0, 50
                                                        _16105 = mem[(32 * _14965 - 1) + _14809 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14965 - 1) + _14809 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14965 - 1) + _14809 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14965 - 1) + _14809 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16105 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16105 - u, address(stor6.field_0)
                                                        t = _16105 - u
                                                        continue 
                                        else:
                                            mem[_1492 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                            mem[_1492 + 196] = u
                                            mem[_1492 + 228] = 1
                                            mem[_1492 + 260] = 160
                                            mem[_1492 + 356] = mem[_1492]
                                            t = 0
                                            v = _1492 + 32
                                            w = _1492 + 388
                                            while t < mem[_1492]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1492 + 292] = this.address
                                            mem[_1492 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1492 + (32 * mem[_1492]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2507 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2519 = mem[_2507]
                                            require mem[_2507] <= test266151307()
                                            require _2507 + mem[_2507] + 31 < _2507 + return_data.size
                                            _2533 = mem[_2507 + mem[_2507]]
                                            if mem[_2507 + mem[_2507]] > test266151307():
                                                revert with 0, 65
                                            if _2507 + ceil32(return_data.size) + ceil32(32 * mem[_2507 + mem[_2507]]) + 1 > test266151307() or ceil32(32 * mem[_2507 + mem[_2507]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2507 + ceil32(return_data.size) + ceil32(32 * mem[_2507 + mem[_2507]]) + 1
                                            mem[_2507 + ceil32(return_data.size)] = _2533
                                            require (32 * _2533) + _2519 + 32 <= return_data.size
                                            v = _2507 + ceil32(return_data.size) + 32
                                            t = _2507 + _2519 + 32
                                            while t < (32 * _2533) + _2507 + _2519 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2533 < 1:
                                                revert with 0, 17
                                            if _2533 - 1 >= _2533:
                                                revert with 0, 50
                                            _3457 = mem[(32 * _2533 - 1) + _2507 + ceil32(return_data.size) + 32]
                                            _3458 = mem[64]
                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 1
                                            mem[mem[64] + 36] = 128
                                            _3479 = mem[_1492 + 96]
                                            mem[mem[64] + 132] = mem[_1492 + 96]
                                            t = 0
                                            v = _1492 + 128
                                            w = mem[64] + 164
                                            while t < _3479:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_3458 + 68] = this.address
                                            mem[_3458 + 100] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                               value _3457 wei
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3458 + (32 * _3479) + -mem[64] + 160]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4303 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4317 = mem[_4303]
                                            require mem[_4303] <= test266151307()
                                            require _4303 + mem[_4303] + 31 < _4303 + return_data.size
                                            _4329 = mem[_4303 + mem[_4303]]
                                            if mem[_4303 + mem[_4303]] > test266151307():
                                                revert with 0, 65
                                            if _4303 + ceil32(return_data.size) + ceil32(32 * mem[_4303 + mem[_4303]]) + 1 > test266151307() or ceil32(32 * mem[_4303 + mem[_4303]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4303 + ceil32(return_data.size) + ceil32(32 * mem[_4303 + mem[_4303]]) + 1
                                            mem[_4303 + ceil32(return_data.size)] = _4329
                                            require (32 * _4329) + _4317 + 32 <= return_data.size
                                            v = _4303 + ceil32(return_data.size) + 32
                                            t = _4303 + _4317 + 32
                                            while t < (32 * _4329) + _4303 + _4317 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4329 < 1:
                                                revert with 0, 17
                                            if _4329 - 1 >= _4329:
                                                revert with 0, 50
                                            _5107 = mem[(32 * _4329 - 1) + _4303 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4329 - 1) + _4303 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4329 - 1) + _4303 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4329 - 1) + _4303 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5107 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5107 - u, address(stor6.field_0)
                                                t = _5107 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7065 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7065] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7065 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7065 + 64] = 0
                                                        mem[_7065 + 96] = 0
                                                        mem[_7065 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7109 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7065 + 160] = mem[_7109]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7065 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7253 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7269 = mem[_7253]
                                                        _7270 = mem[_7253 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7270
                                                        uint256(stor6[t].field_512) = _7269
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7019 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7019] = 0
                                                    mem[_7019 + 32] = 0
                                                    mem[_7019 + 64] = 0
                                                    mem[_7019 + 96] = 0
                                                    mem[_7019 + 128] = 0
                                                    mem[_7019 + 160] = 0
                                                    if var248001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var248001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var248001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8434 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8434]:
                                                                revert with 0, 50
                                                            mem[_8434 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8434]:
                                                                revert with 0, 50
                                                            mem[_8434 + 64] = address(stor6.field_256)
                                                            if not mem[_8434 + 96]:
                                                                revert with 0, 50
                                                            mem[_8434 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8434 + 96]:
                                                                revert with 0, 50
                                                            mem[_8434 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8434 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8434 + 196] = 1
                                                                mem[_8434 + 228] = 128
                                                                mem[_8434 + 324] = mem[_8434]
                                                                t = 0
                                                                v = _8434 + 32
                                                                w = _8434 + 356
                                                                while t < mem[_8434]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8434 + 260] = this.address
                                                                mem[_8434 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8434 + (32 * mem[_8434]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11030 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11102 = mem[_11030]
                                                                require mem[_11030] <= test266151307()
                                                                require _11030 + mem[_11030] + 31 < _11030 + return_data.size
                                                                _11188 = mem[_11030 + mem[_11030]]
                                                                if mem[_11030 + mem[_11030]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11030 + ceil32(return_data.size) + ceil32(32 * mem[_11030 + mem[_11030]]) + 1 > test266151307() or ceil32(32 * mem[_11030 + mem[_11030]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11030 + ceil32(return_data.size) + ceil32(32 * mem[_11030 + mem[_11030]]) + 1
                                                                mem[_11030 + ceil32(return_data.size)] = _11188
                                                                require (32 * _11188) + _11102 + 32 <= return_data.size
                                                                v = _11030 + ceil32(return_data.size) + 32
                                                                t = _11030 + _11102 + 32
                                                                while t < (32 * _11188) + _11030 + _11102 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11188 < 1:
                                                                    revert with 0, 17
                                                                if _11188 - 1 >= _11188:
                                                                    revert with 0, 50
                                                                _13249 = mem[(32 * _11188 - 1) + _11030 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13249
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13372 = mem[_8434 + 96]
                                                                mem[mem[64] + 164] = mem[_8434 + 96]
                                                                t = 0
                                                                v = _8434 + 128
                                                                w = mem[64] + 196
                                                                while t < _13372:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                     gas gas_remaining wei
                                                                    args _13249, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13372) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14820 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14904 = mem[_14820]
                                                                require mem[_14820] <= test266151307()
                                                                require _14820 + mem[_14820] + 31 < _14820 + return_data.size
                                                                _14976 = mem[_14820 + mem[_14820]]
                                                                if mem[_14820 + mem[_14820]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14820 + ceil32(return_data.size) + ceil32(32 * mem[_14820 + mem[_14820]]) + 1 > test266151307() or ceil32(32 * mem[_14820 + mem[_14820]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14820 + ceil32(return_data.size) + ceil32(32 * mem[_14820 + mem[_14820]]) + 1
                                                                mem[_14820 + ceil32(return_data.size)] = _14976
                                                                require (32 * _14976) + _14904 + 32 <= return_data.size
                                                                t = _14820 + ceil32(return_data.size) + 32
                                                                s = _14820 + _14904 + 32
                                                                while s < (32 * _14976) + _14820 + _14904 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14976 < 1:
                                                                    revert with 0, 17
                                                                if _14976 - 1 >= _14976:
                                                                    revert with 0, 50
                                                                _16116 = mem[(32 * _14976 - 1) + _14820 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14976 - 1) + _14820 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14976 - 1) + _14820 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14976 - 1) + _14820 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16116 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16116 - u, address(stor6.field_0)
                                                                t = _16116 - u
                                                                continue 
                                                            if stor1.length == address(stor6.field_256):
                                                                mem[_8434 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[_8434 + 196] = u
                                                                mem[_8434 + 228] = 1
                                                                mem[_8434 + 260] = 160
                                                                mem[_8434 + 356] = mem[_8434]
                                                                t = 0
                                                                v = _8434 + 32
                                                                w = _8434 + 388
                                                                while t < mem[_8434]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8434 + 292] = this.address
                                                                mem[_8434 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8434 + (32 * mem[_8434]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11029 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11101 = mem[_11029]
                                                                require mem[_11029] <= test266151307()
                                                                require _11029 + mem[_11029] + 31 < _11029 + return_data.size
                                                                _11187 = mem[_11029 + mem[_11029]]
                                                                if mem[_11029 + mem[_11029]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11029 + ceil32(return_data.size) + ceil32(32 * mem[_11029 + mem[_11029]]) + 1 > test266151307() or ceil32(32 * mem[_11029 + mem[_11029]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11029 + ceil32(return_data.size) + ceil32(32 * mem[_11029 + mem[_11029]]) + 1
                                                                mem[_11029 + ceil32(return_data.size)] = _11187
                                                                require (32 * _11187) + _11101 + 32 <= return_data.size
                                                                v = _11029 + ceil32(return_data.size) + 32
                                                                t = _11029 + _11101 + 32
                                                                while t < (32 * _11187) + _11029 + _11101 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11187 < 1:
                                                                    revert with 0, 17
                                                                if _11187 - 1 >= _11187:
                                                                    revert with 0, 50
                                                                _13247 = mem[(32 * _11187 - 1) + _11029 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 1
                                                                mem[mem[64] + 36] = 128
                                                                _13371 = mem[_8434 + 96]
                                                                mem[mem[64] + 132] = mem[_8434 + 96]
                                                                t = 0
                                                                v = _8434 + 128
                                                                w = mem[64] + 164
                                                                while t < _13371:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 68] = this.address
                                                                mem[mem[64] + 100] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                                   value _13247 wei
                                                                     gas gas_remaining wei
                                                                    args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13371) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14819 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14903 = mem[_14819]
                                                                require mem[_14819] <= test266151307()
                                                                require _14819 + mem[_14819] + 31 < _14819 + return_data.size
                                                                _14975 = mem[_14819 + mem[_14819]]
                                                                if mem[_14819 + mem[_14819]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14819 + ceil32(return_data.size) + ceil32(32 * mem[_14819 + mem[_14819]]) + 1 > test266151307() or ceil32(32 * mem[_14819 + mem[_14819]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14819 + ceil32(return_data.size) + ceil32(32 * mem[_14819 + mem[_14819]]) + 1
                                                                mem[_14819 + ceil32(return_data.size)] = _14975
                                                                require (32 * _14975) + _14903 + 32 <= return_data.size
                                                                t = _14819 + ceil32(return_data.size) + 32
                                                                s = _14819 + _14903 + 32
                                                                while s < (32 * _14975) + _14819 + _14903 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14975 < 1:
                                                                    revert with 0, 17
                                                                if _14975 - 1 >= _14975:
                                                                    revert with 0, 50
                                                                _16115 = mem[(32 * _14975 - 1) + _14819 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14975 - 1) + _14819 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14975 - 1) + _14819 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14975 - 1) + _14819 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16115 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16115 - u, address(stor6.field_0)
                                                                t = _16115 - u
                                                                continue 
                                                            mem[_8434 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8434 + 196] = u
                                                            mem[_8434 + 228] = 1
                                                            mem[_8434 + 260] = 160
                                                            mem[_8434 + 356] = mem[_8434]
                                                            t = 0
                                                            v = _8434 + 32
                                                            w = _8434 + 388
                                                            while t < mem[_8434]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8434 + 292] = this.address
                                                            mem[_8434 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8434 + (32 * mem[_8434]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11028 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11100 = mem[_11028]
                                                            require mem[_11028] <= test266151307()
                                                            require _11028 + mem[_11028] + 31 < _11028 + return_data.size
                                                            _11186 = mem[_11028 + mem[_11028]]
                                                            if mem[_11028 + mem[_11028]] > test266151307():
                                                                revert with 0, 65
                                                            if _11028 + ceil32(return_data.size) + ceil32(32 * mem[_11028 + mem[_11028]]) + 1 > test266151307() or ceil32(32 * mem[_11028 + mem[_11028]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11028 + ceil32(return_data.size) + ceil32(32 * mem[_11028 + mem[_11028]]) + 1
                                                            mem[_11028 + ceil32(return_data.size)] = _11186
                                                            require (32 * _11186) + _11100 + 32 <= return_data.size
                                                            v = _11028 + ceil32(return_data.size) + 32
                                                            t = _11028 + _11100 + 32
                                                            while t < (32 * _11186) + _11028 + _11100 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11186 < 1:
                                                                revert with 0, 17
                                                            if _11186 - 1 >= _11186:
                                                                revert with 0, 50
                                                            _13245 = mem[(32 * _11186 - 1) + _11028 + ceil32(return_data.size) + 32]
                                                            _13246 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13245
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13370 = mem[_8434 + 96]
                                                            mem[mem[64] + 164] = mem[_8434 + 96]
                                                            t = 0
                                                            v = _8434 + 128
                                                            w = mem[64] + 196
                                                            while t < _13370:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13246 + 100] = this.address
                                                            mem[_13246 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13246 + (32 * _13370) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14818 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14902 = mem[_14818]
                                                            require mem[_14818] <= test266151307()
                                                            require _14818 + mem[_14818] + 31 < _14818 + return_data.size
                                                            _14974 = mem[_14818 + mem[_14818]]
                                                            if mem[_14818 + mem[_14818]] > test266151307():
                                                                revert with 0, 65
                                                            if _14818 + ceil32(return_data.size) + ceil32(32 * mem[_14818 + mem[_14818]]) + 1 > test266151307() or ceil32(32 * mem[_14818 + mem[_14818]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14818 + ceil32(return_data.size) + ceil32(32 * mem[_14818 + mem[_14818]]) + 1
                                                            mem[_14818 + ceil32(return_data.size)] = _14974
                                                            require (32 * _14974) + _14902 + 32 <= return_data.size
                                                            t = _14818 + ceil32(return_data.size) + 32
                                                            s = _14818 + _14902 + 32
                                                            while s < (32 * _14974) + _14818 + _14902 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14974 < 1:
                                                                revert with 0, 17
                                                            if _14974 - 1 >= _14974:
                                                                revert with 0, 50
                                                            _16114 = mem[(32 * _14974 - 1) + _14818 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14974 - 1) + _14818 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14974 - 1) + _14818 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14974 - 1) + _14818 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16114 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16114 - u, address(stor6.field_0)
                                                            t = _16114 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8101 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8101] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8101] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8101] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8101] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8431 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8431]:
                                                            revert with 0, 50
                                                        mem[_8431 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8431]:
                                                            revert with 0, 50
                                                        mem[_8431 + 64] = address(stor6.field_256)
                                                        if not mem[_8431 + 96]:
                                                            revert with 0, 50
                                                        mem[_8431 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8431 + 96]:
                                                            revert with 0, 50
                                                        mem[_8431 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8431 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8431 + 196] = 1
                                                            mem[_8431 + 228] = 128
                                                            mem[_8431 + 324] = mem[_8431]
                                                            t = 0
                                                            v = _8431 + 32
                                                            w = _8431 + 356
                                                            while t < mem[_8431]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8431 + 260] = this.address
                                                            mem[_8431 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8431 + (32 * mem[_8431]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11027 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11099 = mem[_11027]
                                                            require mem[_11027] <= test266151307()
                                                            require _11027 + mem[_11027] + 31 < _11027 + return_data.size
                                                            _11185 = mem[_11027 + mem[_11027]]
                                                            if mem[_11027 + mem[_11027]] > test266151307():
                                                                revert with 0, 65
                                                            if _11027 + ceil32(return_data.size) + ceil32(32 * mem[_11027 + mem[_11027]]) + 1 > test266151307() or ceil32(32 * mem[_11027 + mem[_11027]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11027 + ceil32(return_data.size) + ceil32(32 * mem[_11027 + mem[_11027]]) + 1
                                                            mem[_11027 + ceil32(return_data.size)] = _11185
                                                            require (32 * _11185) + _11099 + 32 <= return_data.size
                                                            v = _11027 + ceil32(return_data.size) + 32
                                                            t = _11027 + _11099 + 32
                                                            while t < (32 * _11185) + _11027 + _11099 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11185 < 1:
                                                                revert with 0, 17
                                                            if _11185 - 1 >= _11185:
                                                                revert with 0, 50
                                                            _13243 = mem[(32 * _11185 - 1) + _11027 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13243
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13369 = mem[_8431 + 96]
                                                            mem[mem[64] + 164] = mem[_8431 + 96]
                                                            t = 0
                                                            v = _8431 + 128
                                                            w = mem[64] + 196
                                                            while t < _13369:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13243, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13369) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14817 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14901 = mem[_14817]
                                                            require mem[_14817] <= test266151307()
                                                            require _14817 + mem[_14817] + 31 < _14817 + return_data.size
                                                            _14973 = mem[_14817 + mem[_14817]]
                                                            if mem[_14817 + mem[_14817]] > test266151307():
                                                                revert with 0, 65
                                                            if _14817 + ceil32(return_data.size) + ceil32(32 * mem[_14817 + mem[_14817]]) + 1 > test266151307() or ceil32(32 * mem[_14817 + mem[_14817]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14817 + ceil32(return_data.size) + ceil32(32 * mem[_14817 + mem[_14817]]) + 1
                                                            mem[_14817 + ceil32(return_data.size)] = _14973
                                                            require (32 * _14973) + _14901 + 32 <= return_data.size
                                                            t = _14817 + ceil32(return_data.size) + 32
                                                            s = _14817 + _14901 + 32
                                                            while s < (32 * _14973) + _14817 + _14901 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14973 < 1:
                                                                revert with 0, 17
                                                            if _14973 - 1 >= _14973:
                                                                revert with 0, 50
                                                            _16113 = mem[(32 * _14973 - 1) + _14817 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14973 - 1) + _14817 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14973 - 1) + _14817 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14973 - 1) + _14817 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16113 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16113 - u, address(stor6.field_0)
                                                            t = _16113 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8431 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8431 + 196] = u
                                                            mem[_8431 + 228] = 1
                                                            mem[_8431 + 260] = 160
                                                            mem[_8431 + 356] = mem[_8431]
                                                            t = 0
                                                            v = _8431 + 32
                                                            w = _8431 + 388
                                                            while t < mem[_8431]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8431 + 292] = this.address
                                                            mem[_8431 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8431 + (32 * mem[_8431]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11026 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11098 = mem[_11026]
                                                            require mem[_11026] <= test266151307()
                                                            require _11026 + mem[_11026] + 31 < _11026 + return_data.size
                                                            _11184 = mem[_11026 + mem[_11026]]
                                                            if mem[_11026 + mem[_11026]] > test266151307():
                                                                revert with 0, 65
                                                            if _11026 + ceil32(return_data.size) + ceil32(32 * mem[_11026 + mem[_11026]]) + 1 > test266151307() or ceil32(32 * mem[_11026 + mem[_11026]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11026 + ceil32(return_data.size) + ceil32(32 * mem[_11026 + mem[_11026]]) + 1
                                                            mem[_11026 + ceil32(return_data.size)] = _11184
                                                            require (32 * _11184) + _11098 + 32 <= return_data.size
                                                            v = _11026 + ceil32(return_data.size) + 32
                                                            t = _11026 + _11098 + 32
                                                            while t < (32 * _11184) + _11026 + _11098 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11184 < 1:
                                                                revert with 0, 17
                                                            if _11184 - 1 >= _11184:
                                                                revert with 0, 50
                                                            _13241 = mem[(32 * _11184 - 1) + _11026 + ceil32(return_data.size) + 32]
                                                            _13242 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13368 = mem[_8431 + 96]
                                                            mem[mem[64] + 132] = mem[_8431 + 96]
                                                            t = 0
                                                            v = _8431 + 128
                                                            w = mem[64] + 164
                                                            while t < _13368:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13242 + 68] = this.address
                                                            mem[_13242 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13241 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13242 + (32 * _13368) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14816 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14900 = mem[_14816]
                                                            require mem[_14816] <= test266151307()
                                                            require _14816 + mem[_14816] + 31 < _14816 + return_data.size
                                                            _14972 = mem[_14816 + mem[_14816]]
                                                            if mem[_14816 + mem[_14816]] > test266151307():
                                                                revert with 0, 65
                                                            if _14816 + ceil32(return_data.size) + ceil32(32 * mem[_14816 + mem[_14816]]) + 1 > test266151307() or ceil32(32 * mem[_14816 + mem[_14816]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14816 + ceil32(return_data.size) + ceil32(32 * mem[_14816 + mem[_14816]]) + 1
                                                            mem[_14816 + ceil32(return_data.size)] = _14972
                                                            require (32 * _14972) + _14900 + 32 <= return_data.size
                                                            t = _14816 + ceil32(return_data.size) + 32
                                                            s = _14816 + _14900 + 32
                                                            while s < (32 * _14972) + _14816 + _14900 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14972 < 1:
                                                                revert with 0, 17
                                                            if _14972 - 1 >= _14972:
                                                                revert with 0, 50
                                                            _16112 = mem[(32 * _14972 - 1) + _14816 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14972 - 1) + _14816 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14972 - 1) + _14816 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14972 - 1) + _14816 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16112 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16112 - u, address(stor6.field_0)
                                                            t = _16112 - u
                                                            continue 
                                                        mem[_8431 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8431 + 196] = u
                                                        mem[_8431 + 228] = 1
                                                        mem[_8431 + 260] = 160
                                                        mem[_8431 + 356] = mem[_8431]
                                                        t = 0
                                                        v = _8431 + 32
                                                        w = _8431 + 388
                                                        while t < mem[_8431]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8431 + 292] = this.address
                                                        mem[_8431 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8431 + (32 * mem[_8431]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11025 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11097 = mem[_11025]
                                                        require mem[_11025] <= test266151307()
                                                        require _11025 + mem[_11025] + 31 < _11025 + return_data.size
                                                        _11183 = mem[_11025 + mem[_11025]]
                                                        if mem[_11025 + mem[_11025]] > test266151307():
                                                            revert with 0, 65
                                                        if _11025 + ceil32(return_data.size) + ceil32(32 * mem[_11025 + mem[_11025]]) + 1 > test266151307() or ceil32(32 * mem[_11025 + mem[_11025]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11025 + ceil32(return_data.size) + ceil32(32 * mem[_11025 + mem[_11025]]) + 1
                                                        mem[_11025 + ceil32(return_data.size)] = _11183
                                                        require (32 * _11183) + _11097 + 32 <= return_data.size
                                                        v = _11025 + ceil32(return_data.size) + 32
                                                        t = _11025 + _11097 + 32
                                                        while t < (32 * _11183) + _11025 + _11097 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11183 < 1:
                                                            revert with 0, 17
                                                        if _11183 - 1 >= _11183:
                                                            revert with 0, 50
                                                        _13239 = mem[(32 * _11183 - 1) + _11025 + ceil32(return_data.size) + 32]
                                                        _13240 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13239
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13367 = mem[_8431 + 96]
                                                        mem[mem[64] + 164] = mem[_8431 + 96]
                                                        t = 0
                                                        v = _8431 + 128
                                                        w = mem[64] + 196
                                                        while t < _13367:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13240 + 100] = this.address
                                                        mem[_13240 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13240 + (32 * _13367) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14815 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14899 = mem[_14815]
                                                        require mem[_14815] <= test266151307()
                                                        require _14815 + mem[_14815] + 31 < _14815 + return_data.size
                                                        _14971 = mem[_14815 + mem[_14815]]
                                                        if mem[_14815 + mem[_14815]] > test266151307():
                                                            revert with 0, 65
                                                        if _14815 + ceil32(return_data.size) + ceil32(32 * mem[_14815 + mem[_14815]]) + 1 > test266151307() or ceil32(32 * mem[_14815 + mem[_14815]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14815 + ceil32(return_data.size) + ceil32(32 * mem[_14815 + mem[_14815]]) + 1
                                                        mem[_14815 + ceil32(return_data.size)] = _14971
                                                        require (32 * _14971) + _14899 + 32 <= return_data.size
                                                        t = _14815 + ceil32(return_data.size) + 32
                                                        s = _14815 + _14899 + 32
                                                        while s < (32 * _14971) + _14815 + _14899 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14971 < 1:
                                                            revert with 0, 17
                                                        if _14971 - 1 >= _14971:
                                                            revert with 0, 50
                                                        _16111 = mem[(32 * _14971 - 1) + _14815 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14971 - 1) + _14815 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14971 - 1) + _14815 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14971 - 1) + _14815 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16111 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16111 - u, address(stor6.field_0)
                                                        t = _16111 - u
                                                        continue 
                            else:
                                mem[mem[64] + 4] = this.address
                                staticcall address(stor6.field_0).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1437 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                t = 0
                                u = 0
                                v = mem[_1437] / 2
                                w = 0
                                while t < stor7:
                                    if v <= 0:
                                        revert with 0, 'RELAY:InvalidQty'
                                    if uint256(stor6.field_512) > !v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if not uint256(stor6.field_768):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                        revert with 0, 17
                                    if not uint256(stor6.field_512):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                        revert with 0, 17
                                    if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 18
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if mem[_1437] < v:
                                        revert with 0, 17
                                    if v > !(mem[_1437] - v / 2):
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    t = t + 1
                                    u = v
                                    v = v + (mem[_1437] - v / 2)
                                    w = v
                                    continue 
                                _1489 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                mem[mem[64] + 96] = 2
                                mem[64] = mem[64] + 192
                                if not mem[_1489]:
                                    revert with 0, 50
                                mem[_1489 + 32] = address(stor6.field_0)
                                if 1 >= mem[_1489]:
                                    revert with 0, 50
                                mem[_1489 + 64] = address(stor6.field_256)
                                if not mem[_1489 + 96]:
                                    revert with 0, 50
                                mem[_1489 + 128] = address(stor6.field_256)
                                if 1 >= mem[_1489 + 96]:
                                    revert with 0, 50
                                mem[_1489 + 160] = address(stor6.field_0)
                                if u:
                                    if stor1.length == address(stor6.field_0):
                                        mem[_1489 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                        mem[_1489 + 196] = 1
                                        mem[_1489 + 228] = 128
                                        mem[_1489 + 324] = mem[_1489]
                                        t = 0
                                        v = _1489 + 32
                                        w = _1489 + 356
                                        while t < mem[_1489]:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_1489 + 260] = this.address
                                        mem[_1489 + 292] = stor2.length
                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                           value u wei
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _1489 + (32 * mem[_1489]) + -mem[64] + 352]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2505 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2517 = mem[_2505]
                                        require mem[_2505] <= test266151307()
                                        require _2505 + mem[_2505] + 31 < _2505 + return_data.size
                                        _2531 = mem[_2505 + mem[_2505]]
                                        if mem[_2505 + mem[_2505]] > test266151307():
                                            revert with 0, 65
                                        if _2505 + ceil32(return_data.size) + ceil32(32 * mem[_2505 + mem[_2505]]) + 1 > test266151307() or ceil32(32 * mem[_2505 + mem[_2505]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _2505 + ceil32(return_data.size) + ceil32(32 * mem[_2505 + mem[_2505]]) + 1
                                        mem[_2505 + ceil32(return_data.size)] = _2531
                                        require (32 * _2531) + _2517 + 32 <= return_data.size
                                        v = _2505 + ceil32(return_data.size) + 32
                                        t = _2505 + _2517 + 32
                                        while t < (32 * _2531) + _2505 + _2517 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _2531 < 1:
                                            revert with 0, 17
                                        if _2531 - 1 >= _2531:
                                            revert with 0, 50
                                        _3453 = mem[(32 * _2531 - 1) + _2505 + ceil32(return_data.size) + 32]
                                        _3454 = mem[64]
                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = _3453
                                        mem[mem[64] + 36] = 1
                                        mem[mem[64] + 68] = 160
                                        _3477 = mem[_1489 + 96]
                                        mem[mem[64] + 164] = mem[_1489 + 96]
                                        t = 0
                                        v = _1489 + 128
                                        w = mem[64] + 196
                                        while t < _3477:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_3454 + 100] = this.address
                                        mem[_3454 + 132] = stor2.length
                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3454 + (32 * _3477) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4301 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _4315 = mem[_4301]
                                        require mem[_4301] <= test266151307()
                                        require _4301 + mem[_4301] + 31 < _4301 + return_data.size
                                        _4327 = mem[_4301 + mem[_4301]]
                                        if mem[_4301 + mem[_4301]] > test266151307():
                                            revert with 0, 65
                                        if _4301 + ceil32(return_data.size) + ceil32(32 * mem[_4301 + mem[_4301]]) + 1 > test266151307() or ceil32(32 * mem[_4301 + mem[_4301]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _4301 + ceil32(return_data.size) + ceil32(32 * mem[_4301 + mem[_4301]]) + 1
                                        mem[_4301 + ceil32(return_data.size)] = _4327
                                        require (32 * _4327) + _4315 + 32 <= return_data.size
                                        v = _4301 + ceil32(return_data.size) + 32
                                        t = _4301 + _4315 + 32
                                        while t < (32 * _4327) + _4301 + _4315 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _4327 < 1:
                                            revert with 0, 17
                                        if _4327 - 1 >= _4327:
                                            revert with 0, 50
                                        _5105 = mem[(32 * _4327 - 1) + _4301 + ceil32(return_data.size) + 32]
                                        if mem[(32 * _4327 - 1) + _4301 + ceil32(return_data.size) + 32] < u:
                                            revert with 0, 17
                                        if mem[(32 * _4327 - 1) + _4301 + ceil32(return_data.size) + 32] - u <= 0:
                                            revert with 0, 'RELAY:NegGain'
                                        if mem[(32 * _4327 - 1) + _4301 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                            mem[mem[64]] = address(stor6.field_256)
                                            mem[mem[64] + 32] = _5105 - u
                                            emit 0x2bcd0e02: address(stor6.field_256), _5105 - u, address(stor6.field_0)
                                            t = _5105 - u
                                            while t:
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 2 * idx >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 1 > !(2 * idx):
                                                    revert with 0, 17
                                                if (2 * idx) + 1 >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                if idx >= ('cd', 68).length:
                                                    revert with 0, 50
                                                if idx >= ('cd', 100).length:
                                                    revert with 0, 50
                                                if cd[((32 * idx) + cd[68] + 36)] < s:
                                                    revert with 0, 17
                                                stor6.length = 0
                                                mem[0] = 6
                                                t = sha3(6)
                                                while sha3(6) + (6 * stor6.length) > t:
                                                    stor[t] = 0
                                                    stor1[t] = 0
                                                    stor2[t] = 0
                                                    stor3[t] = 0
                                                    address(stor4[t]) = 0
                                                    stor5[t] = 0
                                                    t = t + 6
                                                    continue 
                                                t = 0
                                                while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if t > !s:
                                                        revert with 0, 17
                                                    if t + s >= ('cd', 36).length:
                                                        revert with 0, 50
                                                    require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                    _7061 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7061] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[_7061 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[_7061 + 64] = 0
                                                    mem[_7061 + 96] = 0
                                                    mem[_7061 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7107 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    mem[_7061 + 160] = mem[_7107]
                                                    stor6.length++
                                                    mem[0] = 6
                                                    stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                    stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    uint256(stor6[stor6.length].field_512) = 0
                                                    uint256(stor6[stor6.length].field_768) = 0
                                                    stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    uint256(stor6[stor6.length].field_1280) = mem[_7061 + 160]
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7251 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _7265 = mem[_7251]
                                                    _7266 = mem[_7251 + 32]
                                                    if t >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    uint256(stor6[t].field_768) = _7266
                                                    uint256(stor6[t].field_512) = _7265
                                                    if t == -1:
                                                        revert with 0, 17
                                                    t = t + 1
                                                    continue 
                                                _7017 = mem[64]
                                                mem[64] = mem[64] + 192
                                                mem[_7017] = 0
                                                mem[_7017 + 32] = 0
                                                mem[_7017 + 64] = 0
                                                mem[_7017 + 96] = 0
                                                mem[_7017 + 128] = 0
                                                mem[_7017 + 160] = 0
                                                if var251001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < var251001:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s - var251001 < 1:
                                                        revert with 0, 17
                                                    # nil
                                                else:
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                        t = 0
                                                        continue 
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if stor1.length == address(stor6.field_0):
                                                        t = 0
                                                        u = 0
                                                        v = eth.balance(this.address) / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if eth.balance(this.address) < v:
                                                                revert with 0, 17
                                                            if v > !(eth.balance(this.address) - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (eth.balance(this.address) - v / 2)
                                                            w = v
                                                            continue 
                                                        _8422 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8422]:
                                                            revert with 0, 50
                                                        mem[_8422 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8422]:
                                                            revert with 0, 50
                                                        mem[_8422 + 64] = address(stor6.field_256)
                                                        if not mem[_8422 + 96]:
                                                            revert with 0, 50
                                                        mem[_8422 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8422 + 96]:
                                                            revert with 0, 50
                                                        mem[_8422 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8422 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8422 + 196] = 1
                                                            mem[_8422 + 228] = 128
                                                            mem[_8422 + 324] = mem[_8422]
                                                            t = 0
                                                            v = _8422 + 32
                                                            w = _8422 + 356
                                                            while t < mem[_8422]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8422 + 260] = this.address
                                                            mem[_8422 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8422 + (32 * mem[_8422]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11018 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11090 = mem[_11018]
                                                            require mem[_11018] <= test266151307()
                                                            require _11018 + mem[_11018] + 31 < _11018 + return_data.size
                                                            _11176 = mem[_11018 + mem[_11018]]
                                                            if mem[_11018 + mem[_11018]] > test266151307():
                                                                revert with 0, 65
                                                            if _11018 + ceil32(return_data.size) + ceil32(32 * mem[_11018 + mem[_11018]]) + 1 > test266151307() or ceil32(32 * mem[_11018 + mem[_11018]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11018 + ceil32(return_data.size) + ceil32(32 * mem[_11018 + mem[_11018]]) + 1
                                                            mem[_11018 + ceil32(return_data.size)] = _11176
                                                            require (32 * _11176) + _11090 + 32 <= return_data.size
                                                            v = _11018 + ceil32(return_data.size) + 32
                                                            t = _11018 + _11090 + 32
                                                            while t < (32 * _11176) + _11018 + _11090 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11176 < 1:
                                                                revert with 0, 17
                                                            if _11176 - 1 >= _11176:
                                                                revert with 0, 50
                                                            _13223 = mem[(32 * _11176 - 1) + _11018 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13223
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13360 = mem[_8422 + 96]
                                                            mem[mem[64] + 164] = mem[_8422 + 96]
                                                            t = 0
                                                            v = _8422 + 128
                                                            w = mem[64] + 196
                                                            while t < _13360:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13223, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13360) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14808 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14892 = mem[_14808]
                                                            require mem[_14808] <= test266151307()
                                                            require _14808 + mem[_14808] + 31 < _14808 + return_data.size
                                                            _14964 = mem[_14808 + mem[_14808]]
                                                            if mem[_14808 + mem[_14808]] > test266151307():
                                                                revert with 0, 65
                                                            if _14808 + ceil32(return_data.size) + ceil32(32 * mem[_14808 + mem[_14808]]) + 1 > test266151307() or ceil32(32 * mem[_14808 + mem[_14808]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14808 + ceil32(return_data.size) + ceil32(32 * mem[_14808 + mem[_14808]]) + 1
                                                            mem[_14808 + ceil32(return_data.size)] = _14964
                                                            require (32 * _14964) + _14892 + 32 <= return_data.size
                                                            t = _14808 + ceil32(return_data.size) + 32
                                                            s = _14808 + _14892 + 32
                                                            while s < (32 * _14964) + _14808 + _14892 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14964 < 1:
                                                                revert with 0, 17
                                                            if _14964 - 1 >= _14964:
                                                                revert with 0, 50
                                                            _16104 = mem[(32 * _14964 - 1) + _14808 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14964 - 1) + _14808 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14964 - 1) + _14808 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14964 - 1) + _14808 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16104 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16104 - u, address(stor6.field_0)
                                                            t = _16104 - u
                                                            continue 
                                                        if stor1.length != address(stor6.field_256):
                                                            mem[_8422 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8422 + 196] = u
                                                            mem[_8422 + 228] = 1
                                                            mem[_8422 + 260] = 160
                                                            mem[_8422 + 356] = mem[_8422]
                                                            t = 0
                                                            v = _8422 + 32
                                                            w = _8422 + 388
                                                            while t < mem[_8422]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8422 + 292] = this.address
                                                            mem[_8422 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8422 + (32 * mem[_8422]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11016 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11088 = mem[_11016]
                                                            require mem[_11016] <= test266151307()
                                                            require _11016 + mem[_11016] + 31 < _11016 + return_data.size
                                                            _11174 = mem[_11016 + mem[_11016]]
                                                            if mem[_11016 + mem[_11016]] > test266151307():
                                                                revert with 0, 65
                                                            if _11016 + ceil32(return_data.size) + ceil32(32 * mem[_11016 + mem[_11016]]) + 1 > test266151307() or ceil32(32 * mem[_11016 + mem[_11016]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11016 + ceil32(return_data.size) + ceil32(32 * mem[_11016 + mem[_11016]]) + 1
                                                            mem[_11016 + ceil32(return_data.size)] = _11174
                                                            require (32 * _11174) + _11088 + 32 <= return_data.size
                                                            v = _11016 + ceil32(return_data.size) + 32
                                                            t = _11016 + _11088 + 32
                                                            while t < (32 * _11174) + _11016 + _11088 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11174 < 1:
                                                                revert with 0, 17
                                                            if _11174 - 1 >= _11174:
                                                                revert with 0, 50
                                                            _13220 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = mem[(32 * _11174 - 1) + _11016 + ceil32(return_data.size) + 32]
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13358 = mem[_8422 + 96]
                                                            mem[mem[64] + 164] = mem[_8422 + 96]
                                                            t = 0
                                                            v = _8422 + 128
                                                            w = mem[64] + 196
                                                            while t < _13358:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13220 + 100] = this.address
                                                            mem[_13220 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13220 + (32 * _13358) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14806 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14890 = mem[_14806]
                                                            require mem[_14806] <= test266151307()
                                                            require _14806 + mem[_14806] + 31 < _14806 + return_data.size
                                                            _14962 = mem[_14806 + mem[_14806]]
                                                            if mem[_14806 + mem[_14806]] > test266151307():
                                                                revert with 0, 65
                                                            if _14806 + ceil32(return_data.size) + ceil32(32 * mem[_14806 + mem[_14806]]) + 1 > test266151307() or ceil32(32 * mem[_14806 + mem[_14806]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14806 + ceil32(return_data.size) + ceil32(32 * mem[_14806 + mem[_14806]]) + 1
                                                            mem[_14806 + ceil32(return_data.size)] = _14962
                                                            require (32 * _14962) + _14890 + 32 <= return_data.size
                                                            t = _14806 + ceil32(return_data.size) + 32
                                                            s = _14806 + _14890 + 32
                                                            while s < (32 * _14962) + _14806 + _14890 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14962 < 1:
                                                                revert with 0, 17
                                                            if _14962 - 1 >= _14962:
                                                                revert with 0, 50
                                                            _16102 = mem[(32 * _14962 - 1) + _14806 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14962 - 1) + _14806 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14962 - 1) + _14806 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14962 - 1) + _14806 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16102 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16102 - u, address(stor6.field_0)
                                                            t = _16102 - u
                                                            continue 
                                                        mem[_8422 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8422 + 196] = u
                                                        mem[_8422 + 228] = 1
                                                        mem[_8422 + 260] = 160
                                                        mem[_8422 + 356] = mem[_8422]
                                                        t = 0
                                                        v = _8422 + 32
                                                        w = _8422 + 388
                                                        while t < mem[_8422]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8422 + 292] = this.address
                                                        mem[_8422 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8422 + (32 * mem[_8422]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11017 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11089 = mem[_11017]
                                                        require mem[_11017] <= test266151307()
                                                        require _11017 + mem[_11017] + 31 < _11017 + return_data.size
                                                        _11175 = mem[_11017 + mem[_11017]]
                                                        if mem[_11017 + mem[_11017]] > test266151307():
                                                            revert with 0, 65
                                                        if _11017 + ceil32(return_data.size) + ceil32(32 * mem[_11017 + mem[_11017]]) + 1 > test266151307() or ceil32(32 * mem[_11017 + mem[_11017]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11017 + ceil32(return_data.size) + ceil32(32 * mem[_11017 + mem[_11017]]) + 1
                                                        mem[_11017 + ceil32(return_data.size)] = _11175
                                                        require (32 * _11175) + _11089 + 32 <= return_data.size
                                                        v = _11017 + ceil32(return_data.size) + 32
                                                        t = _11017 + _11089 + 32
                                                        while t < (32 * _11175) + _11017 + _11089 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11175 < 1:
                                                            revert with 0, 17
                                                        if _11175 - 1 >= _11175:
                                                            revert with 0, 50
                                                        _13221 = mem[(32 * _11175 - 1) + _11017 + ceil32(return_data.size) + 32]
                                                        _13222 = mem[64]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13359 = mem[_8422 + 96]
                                                        mem[mem[64] + 132] = mem[_8422 + 96]
                                                        t = 0
                                                        v = _8422 + 128
                                                        w = mem[64] + 164
                                                        while t < _13359:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13222 + 68] = this.address
                                                        mem[_13222 + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                           value _13221 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13222 + (32 * _13359) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14807 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14891 = mem[_14807]
                                                        require mem[_14807] <= test266151307()
                                                        require _14807 + mem[_14807] + 31 < _14807 + return_data.size
                                                        _14963 = mem[_14807 + mem[_14807]]
                                                        if mem[_14807 + mem[_14807]] > test266151307():
                                                            revert with 0, 65
                                                        if _14807 + ceil32(return_data.size) + ceil32(32 * mem[_14807 + mem[_14807]]) + 1 > test266151307() or ceil32(32 * mem[_14807 + mem[_14807]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14807 + ceil32(return_data.size) + ceil32(32 * mem[_14807 + mem[_14807]]) + 1
                                                        mem[_14807 + ceil32(return_data.size)] = _14963
                                                        require (32 * _14963) + _14891 + 32 <= return_data.size
                                                        t = _14807 + ceil32(return_data.size) + 32
                                                        s = _14807 + _14891 + 32
                                                        while s < (32 * _14963) + _14807 + _14891 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14963 < 1:
                                                            revert with 0, 17
                                                        if _14963 - 1 >= _14963:
                                                            revert with 0, 50
                                                        _16103 = mem[(32 * _14963 - 1) + _14807 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14963 - 1) + _14807 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14963 - 1) + _14807 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14963 - 1) + _14807 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16103 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16103 - u, address(stor6.field_0)
                                                        t = _16103 - u
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    staticcall address(stor6.field_0).0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8097 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    t = 0
                                                    u = 0
                                                    v = mem[_8097] / 2
                                                    w = 0
                                                    while t < stor7:
                                                        if v <= 0:
                                                            revert with 0, 'RELAY:InvalidQty'
                                                        if uint256(stor6.field_512) > !v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_768):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_512):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 18
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if mem[_8097] < v:
                                                            revert with 0, 17
                                                        if v > !(mem[_8097] - v / 2):
                                                            revert with 0, 17
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        u = v
                                                        v = v + (mem[_8097] - v / 2)
                                                        w = v
                                                        continue 
                                                    _8419 = mem[64]
                                                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                    mem[mem[64] + 96] = 2
                                                    mem[64] = mem[64] + 192
                                                    if not mem[_8419]:
                                                        revert with 0, 50
                                                    mem[_8419 + 32] = address(stor6.field_0)
                                                    if 1 >= mem[_8419]:
                                                        revert with 0, 50
                                                    mem[_8419 + 64] = address(stor6.field_256)
                                                    if not mem[_8419 + 96]:
                                                        revert with 0, 50
                                                    mem[_8419 + 128] = address(stor6.field_256)
                                                    if 1 >= mem[_8419 + 96]:
                                                        revert with 0, 50
                                                    mem[_8419 + 160] = address(stor6.field_0)
                                                    if not u:
                                                        t = 0
                                                        continue 
                                                    if stor1.length == address(stor6.field_0):
                                                        mem[_8419 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[_8419 + 196] = 1
                                                        mem[_8419 + 228] = 128
                                                        mem[_8419 + 324] = mem[_8419]
                                                        t = 0
                                                        v = _8419 + 32
                                                        w = _8419 + 356
                                                        while t < mem[_8419]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8419 + 260] = this.address
                                                        mem[_8419 + 292] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                           value u wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8419 + (32 * mem[_8419]) + -mem[64] + 352]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11015 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11087 = mem[_11015]
                                                        require mem[_11015] <= test266151307()
                                                        require _11015 + mem[_11015] + 31 < _11015 + return_data.size
                                                        _11173 = mem[_11015 + mem[_11015]]
                                                        if mem[_11015 + mem[_11015]] > test266151307():
                                                            revert with 0, 65
                                                        if _11015 + ceil32(return_data.size) + ceil32(32 * mem[_11015 + mem[_11015]]) + 1 > test266151307() or ceil32(32 * mem[_11015 + mem[_11015]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11015 + ceil32(return_data.size) + ceil32(32 * mem[_11015 + mem[_11015]]) + 1
                                                        mem[_11015 + ceil32(return_data.size)] = _11173
                                                        require (32 * _11173) + _11087 + 32 <= return_data.size
                                                        v = _11015 + ceil32(return_data.size) + 32
                                                        t = _11015 + _11087 + 32
                                                        while t < (32 * _11173) + _11015 + _11087 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11173 < 1:
                                                            revert with 0, 17
                                                        if _11173 - 1 >= _11173:
                                                            revert with 0, 50
                                                        _13217 = mem[(32 * _11173 - 1) + _11015 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13217
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13357 = mem[_8419 + 96]
                                                        mem[mem[64] + 164] = mem[_8419 + 96]
                                                        t = 0
                                                        v = _8419 + 128
                                                        w = mem[64] + 196
                                                        while t < _13357:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                             gas gas_remaining wei
                                                            args _13217, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13357) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14805 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14889 = mem[_14805]
                                                        require mem[_14805] <= test266151307()
                                                        require _14805 + mem[_14805] + 31 < _14805 + return_data.size
                                                        _14961 = mem[_14805 + mem[_14805]]
                                                        if mem[_14805 + mem[_14805]] > test266151307():
                                                            revert with 0, 65
                                                        if _14805 + ceil32(return_data.size) + ceil32(32 * mem[_14805 + mem[_14805]]) + 1 > test266151307() or ceil32(32 * mem[_14805 + mem[_14805]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14805 + ceil32(return_data.size) + ceil32(32 * mem[_14805 + mem[_14805]]) + 1
                                                        mem[_14805 + ceil32(return_data.size)] = _14961
                                                        require (32 * _14961) + _14889 + 32 <= return_data.size
                                                        t = _14805 + ceil32(return_data.size) + 32
                                                        s = _14805 + _14889 + 32
                                                        while s < (32 * _14961) + _14805 + _14889 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14961 < 1:
                                                            revert with 0, 17
                                                        if _14961 - 1 >= _14961:
                                                            revert with 0, 50
                                                        _16101 = mem[(32 * _14961 - 1) + _14805 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14961 - 1) + _14805 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14961 - 1) + _14805 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14961 - 1) + _14805 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16101 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16101 - u, address(stor6.field_0)
                                                        t = _16101 - u
                                                        continue 
                                                    if stor1.length != address(stor6.field_256):
                                                        mem[_8419 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8419 + 196] = u
                                                        mem[_8419 + 228] = 1
                                                        mem[_8419 + 260] = 160
                                                        mem[_8419 + 356] = mem[_8419]
                                                        t = 0
                                                        v = _8419 + 32
                                                        w = _8419 + 388
                                                        while t < mem[_8419]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8419 + 292] = this.address
                                                        mem[_8419 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8419 + (32 * mem[_8419]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11013 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11085 = mem[_11013]
                                                        require mem[_11013] <= test266151307()
                                                        require _11013 + mem[_11013] + 31 < _11013 + return_data.size
                                                        _11171 = mem[_11013 + mem[_11013]]
                                                        if mem[_11013 + mem[_11013]] > test266151307():
                                                            revert with 0, 65
                                                        if _11013 + ceil32(return_data.size) + ceil32(32 * mem[_11013 + mem[_11013]]) + 1 > test266151307() or ceil32(32 * mem[_11013 + mem[_11013]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11013 + ceil32(return_data.size) + ceil32(32 * mem[_11013 + mem[_11013]]) + 1
                                                        mem[_11013 + ceil32(return_data.size)] = _11171
                                                        require (32 * _11171) + _11085 + 32 <= return_data.size
                                                        v = _11013 + ceil32(return_data.size) + 32
                                                        t = _11013 + _11085 + 32
                                                        while t < (32 * _11171) + _11013 + _11085 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11171 < 1:
                                                            revert with 0, 17
                                                        if _11171 - 1 >= _11171:
                                                            revert with 0, 50
                                                        _13213 = mem[(32 * _11171 - 1) + _11013 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13213
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13355 = mem[_8419 + 96]
                                                        mem[mem[64] + 164] = mem[_8419 + 96]
                                                        t = 0
                                                        v = _8419 + 128
                                                        w = mem[64] + 196
                                                        while t < _13355:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                             gas gas_remaining wei
                                                            args _13213, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13355) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14803 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14887 = mem[_14803]
                                                        require mem[_14803] <= test266151307()
                                                        require _14803 + mem[_14803] + 31 < _14803 + return_data.size
                                                        _14959 = mem[_14803 + mem[_14803]]
                                                        if mem[_14803 + mem[_14803]] > test266151307():
                                                            revert with 0, 65
                                                        if _14803 + ceil32(return_data.size) + ceil32(32 * mem[_14803 + mem[_14803]]) + 1 > test266151307() or ceil32(32 * mem[_14803 + mem[_14803]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14803 + ceil32(return_data.size) + ceil32(32 * mem[_14803 + mem[_14803]]) + 1
                                                        mem[_14803 + ceil32(return_data.size)] = _14959
                                                        require (32 * _14959) + _14887 + 32 <= return_data.size
                                                        t = _14803 + ceil32(return_data.size) + 32
                                                        s = _14803 + _14887 + 32
                                                        while s < (32 * _14959) + _14803 + _14887 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14959 < 1:
                                                            revert with 0, 17
                                                        if _14959 - 1 >= _14959:
                                                            revert with 0, 50
                                                        _16099 = mem[(32 * _14959 - 1) + _14803 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14959 - 1) + _14803 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14959 - 1) + _14803 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14959 - 1) + _14803 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16099 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16099 - u, address(stor6.field_0)
                                                        t = _16099 - u
                                                        continue 
                                                    mem[_8419 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                    mem[_8419 + 196] = u
                                                    mem[_8419 + 228] = 1
                                                    mem[_8419 + 260] = 160
                                                    mem[_8419 + 356] = mem[_8419]
                                                    t = 0
                                                    v = _8419 + 32
                                                    w = _8419 + 388
                                                    while t < mem[_8419]:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_8419 + 292] = this.address
                                                    mem[_8419 + 324] = stor2.length
                                                    call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _8419 + (32 * mem[_8419]) + -mem[64] + 384]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _11014 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _11086 = mem[_11014]
                                                    require mem[_11014] <= test266151307()
                                                    require _11014 + mem[_11014] + 31 < _11014 + return_data.size
                                                    _11172 = mem[_11014 + mem[_11014]]
                                                    if mem[_11014 + mem[_11014]] > test266151307():
                                                        revert with 0, 65
                                                    if _11014 + ceil32(return_data.size) + ceil32(32 * mem[_11014 + mem[_11014]]) + 1 > test266151307() or ceil32(32 * mem[_11014 + mem[_11014]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _11014 + ceil32(return_data.size) + ceil32(32 * mem[_11014 + mem[_11014]]) + 1
                                                    mem[_11014 + ceil32(return_data.size)] = _11172
                                                    require (32 * _11172) + _11086 + 32 <= return_data.size
                                                    v = _11014 + ceil32(return_data.size) + 32
                                                    t = _11014 + _11086 + 32
                                                    while t < (32 * _11172) + _11014 + _11086 + 32:
                                                        mem[v] = mem[t]
                                                        v = v + 32
                                                        t = t + 32
                                                        continue 
                                                    if _11172 < 1:
                                                        revert with 0, 17
                                                    if _11172 - 1 >= _11172:
                                                        revert with 0, 50
                                                    _13215 = mem[(32 * _11172 - 1) + _11014 + ceil32(return_data.size) + 32]
                                                    _13216 = mem[64]
                                                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 1
                                                    mem[mem[64] + 36] = 128
                                                    _13356 = mem[_8419 + 96]
                                                    mem[mem[64] + 132] = mem[_8419 + 96]
                                                    t = 0
                                                    v = _8419 + 128
                                                    w = mem[64] + 164
                                                    while t < _13356:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_13216 + 68] = this.address
                                                    mem[_13216 + 100] = stor2.length
                                                    call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                       value _13215 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _13216 + (32 * _13356) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14804 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _14888 = mem[_14804]
                                                    require mem[_14804] <= test266151307()
                                                    require _14804 + mem[_14804] + 31 < _14804 + return_data.size
                                                    _14960 = mem[_14804 + mem[_14804]]
                                                    if mem[_14804 + mem[_14804]] > test266151307():
                                                        revert with 0, 65
                                                    if _14804 + ceil32(return_data.size) + ceil32(32 * mem[_14804 + mem[_14804]]) + 1 > test266151307() or ceil32(32 * mem[_14804 + mem[_14804]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _14804 + ceil32(return_data.size) + ceil32(32 * mem[_14804 + mem[_14804]]) + 1
                                                    mem[_14804 + ceil32(return_data.size)] = _14960
                                                    require (32 * _14960) + _14888 + 32 <= return_data.size
                                                    t = _14804 + ceil32(return_data.size) + 32
                                                    s = _14804 + _14888 + 32
                                                    while s < (32 * _14960) + _14804 + _14888 + 32:
                                                        mem[t] = mem[s]
                                                        t = t + 32
                                                        s = s + 32
                                                        continue 
                                                    if _14960 < 1:
                                                        revert with 0, 17
                                                    if _14960 - 1 >= _14960:
                                                        revert with 0, 50
                                                    _16100 = mem[(32 * _14960 - 1) + _14804 + ceil32(return_data.size) + 32]
                                                    if mem[(32 * _14960 - 1) + _14804 + ceil32(return_data.size) + 32] < u:
                                                        revert with 0, 17
                                                    if mem[(32 * _14960 - 1) + _14804 + ceil32(return_data.size) + 32] - u <= 0:
                                                        revert with 0, 'RELAY:NegGain'
                                                    if mem[(32 * _14960 - 1) + _14804 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                        t = 0
                                                        continue 
                                                    mem[mem[64]] = address(stor6.field_256)
                                                    mem[mem[64] + 32] = _16100 - u
                                                    emit 0x2bcd0e02: address(stor6.field_256), _16100 - u, address(stor6.field_0)
                                                    t = _16100 - u
                                                    continue 
                                    else:
                                        if stor1.length == address(stor6.field_256):
                                            mem[_1489 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                            mem[_1489 + 196] = u
                                            mem[_1489 + 228] = 1
                                            mem[_1489 + 260] = 160
                                            mem[_1489 + 356] = mem[_1489]
                                            t = 0
                                            v = _1489 + 32
                                            w = _1489 + 388
                                            while t < mem[_1489]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1489 + 292] = this.address
                                            mem[_1489 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1489 + (32 * mem[_1489]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2504 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2516 = mem[_2504]
                                            require mem[_2504] <= test266151307()
                                            require _2504 + mem[_2504] + 31 < _2504 + return_data.size
                                            _2530 = mem[_2504 + mem[_2504]]
                                            if mem[_2504 + mem[_2504]] > test266151307():
                                                revert with 0, 65
                                            if _2504 + ceil32(return_data.size) + ceil32(32 * mem[_2504 + mem[_2504]]) + 1 > test266151307() or ceil32(32 * mem[_2504 + mem[_2504]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2504 + ceil32(return_data.size) + ceil32(32 * mem[_2504 + mem[_2504]]) + 1
                                            mem[_2504 + ceil32(return_data.size)] = _2530
                                            require (32 * _2530) + _2516 + 32 <= return_data.size
                                            v = _2504 + ceil32(return_data.size) + 32
                                            t = _2504 + _2516 + 32
                                            while t < (32 * _2530) + _2504 + _2516 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2530 < 1:
                                                revert with 0, 17
                                            if _2530 - 1 >= _2530:
                                                revert with 0, 50
                                            _3451 = mem[(32 * _2530 - 1) + _2504 + ceil32(return_data.size) + 32]
                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 1
                                            mem[mem[64] + 36] = 128
                                            _3476 = mem[_1489 + 96]
                                            mem[mem[64] + 132] = mem[_1489 + 96]
                                            t = 0
                                            v = _1489 + 128
                                            w = mem[64] + 164
                                            while t < _3476:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[mem[64] + 68] = this.address
                                            mem[mem[64] + 100] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                               value _3451 wei
                                                 gas gas_remaining wei
                                                args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _3476) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4300 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4314 = mem[_4300]
                                            require mem[_4300] <= test266151307()
                                            require _4300 + mem[_4300] + 31 < _4300 + return_data.size
                                            _4326 = mem[_4300 + mem[_4300]]
                                            if mem[_4300 + mem[_4300]] > test266151307():
                                                revert with 0, 65
                                            if _4300 + ceil32(return_data.size) + ceil32(32 * mem[_4300 + mem[_4300]]) + 1 > test266151307() or ceil32(32 * mem[_4300 + mem[_4300]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4300 + ceil32(return_data.size) + ceil32(32 * mem[_4300 + mem[_4300]]) + 1
                                            mem[_4300 + ceil32(return_data.size)] = _4326
                                            require (32 * _4326) + _4314 + 32 <= return_data.size
                                            v = _4300 + ceil32(return_data.size) + 32
                                            t = _4300 + _4314 + 32
                                            while t < (32 * _4326) + _4300 + _4314 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4326 < 1:
                                                revert with 0, 17
                                            if _4326 - 1 >= _4326:
                                                revert with 0, 50
                                            _5104 = mem[(32 * _4326 - 1) + _4300 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4326 - 1) + _4300 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4326 - 1) + _4300 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4326 - 1) + _4300 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5104 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5104 - u, address(stor6.field_0)
                                                t = _5104 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7059 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7059] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7059 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7059 + 64] = 0
                                                        mem[_7059 + 96] = 0
                                                        mem[_7059 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7106 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7059 + 160] = mem[_7106]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7059 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7250 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7263 = mem[_7250]
                                                        _7264 = mem[_7250 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7264
                                                        uint256(stor6[t].field_512) = _7263
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7016 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7016] = 0
                                                    mem[_7016 + 32] = 0
                                                    mem[_7016 + 64] = 0
                                                    mem[_7016 + 96] = 0
                                                    mem[_7016 + 128] = 0
                                                    mem[_7016 + 160] = 0
                                                    if var252001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var252001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var252001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8416 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8416]:
                                                                revert with 0, 50
                                                            mem[_8416 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8416]:
                                                                revert with 0, 50
                                                            mem[_8416 + 64] = address(stor6.field_256)
                                                            if not mem[_8416 + 96]:
                                                                revert with 0, 50
                                                            mem[_8416 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8416 + 96]:
                                                                revert with 0, 50
                                                            mem[_8416 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8416 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8416 + 196] = 1
                                                                mem[_8416 + 228] = 128
                                                                mem[_8416 + 324] = mem[_8416]
                                                                t = 0
                                                                v = _8416 + 32
                                                                w = _8416 + 356
                                                                while t < mem[_8416]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8416 + 260] = this.address
                                                                mem[_8416 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8416 + (32 * mem[_8416]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11012 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11084 = mem[_11012]
                                                                require mem[_11012] <= test266151307()
                                                                require _11012 + mem[_11012] + 31 < _11012 + return_data.size
                                                                _11170 = mem[_11012 + mem[_11012]]
                                                                if mem[_11012 + mem[_11012]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11012 + ceil32(return_data.size) + ceil32(32 * mem[_11012 + mem[_11012]]) + 1 > test266151307() or ceil32(32 * mem[_11012 + mem[_11012]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11012 + ceil32(return_data.size) + ceil32(32 * mem[_11012 + mem[_11012]]) + 1
                                                                mem[_11012 + ceil32(return_data.size)] = _11170
                                                                require (32 * _11170) + _11084 + 32 <= return_data.size
                                                                v = _11012 + ceil32(return_data.size) + 32
                                                                t = _11012 + _11084 + 32
                                                                while t < (32 * _11170) + _11012 + _11084 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11170 < 1:
                                                                    revert with 0, 17
                                                                if _11170 - 1 >= _11170:
                                                                    revert with 0, 50
                                                                _13210 = mem[(32 * _11170 - 1) + _11012 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13210
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13354 = mem[_8416 + 96]
                                                                mem[mem[64] + 164] = mem[_8416 + 96]
                                                                t = 0
                                                                v = _8416 + 128
                                                                w = mem[64] + 196
                                                                while t < _13354:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                     gas gas_remaining wei
                                                                    args _13210, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13354) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14802 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14886 = mem[_14802]
                                                                require mem[_14802] <= test266151307()
                                                                require _14802 + mem[_14802] + 31 < _14802 + return_data.size
                                                                _14958 = mem[_14802 + mem[_14802]]
                                                                if mem[_14802 + mem[_14802]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14802 + ceil32(return_data.size) + ceil32(32 * mem[_14802 + mem[_14802]]) + 1 > test266151307() or ceil32(32 * mem[_14802 + mem[_14802]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14802 + ceil32(return_data.size) + ceil32(32 * mem[_14802 + mem[_14802]]) + 1
                                                                mem[_14802 + ceil32(return_data.size)] = _14958
                                                                require (32 * _14958) + _14886 + 32 <= return_data.size
                                                                t = _14802 + ceil32(return_data.size) + 32
                                                                s = _14802 + _14886 + 32
                                                                while s < (32 * _14958) + _14802 + _14886 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14958 < 1:
                                                                    revert with 0, 17
                                                                if _14958 - 1 >= _14958:
                                                                    revert with 0, 50
                                                                _16098 = mem[(32 * _14958 - 1) + _14802 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14958 - 1) + _14802 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14958 - 1) + _14802 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14958 - 1) + _14802 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16098 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16098 - u, address(stor6.field_0)
                                                                t = _16098 - u
                                                                continue 
                                                            if stor1.length != address(stor6.field_256):
                                                                mem[_8416 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[_8416 + 196] = u
                                                                mem[_8416 + 228] = 1
                                                                mem[_8416 + 260] = 160
                                                                mem[_8416 + 356] = mem[_8416]
                                                                t = 0
                                                                v = _8416 + 32
                                                                w = _8416 + 388
                                                                while t < mem[_8416]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8416 + 292] = this.address
                                                                mem[_8416 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8416 + (32 * mem[_8416]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11010 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11082 = mem[_11010]
                                                                require mem[_11010] <= test266151307()
                                                                require _11010 + mem[_11010] + 31 < _11010 + return_data.size
                                                                _11168 = mem[_11010 + mem[_11010]]
                                                                if mem[_11010 + mem[_11010]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11010 + ceil32(return_data.size) + ceil32(32 * mem[_11010 + mem[_11010]]) + 1 > test266151307() or ceil32(32 * mem[_11010 + mem[_11010]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11010 + ceil32(return_data.size) + ceil32(32 * mem[_11010 + mem[_11010]]) + 1
                                                                mem[_11010 + ceil32(return_data.size)] = _11168
                                                                require (32 * _11168) + _11082 + 32 <= return_data.size
                                                                v = _11010 + ceil32(return_data.size) + 32
                                                                t = _11010 + _11082 + 32
                                                                while t < (32 * _11168) + _11010 + _11082 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11168 < 1:
                                                                    revert with 0, 17
                                                                if _11168 - 1 >= _11168:
                                                                    revert with 0, 50
                                                                _13206 = mem[(32 * _11168 - 1) + _11010 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13206
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13352 = mem[_8416 + 96]
                                                                mem[mem[64] + 164] = mem[_8416 + 96]
                                                                t = 0
                                                                v = _8416 + 128
                                                                w = mem[64] + 196
                                                                while t < _13352:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                     gas gas_remaining wei
                                                                    args _13206, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13352) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14800 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14884 = mem[_14800]
                                                                require mem[_14800] <= test266151307()
                                                                require _14800 + mem[_14800] + 31 < _14800 + return_data.size
                                                                _14956 = mem[_14800 + mem[_14800]]
                                                                if mem[_14800 + mem[_14800]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14800 + ceil32(return_data.size) + ceil32(32 * mem[_14800 + mem[_14800]]) + 1 > test266151307() or ceil32(32 * mem[_14800 + mem[_14800]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14800 + ceil32(return_data.size) + ceil32(32 * mem[_14800 + mem[_14800]]) + 1
                                                                mem[_14800 + ceil32(return_data.size)] = _14956
                                                                require (32 * _14956) + _14884 + 32 <= return_data.size
                                                                t = _14800 + ceil32(return_data.size) + 32
                                                                s = _14800 + _14884 + 32
                                                                while s < (32 * _14956) + _14800 + _14884 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14956 < 1:
                                                                    revert with 0, 17
                                                                if _14956 - 1 >= _14956:
                                                                    revert with 0, 50
                                                                if mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                                t = mem[(32 * _14956 - 1) + _14800 + ceil32(return_data.size) + 32] - u
                                                                continue 
                                                            mem[_8416 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8416 + 196] = u
                                                            mem[_8416 + 228] = 1
                                                            mem[_8416 + 260] = 160
                                                            mem[_8416 + 356] = mem[_8416]
                                                            t = 0
                                                            v = _8416 + 32
                                                            w = _8416 + 388
                                                            while t < mem[_8416]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8416 + 292] = this.address
                                                            mem[_8416 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8416 + (32 * mem[_8416]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11011 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11083 = mem[_11011]
                                                            require mem[_11011] <= test266151307()
                                                            require _11011 + mem[_11011] + 31 < _11011 + return_data.size
                                                            _11169 = mem[_11011 + mem[_11011]]
                                                            if mem[_11011 + mem[_11011]] > test266151307():
                                                                revert with 0, 65
                                                            if _11011 + ceil32(return_data.size) + ceil32(32 * mem[_11011 + mem[_11011]]) + 1 > test266151307() or ceil32(32 * mem[_11011 + mem[_11011]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11011 + ceil32(return_data.size) + ceil32(32 * mem[_11011 + mem[_11011]]) + 1
                                                            mem[_11011 + ceil32(return_data.size)] = _11169
                                                            require (32 * _11169) + _11083 + 32 <= return_data.size
                                                            v = _11011 + ceil32(return_data.size) + 32
                                                            t = _11011 + _11083 + 32
                                                            while t < (32 * _11169) + _11011 + _11083 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11169 < 1:
                                                                revert with 0, 17
                                                            if _11169 - 1 >= _11169:
                                                                revert with 0, 50
                                                            _13208 = mem[(32 * _11169 - 1) + _11011 + ceil32(return_data.size) + 32]
                                                            _13209 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13353 = mem[_8416 + 96]
                                                            mem[mem[64] + 132] = mem[_8416 + 96]
                                                            t = 0
                                                            v = _8416 + 128
                                                            w = mem[64] + 164
                                                            while t < _13353:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13209 + 68] = this.address
                                                            mem[_13209 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13208 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13209 + (32 * _13353) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14801 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14885 = mem[_14801]
                                                            require mem[_14801] <= test266151307()
                                                            require _14801 + mem[_14801] + 31 < _14801 + return_data.size
                                                            _14957 = mem[_14801 + mem[_14801]]
                                                            if mem[_14801 + mem[_14801]] > test266151307():
                                                                revert with 0, 65
                                                            if _14801 + ceil32(return_data.size) + ceil32(32 * mem[_14801 + mem[_14801]]) + 1 > test266151307() or ceil32(32 * mem[_14801 + mem[_14801]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14801 + ceil32(return_data.size) + ceil32(32 * mem[_14801 + mem[_14801]]) + 1
                                                            mem[_14801 + ceil32(return_data.size)] = _14957
                                                            require (32 * _14957) + _14885 + 32 <= return_data.size
                                                            t = _14801 + ceil32(return_data.size) + 32
                                                            s = _14801 + _14885 + 32
                                                            while s < (32 * _14957) + _14801 + _14885 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14957 < 1:
                                                                revert with 0, 17
                                                            if _14957 - 1 >= _14957:
                                                                revert with 0, 50
                                                            _16097 = mem[(32 * _14957 - 1) + _14801 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14957 - 1) + _14801 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14957 - 1) + _14801 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14957 - 1) + _14801 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16097 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16097 - u, address(stor6.field_0)
                                                            t = _16097 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8095 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8095] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8095] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8095] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8095] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8413 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8413]:
                                                            revert with 0, 50
                                                        mem[_8413 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8413]:
                                                            revert with 0, 50
                                                        mem[_8413 + 64] = address(stor6.field_256)
                                                        if not mem[_8413 + 96]:
                                                            revert with 0, 50
                                                        mem[_8413 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8413 + 96]:
                                                            revert with 0, 50
                                                        mem[_8413 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8413 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8413 + 196] = 1
                                                            mem[_8413 + 228] = 128
                                                            mem[_8413 + 324] = mem[_8413]
                                                            t = 0
                                                            v = _8413 + 32
                                                            w = _8413 + 356
                                                            while t < mem[_8413]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8413 + 260] = this.address
                                                            mem[_8413 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8413 + (32 * mem[_8413]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11009 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11081 = mem[_11009]
                                                            require mem[_11009] <= test266151307()
                                                            require _11009 + mem[_11009] + 31 < _11009 + return_data.size
                                                            _11167 = mem[_11009 + mem[_11009]]
                                                            if mem[_11009 + mem[_11009]] > test266151307():
                                                                revert with 0, 65
                                                            if _11009 + ceil32(return_data.size) + ceil32(32 * mem[_11009 + mem[_11009]]) + 1 > test266151307() or ceil32(32 * mem[_11009 + mem[_11009]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11009 + ceil32(return_data.size) + ceil32(32 * mem[_11009 + mem[_11009]]) + 1
                                                            mem[_11009 + ceil32(return_data.size)] = _11167
                                                            require (32 * _11167) + _11081 + 32 <= return_data.size
                                                            v = _11009 + ceil32(return_data.size) + 32
                                                            t = _11009 + _11081 + 32
                                                            while t < (32 * _11167) + _11009 + _11081 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11167 < 1:
                                                                revert with 0, 17
                                                            if _11167 - 1 >= _11167:
                                                                revert with 0, 50
                                                            _13204 = mem[(32 * _11167 - 1) + _11009 + ceil32(return_data.size) + 32]
                                                            _13205 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13204
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13351 = mem[_8413 + 96]
                                                            mem[mem[64] + 164] = mem[_8413 + 96]
                                                            t = 0
                                                            v = _8413 + 128
                                                            w = mem[64] + 196
                                                            while t < _13351:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13205 + 100] = this.address
                                                            mem[_13205 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13205 + (32 * _13351) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14799 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14883 = mem[_14799]
                                                            require mem[_14799] <= test266151307()
                                                            require _14799 + mem[_14799] + 31 < _14799 + return_data.size
                                                            _14955 = mem[_14799 + mem[_14799]]
                                                            if mem[_14799 + mem[_14799]] > test266151307():
                                                                revert with 0, 65
                                                            if _14799 + ceil32(return_data.size) + ceil32(32 * mem[_14799 + mem[_14799]]) + 1 > test266151307() or ceil32(32 * mem[_14799 + mem[_14799]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14799 + ceil32(return_data.size) + ceil32(32 * mem[_14799 + mem[_14799]]) + 1
                                                            mem[_14799 + ceil32(return_data.size)] = _14955
                                                            require (32 * _14955) + _14883 + 32 <= return_data.size
                                                            t = _14799 + ceil32(return_data.size) + 32
                                                            s = _14799 + _14883 + 32
                                                            while s < (32 * _14955) + _14799 + _14883 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14955 < 1:
                                                                revert with 0, 17
                                                            if _14955 - 1 >= _14955:
                                                                revert with 0, 50
                                                            if mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                            t = mem[(32 * _14955 - 1) + _14799 + ceil32(return_data.size) + 32] - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8413 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8413 + 196] = u
                                                            mem[_8413 + 228] = 1
                                                            mem[_8413 + 260] = 160
                                                            mem[_8413 + 356] = mem[_8413]
                                                            t = 0
                                                            v = _8413 + 32
                                                            w = _8413 + 388
                                                            while t < mem[_8413]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8413 + 292] = this.address
                                                            mem[_8413 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8413 + (32 * mem[_8413]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11008 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11080 = mem[_11008]
                                                            require mem[_11008] <= test266151307()
                                                            require _11008 + mem[_11008] + 31 < _11008 + return_data.size
                                                            _11166 = mem[_11008 + mem[_11008]]
                                                            if mem[_11008 + mem[_11008]] > test266151307():
                                                                revert with 0, 65
                                                            if _11008 + ceil32(return_data.size) + ceil32(32 * mem[_11008 + mem[_11008]]) + 1 > test266151307() or ceil32(32 * mem[_11008 + mem[_11008]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11008 + ceil32(return_data.size) + ceil32(32 * mem[_11008 + mem[_11008]]) + 1
                                                            mem[_11008 + ceil32(return_data.size)] = _11166
                                                            require (32 * _11166) + _11080 + 32 <= return_data.size
                                                            v = _11008 + ceil32(return_data.size) + 32
                                                            t = _11008 + _11080 + 32
                                                            while t < (32 * _11166) + _11008 + _11080 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11166 < 1:
                                                                revert with 0, 17
                                                            if _11166 - 1 >= _11166:
                                                                revert with 0, 50
                                                            _13202 = mem[(32 * _11166 - 1) + _11008 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13350 = mem[_8413 + 96]
                                                            mem[mem[64] + 132] = mem[_8413 + 96]
                                                            t = 0
                                                            v = _8413 + 128
                                                            w = mem[64] + 164
                                                            while t < _13350:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 68] = this.address
                                                            mem[mem[64] + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                               value _13202 wei
                                                                 gas gas_remaining wei
                                                                args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13350) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14798 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14882 = mem[_14798]
                                                            require mem[_14798] <= test266151307()
                                                            require _14798 + mem[_14798] + 31 < _14798 + return_data.size
                                                            _14954 = mem[_14798 + mem[_14798]]
                                                            if mem[_14798 + mem[_14798]] > test266151307():
                                                                revert with 0, 65
                                                            if _14798 + ceil32(return_data.size) + ceil32(32 * mem[_14798 + mem[_14798]]) + 1 > test266151307() or ceil32(32 * mem[_14798 + mem[_14798]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14798 + ceil32(return_data.size) + ceil32(32 * mem[_14798 + mem[_14798]]) + 1
                                                            mem[_14798 + ceil32(return_data.size)] = _14954
                                                            require (32 * _14954) + _14882 + 32 <= return_data.size
                                                            t = _14798 + ceil32(return_data.size) + 32
                                                            s = _14798 + _14882 + 32
                                                            while s < (32 * _14954) + _14798 + _14882 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14954 < 1:
                                                                revert with 0, 17
                                                            if _14954 - 1 >= _14954:
                                                                revert with 0, 50
                                                            _16094 = mem[(32 * _14954 - 1) + _14798 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14954 - 1) + _14798 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14954 - 1) + _14798 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14954 - 1) + _14798 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16094 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16094 - u, address(stor6.field_0)
                                                            t = _16094 - u
                                                            continue 
                                                        mem[_8413 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8413 + 196] = u
                                                        mem[_8413 + 228] = 1
                                                        mem[_8413 + 260] = 160
                                                        mem[_8413 + 356] = mem[_8413]
                                                        t = 0
                                                        v = _8413 + 32
                                                        w = _8413 + 388
                                                        while t < mem[_8413]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8413 + 292] = this.address
                                                        mem[_8413 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8413 + (32 * mem[_8413]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11007 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11079 = mem[_11007]
                                                        require mem[_11007] <= test266151307()
                                                        require _11007 + mem[_11007] + 31 < _11007 + return_data.size
                                                        _11165 = mem[_11007 + mem[_11007]]
                                                        if mem[_11007 + mem[_11007]] > test266151307():
                                                            revert with 0, 65
                                                        if _11007 + ceil32(return_data.size) + ceil32(32 * mem[_11007 + mem[_11007]]) + 1 > test266151307() or ceil32(32 * mem[_11007 + mem[_11007]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11007 + ceil32(return_data.size) + ceil32(32 * mem[_11007 + mem[_11007]]) + 1
                                                        mem[_11007 + ceil32(return_data.size)] = _11165
                                                        require (32 * _11165) + _11079 + 32 <= return_data.size
                                                        v = _11007 + ceil32(return_data.size) + 32
                                                        t = _11007 + _11079 + 32
                                                        while t < (32 * _11165) + _11007 + _11079 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11165 < 1:
                                                            revert with 0, 17
                                                        if _11165 - 1 >= _11165:
                                                            revert with 0, 50
                                                        _13200 = mem[(32 * _11165 - 1) + _11007 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13200
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13349 = mem[_8413 + 96]
                                                        mem[mem[64] + 164] = mem[_8413 + 96]
                                                        t = 0
                                                        v = _8413 + 128
                                                        w = mem[64] + 196
                                                        while t < _13349:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                             gas gas_remaining wei
                                                            args _13200, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13349) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14797 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14881 = mem[_14797]
                                                        require mem[_14797] <= test266151307()
                                                        require _14797 + mem[_14797] + 31 < _14797 + return_data.size
                                                        _14953 = mem[_14797 + mem[_14797]]
                                                        if mem[_14797 + mem[_14797]] > test266151307():
                                                            revert with 0, 65
                                                        if _14797 + ceil32(return_data.size) + ceil32(32 * mem[_14797 + mem[_14797]]) + 1 > test266151307() or ceil32(32 * mem[_14797 + mem[_14797]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14797 + ceil32(return_data.size) + ceil32(32 * mem[_14797 + mem[_14797]]) + 1
                                                        mem[_14797 + ceil32(return_data.size)] = _14953
                                                        require (32 * _14953) + _14881 + 32 <= return_data.size
                                                        t = _14797 + ceil32(return_data.size) + 32
                                                        s = _14797 + _14881 + 32
                                                        while s < (32 * _14953) + _14797 + _14881 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14953 < 1:
                                                            revert with 0, 17
                                                        if _14953 - 1 >= _14953:
                                                            revert with 0, 50
                                                        _16093 = mem[(32 * _14953 - 1) + _14797 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14953 - 1) + _14797 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14953 - 1) + _14797 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14953 - 1) + _14797 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16093 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16093 - u, address(stor6.field_0)
                                                        t = _16093 - u
                                                        continue 
                                        else:
                                            mem[_1489 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[_1489 + 196] = u
                                            mem[_1489 + 228] = 1
                                            mem[_1489 + 260] = 160
                                            mem[_1489 + 356] = mem[_1489]
                                            t = 0
                                            v = _1489 + 32
                                            w = _1489 + 388
                                            while t < mem[_1489]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1489 + 292] = this.address
                                            mem[_1489 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1489 + (32 * mem[_1489]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2503 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2515 = mem[_2503]
                                            require mem[_2503] <= test266151307()
                                            require _2503 + mem[_2503] + 31 < _2503 + return_data.size
                                            _2529 = mem[_2503 + mem[_2503]]
                                            if mem[_2503 + mem[_2503]] > test266151307():
                                                revert with 0, 65
                                            if _2503 + ceil32(return_data.size) + ceil32(32 * mem[_2503 + mem[_2503]]) + 1 > test266151307() or ceil32(32 * mem[_2503 + mem[_2503]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2503 + ceil32(return_data.size) + ceil32(32 * mem[_2503 + mem[_2503]]) + 1
                                            mem[_2503 + ceil32(return_data.size)] = _2529
                                            require (32 * _2529) + _2515 + 32 <= return_data.size
                                            v = _2503 + ceil32(return_data.size) + 32
                                            t = _2503 + _2515 + 32
                                            while t < (32 * _2529) + _2503 + _2515 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2529 < 1:
                                                revert with 0, 17
                                            if _2529 - 1 >= _2529:
                                                revert with 0, 50
                                            _3449 = mem[(32 * _2529 - 1) + _2503 + ceil32(return_data.size) + 32]
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = _3449
                                            mem[mem[64] + 36] = 1
                                            mem[mem[64] + 68] = 160
                                            _3475 = mem[_1489 + 96]
                                            mem[mem[64] + 164] = mem[_1489 + 96]
                                            t = 0
                                            v = _1489 + 128
                                            w = mem[64] + 196
                                            while t < _3475:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[mem[64] + 100] = this.address
                                            mem[mem[64] + 132] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                 gas gas_remaining wei
                                                args _3449, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _3475) + 32]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4299 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4313 = mem[_4299]
                                            require mem[_4299] <= test266151307()
                                            require _4299 + mem[_4299] + 31 < _4299 + return_data.size
                                            _4325 = mem[_4299 + mem[_4299]]
                                            if mem[_4299 + mem[_4299]] > test266151307():
                                                revert with 0, 65
                                            if _4299 + ceil32(return_data.size) + ceil32(32 * mem[_4299 + mem[_4299]]) + 1 > test266151307() or ceil32(32 * mem[_4299 + mem[_4299]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4299 + ceil32(return_data.size) + ceil32(32 * mem[_4299 + mem[_4299]]) + 1
                                            mem[_4299 + ceil32(return_data.size)] = _4325
                                            require (32 * _4325) + _4313 + 32 <= return_data.size
                                            v = _4299 + ceil32(return_data.size) + 32
                                            t = _4299 + _4313 + 32
                                            while t < (32 * _4325) + _4299 + _4313 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4325 < 1:
                                                revert with 0, 17
                                            if _4325 - 1 >= _4325:
                                                revert with 0, 50
                                            _5103 = mem[(32 * _4325 - 1) + _4299 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4325 - 1) + _4299 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4325 - 1) + _4299 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4325 - 1) + _4299 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5103 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5103 - u, address(stor6.field_0)
                                                t = _5103 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7057 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7057] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7057 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7057 + 64] = 0
                                                        mem[_7057 + 96] = 0
                                                        mem[_7057 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7105 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7057 + 160] = mem[_7105]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7057 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7249 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7261 = mem[_7249]
                                                        _7262 = mem[_7249 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7262
                                                        uint256(stor6[t].field_512) = _7261
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7015 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7015] = 0
                                                    mem[_7015 + 32] = 0
                                                    mem[_7015 + 64] = 0
                                                    mem[_7015 + 96] = 0
                                                    mem[_7015 + 128] = 0
                                                    mem[_7015 + 160] = 0
                                                    if var252001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var252001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var252001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8410 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8410]:
                                                                revert with 0, 50
                                                            mem[_8410 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8410]:
                                                                revert with 0, 50
                                                            mem[_8410 + 64] = address(stor6.field_256)
                                                            if not mem[_8410 + 96]:
                                                                revert with 0, 50
                                                            mem[_8410 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8410 + 96]:
                                                                revert with 0, 50
                                                            mem[_8410 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8410 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8410 + 196] = 1
                                                                mem[_8410 + 228] = 128
                                                                mem[_8410 + 324] = mem[_8410]
                                                                t = 0
                                                                v = _8410 + 32
                                                                w = _8410 + 356
                                                                while t < mem[_8410]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8410 + 260] = this.address
                                                                mem[_8410 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8410 + (32 * mem[_8410]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11006 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11078 = mem[_11006]
                                                                require mem[_11006] <= test266151307()
                                                                require _11006 + mem[_11006] + 31 < _11006 + return_data.size
                                                                _11164 = mem[_11006 + mem[_11006]]
                                                                if mem[_11006 + mem[_11006]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11006 + ceil32(return_data.size) + ceil32(32 * mem[_11006 + mem[_11006]]) + 1 > test266151307() or ceil32(32 * mem[_11006 + mem[_11006]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11006 + ceil32(return_data.size) + ceil32(32 * mem[_11006 + mem[_11006]]) + 1
                                                                mem[_11006 + ceil32(return_data.size)] = _11164
                                                                require (32 * _11164) + _11078 + 32 <= return_data.size
                                                                v = _11006 + ceil32(return_data.size) + 32
                                                                t = _11006 + _11078 + 32
                                                                while t < (32 * _11164) + _11006 + _11078 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11164 < 1:
                                                                    revert with 0, 17
                                                                if _11164 - 1 >= _11164:
                                                                    revert with 0, 50
                                                                _13197 = mem[(32 * _11164 - 1) + _11006 + ceil32(return_data.size) + 32]
                                                                _13198 = mem[64]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13197
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13348 = mem[_8410 + 96]
                                                                mem[mem[64] + 164] = mem[_8410 + 96]
                                                                t = 0
                                                                v = _8410 + 128
                                                                w = mem[64] + 196
                                                                while t < _13348:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_13198 + 100] = this.address
                                                                mem[_13198 + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13198 + (32 * _13348) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14796 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14880 = mem[_14796]
                                                                require mem[_14796] <= test266151307()
                                                                require _14796 + mem[_14796] + 31 < _14796 + return_data.size
                                                                _14952 = mem[_14796 + mem[_14796]]
                                                                if mem[_14796 + mem[_14796]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14796 + ceil32(return_data.size) + ceil32(32 * mem[_14796 + mem[_14796]]) + 1 > test266151307() or ceil32(32 * mem[_14796 + mem[_14796]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14796 + ceil32(return_data.size) + ceil32(32 * mem[_14796 + mem[_14796]]) + 1
                                                                mem[_14796 + ceil32(return_data.size)] = _14952
                                                                require (32 * _14952) + _14880 + 32 <= return_data.size
                                                                t = _14796 + ceil32(return_data.size) + 32
                                                                s = _14796 + _14880 + 32
                                                                while s < (32 * _14952) + _14796 + _14880 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14952 < 1:
                                                                    revert with 0, 17
                                                                if _14952 - 1 >= _14952:
                                                                    revert with 0, 50
                                                                _16092 = mem[(32 * _14952 - 1) + _14796 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14952 - 1) + _14796 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14952 - 1) + _14796 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14952 - 1) + _14796 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16092 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16092 - u, address(stor6.field_0)
                                                                t = _16092 - u
                                                                continue 
                                                            if stor1.length == address(stor6.field_256):
                                                                mem[_8410 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[_8410 + 196] = u
                                                                mem[_8410 + 228] = 1
                                                                mem[_8410 + 260] = 160
                                                                mem[_8410 + 356] = mem[_8410]
                                                                t = 0
                                                                v = _8410 + 32
                                                                w = _8410 + 388
                                                                while t < mem[_8410]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8410 + 292] = this.address
                                                                mem[_8410 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8410 + (32 * mem[_8410]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11005 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11077 = mem[_11005]
                                                                require mem[_11005] <= test266151307()
                                                                require _11005 + mem[_11005] + 31 < _11005 + return_data.size
                                                                _11163 = mem[_11005 + mem[_11005]]
                                                                if mem[_11005 + mem[_11005]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11005 + ceil32(return_data.size) + ceil32(32 * mem[_11005 + mem[_11005]]) + 1 > test266151307() or ceil32(32 * mem[_11005 + mem[_11005]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11005 + ceil32(return_data.size) + ceil32(32 * mem[_11005 + mem[_11005]]) + 1
                                                                mem[_11005 + ceil32(return_data.size)] = _11163
                                                                require (32 * _11163) + _11077 + 32 <= return_data.size
                                                                v = _11005 + ceil32(return_data.size) + 32
                                                                t = _11005 + _11077 + 32
                                                                while t < (32 * _11163) + _11005 + _11077 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11163 < 1:
                                                                    revert with 0, 17
                                                                if _11163 - 1 >= _11163:
                                                                    revert with 0, 50
                                                                _13195 = mem[(32 * _11163 - 1) + _11005 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 1
                                                                mem[mem[64] + 36] = 128
                                                                _13347 = mem[_8410 + 96]
                                                                mem[mem[64] + 132] = mem[_8410 + 96]
                                                                t = 0
                                                                v = _8410 + 128
                                                                w = mem[64] + 164
                                                                while t < _13347:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 68] = this.address
                                                                mem[mem[64] + 100] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                                   value _13195 wei
                                                                     gas gas_remaining wei
                                                                    args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13347) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14795 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14879 = mem[_14795]
                                                                require mem[_14795] <= test266151307()
                                                                require _14795 + mem[_14795] + 31 < _14795 + return_data.size
                                                                _14951 = mem[_14795 + mem[_14795]]
                                                                if mem[_14795 + mem[_14795]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14795 + ceil32(return_data.size) + ceil32(32 * mem[_14795 + mem[_14795]]) + 1 > test266151307() or ceil32(32 * mem[_14795 + mem[_14795]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14795 + ceil32(return_data.size) + ceil32(32 * mem[_14795 + mem[_14795]]) + 1
                                                                mem[_14795 + ceil32(return_data.size)] = _14951
                                                                require (32 * _14951) + _14879 + 32 <= return_data.size
                                                                t = _14795 + ceil32(return_data.size) + 32
                                                                s = _14795 + _14879 + 32
                                                                while s < (32 * _14951) + _14795 + _14879 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14951 < 1:
                                                                    revert with 0, 17
                                                                if _14951 - 1 >= _14951:
                                                                    revert with 0, 50
                                                                _16091 = mem[(32 * _14951 - 1) + _14795 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14951 - 1) + _14795 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14951 - 1) + _14795 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14951 - 1) + _14795 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16091 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16091 - u, address(stor6.field_0)
                                                                t = _16091 - u
                                                                continue 
                                                            mem[_8410 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8410 + 196] = u
                                                            mem[_8410 + 228] = 1
                                                            mem[_8410 + 260] = 160
                                                            mem[_8410 + 356] = mem[_8410]
                                                            t = 0
                                                            v = _8410 + 32
                                                            w = _8410 + 388
                                                            while t < mem[_8410]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8410 + 292] = this.address
                                                            mem[_8410 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8410 + (32 * mem[_8410]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11004 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11076 = mem[_11004]
                                                            require mem[_11004] <= test266151307()
                                                            require _11004 + mem[_11004] + 31 < _11004 + return_data.size
                                                            _11162 = mem[_11004 + mem[_11004]]
                                                            if mem[_11004 + mem[_11004]] > test266151307():
                                                                revert with 0, 65
                                                            if _11004 + ceil32(return_data.size) + ceil32(32 * mem[_11004 + mem[_11004]]) + 1 > test266151307() or ceil32(32 * mem[_11004 + mem[_11004]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11004 + ceil32(return_data.size) + ceil32(32 * mem[_11004 + mem[_11004]]) + 1
                                                            mem[_11004 + ceil32(return_data.size)] = _11162
                                                            require (32 * _11162) + _11076 + 32 <= return_data.size
                                                            v = _11004 + ceil32(return_data.size) + 32
                                                            t = _11004 + _11076 + 32
                                                            while t < (32 * _11162) + _11004 + _11076 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11162 < 1:
                                                                revert with 0, 17
                                                            if _11162 - 1 >= _11162:
                                                                revert with 0, 50
                                                            _13193 = mem[(32 * _11162 - 1) + _11004 + ceil32(return_data.size) + 32]
                                                            _13194 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13193
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13346 = mem[_8410 + 96]
                                                            mem[mem[64] + 164] = mem[_8410 + 96]
                                                            t = 0
                                                            v = _8410 + 128
                                                            w = mem[64] + 196
                                                            while t < _13346:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13194 + 100] = this.address
                                                            mem[_13194 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13194 + (32 * _13346) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14794 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14878 = mem[_14794]
                                                            require mem[_14794] <= test266151307()
                                                            require _14794 + mem[_14794] + 31 < _14794 + return_data.size
                                                            _14950 = mem[_14794 + mem[_14794]]
                                                            if mem[_14794 + mem[_14794]] > test266151307():
                                                                revert with 0, 65
                                                            if _14794 + ceil32(return_data.size) + ceil32(32 * mem[_14794 + mem[_14794]]) + 1 > test266151307() or ceil32(32 * mem[_14794 + mem[_14794]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14794 + ceil32(return_data.size) + ceil32(32 * mem[_14794 + mem[_14794]]) + 1
                                                            mem[_14794 + ceil32(return_data.size)] = _14950
                                                            require (32 * _14950) + _14878 + 32 <= return_data.size
                                                            t = _14794 + ceil32(return_data.size) + 32
                                                            s = _14794 + _14878 + 32
                                                            while s < (32 * _14950) + _14794 + _14878 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14950 < 1:
                                                                revert with 0, 17
                                                            if _14950 - 1 >= _14950:
                                                                revert with 0, 50
                                                            if mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                            t = mem[(32 * _14950 - 1) + _14794 + ceil32(return_data.size) + 32] - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8093 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8093] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8093] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8093] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8093] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8407 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8407]:
                                                            revert with 0, 50
                                                        mem[_8407 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8407]:
                                                            revert with 0, 50
                                                        mem[_8407 + 64] = address(stor6.field_256)
                                                        if not mem[_8407 + 96]:
                                                            revert with 0, 50
                                                        mem[_8407 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8407 + 96]:
                                                            revert with 0, 50
                                                        mem[_8407 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8407 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8407 + 196] = 1
                                                            mem[_8407 + 228] = 128
                                                            mem[_8407 + 324] = mem[_8407]
                                                            t = 0
                                                            v = _8407 + 32
                                                            w = _8407 + 356
                                                            while t < mem[_8407]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8407 + 260] = this.address
                                                            mem[_8407 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8407 + (32 * mem[_8407]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11003 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11075 = mem[_11003]
                                                            require mem[_11003] <= test266151307()
                                                            require _11003 + mem[_11003] + 31 < _11003 + return_data.size
                                                            _11161 = mem[_11003 + mem[_11003]]
                                                            if mem[_11003 + mem[_11003]] > test266151307():
                                                                revert with 0, 65
                                                            if _11003 + ceil32(return_data.size) + ceil32(32 * mem[_11003 + mem[_11003]]) + 1 > test266151307() or ceil32(32 * mem[_11003 + mem[_11003]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11003 + ceil32(return_data.size) + ceil32(32 * mem[_11003 + mem[_11003]]) + 1
                                                            mem[_11003 + ceil32(return_data.size)] = _11161
                                                            require (32 * _11161) + _11075 + 32 <= return_data.size
                                                            v = _11003 + ceil32(return_data.size) + 32
                                                            t = _11003 + _11075 + 32
                                                            while t < (32 * _11161) + _11003 + _11075 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11161 < 1:
                                                                revert with 0, 17
                                                            if _11161 - 1 >= _11161:
                                                                revert with 0, 50
                                                            _13191 = mem[(32 * _11161 - 1) + _11003 + ceil32(return_data.size) + 32]
                                                            _13192 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13191
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13345 = mem[_8407 + 96]
                                                            mem[mem[64] + 164] = mem[_8407 + 96]
                                                            t = 0
                                                            v = _8407 + 128
                                                            w = mem[64] + 196
                                                            while t < _13345:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13192 + 100] = this.address
                                                            mem[_13192 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13192 + (32 * _13345) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14793 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14877 = mem[_14793]
                                                            require mem[_14793] <= test266151307()
                                                            require _14793 + mem[_14793] + 31 < _14793 + return_data.size
                                                            _14949 = mem[_14793 + mem[_14793]]
                                                            if mem[_14793 + mem[_14793]] > test266151307():
                                                                revert with 0, 65
                                                            if _14793 + ceil32(return_data.size) + ceil32(32 * mem[_14793 + mem[_14793]]) + 1 > test266151307() or ceil32(32 * mem[_14793 + mem[_14793]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14793 + ceil32(return_data.size) + ceil32(32 * mem[_14793 + mem[_14793]]) + 1
                                                            mem[_14793 + ceil32(return_data.size)] = _14949
                                                            require (32 * _14949) + _14877 + 32 <= return_data.size
                                                            t = _14793 + ceil32(return_data.size) + 32
                                                            s = _14793 + _14877 + 32
                                                            while s < (32 * _14949) + _14793 + _14877 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14949 < 1:
                                                                revert with 0, 17
                                                            if _14949 - 1 >= _14949:
                                                                revert with 0, 50
                                                            _16089 = mem[(32 * _14949 - 1) + _14793 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14949 - 1) + _14793 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14949 - 1) + _14793 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14949 - 1) + _14793 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16089 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16089 - u, address(stor6.field_0)
                                                            t = _16089 - u
                                                            continue 
                                                        if stor1.length != address(stor6.field_256):
                                                            mem[_8407 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8407 + 196] = u
                                                            mem[_8407 + 228] = 1
                                                            mem[_8407 + 260] = 160
                                                            mem[_8407 + 356] = mem[_8407]
                                                            t = 0
                                                            v = _8407 + 32
                                                            w = _8407 + 388
                                                            while t < mem[_8407]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8407 + 292] = this.address
                                                            mem[_8407 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8407 + (32 * mem[_8407]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11001 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11073 = mem[_11001]
                                                            require mem[_11001] <= test266151307()
                                                            require _11001 + mem[_11001] + 31 < _11001 + return_data.size
                                                            _11159 = mem[_11001 + mem[_11001]]
                                                            if mem[_11001 + mem[_11001]] > test266151307():
                                                                revert with 0, 65
                                                            if _11001 + ceil32(return_data.size) + ceil32(32 * mem[_11001 + mem[_11001]]) + 1 > test266151307() or ceil32(32 * mem[_11001 + mem[_11001]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11001 + ceil32(return_data.size) + ceil32(32 * mem[_11001 + mem[_11001]]) + 1
                                                            mem[_11001 + ceil32(return_data.size)] = _11159
                                                            require (32 * _11159) + _11073 + 32 <= return_data.size
                                                            v = _11001 + ceil32(return_data.size) + 32
                                                            t = _11001 + _11073 + 32
                                                            while t < (32 * _11159) + _11001 + _11073 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11159 < 1:
                                                                revert with 0, 17
                                                            if _11159 - 1 >= _11159:
                                                                revert with 0, 50
                                                            _13187 = mem[(32 * _11159 - 1) + _11001 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13187
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13343 = mem[_8407 + 96]
                                                            mem[mem[64] + 164] = mem[_8407 + 96]
                                                            t = 0
                                                            v = _8407 + 128
                                                            w = mem[64] + 196
                                                            while t < _13343:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                 gas gas_remaining wei
                                                                args _13187, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13343) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14791 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14875 = mem[_14791]
                                                            require mem[_14791] <= test266151307()
                                                            require _14791 + mem[_14791] + 31 < _14791 + return_data.size
                                                            _14947 = mem[_14791 + mem[_14791]]
                                                            if mem[_14791 + mem[_14791]] > test266151307():
                                                                revert with 0, 65
                                                            if _14791 + ceil32(return_data.size) + ceil32(32 * mem[_14791 + mem[_14791]]) + 1 > test266151307() or ceil32(32 * mem[_14791 + mem[_14791]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14791 + ceil32(return_data.size) + ceil32(32 * mem[_14791 + mem[_14791]]) + 1
                                                            mem[_14791 + ceil32(return_data.size)] = _14947
                                                            require (32 * _14947) + _14875 + 32 <= return_data.size
                                                            t = _14791 + ceil32(return_data.size) + 32
                                                            s = _14791 + _14875 + 32
                                                            while s < (32 * _14947) + _14791 + _14875 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14947 < 1:
                                                                revert with 0, 17
                                                            if _14947 - 1 >= _14947:
                                                                revert with 0, 50
                                                            _16087 = mem[(32 * _14947 - 1) + _14791 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14947 - 1) + _14791 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14947 - 1) + _14791 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14947 - 1) + _14791 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16087 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16087 - u, address(stor6.field_0)
                                                            t = _16087 - u
                                                            continue 
                                                        mem[_8407 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8407 + 196] = u
                                                        mem[_8407 + 228] = 1
                                                        mem[_8407 + 260] = 160
                                                        mem[_8407 + 356] = mem[_8407]
                                                        t = 0
                                                        v = _8407 + 32
                                                        w = _8407 + 388
                                                        while t < mem[_8407]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8407 + 292] = this.address
                                                        mem[_8407 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8407 + (32 * mem[_8407]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11002 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11074 = mem[_11002]
                                                        require mem[_11002] <= test266151307()
                                                        require _11002 + mem[_11002] + 31 < _11002 + return_data.size
                                                        _11160 = mem[_11002 + mem[_11002]]
                                                        if mem[_11002 + mem[_11002]] > test266151307():
                                                            revert with 0, 65
                                                        if _11002 + ceil32(return_data.size) + ceil32(32 * mem[_11002 + mem[_11002]]) + 1 > test266151307() or ceil32(32 * mem[_11002 + mem[_11002]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11002 + ceil32(return_data.size) + ceil32(32 * mem[_11002 + mem[_11002]]) + 1
                                                        mem[_11002 + ceil32(return_data.size)] = _11160
                                                        require (32 * _11160) + _11074 + 32 <= return_data.size
                                                        v = _11002 + ceil32(return_data.size) + 32
                                                        t = _11002 + _11074 + 32
                                                        while t < (32 * _11160) + _11002 + _11074 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11160 < 1:
                                                            revert with 0, 17
                                                        if _11160 - 1 >= _11160:
                                                            revert with 0, 50
                                                        _13189 = mem[(32 * _11160 - 1) + _11002 + ceil32(return_data.size) + 32]
                                                        _13190 = mem[64]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13344 = mem[_8407 + 96]
                                                        mem[mem[64] + 132] = mem[_8407 + 96]
                                                        t = 0
                                                        v = _8407 + 128
                                                        w = mem[64] + 164
                                                        while t < _13344:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13190 + 68] = this.address
                                                        mem[_13190 + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                           value _13189 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13190 + (32 * _13344) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14792 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14876 = mem[_14792]
                                                        require mem[_14792] <= test266151307()
                                                        require _14792 + mem[_14792] + 31 < _14792 + return_data.size
                                                        _14948 = mem[_14792 + mem[_14792]]
                                                        if mem[_14792 + mem[_14792]] > test266151307():
                                                            revert with 0, 65
                                                        if _14792 + ceil32(return_data.size) + ceil32(32 * mem[_14792 + mem[_14792]]) + 1 > test266151307() or ceil32(32 * mem[_14792 + mem[_14792]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14792 + ceil32(return_data.size) + ceil32(32 * mem[_14792 + mem[_14792]]) + 1
                                                        mem[_14792 + ceil32(return_data.size)] = _14948
                                                        require (32 * _14948) + _14876 + 32 <= return_data.size
                                                        t = _14792 + ceil32(return_data.size) + 32
                                                        s = _14792 + _14876 + 32
                                                        while s < (32 * _14948) + _14792 + _14876 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14948 < 1:
                                                            revert with 0, 17
                                                        if _14948 - 1 >= _14948:
                                                            revert with 0, 50
                                                        _16088 = mem[(32 * _14948 - 1) + _14792 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14948 - 1) + _14792 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14948 - 1) + _14792 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14948 - 1) + _14792 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16088 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16088 - u, address(stor6.field_0)
                                                        t = _16088 - u
                                                        continue 
                        if idx >= ('cd', 68).length:
                            revert with 0, 50
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = cd[((32 * idx) + cd[68] + 36)]
                        continue 
                else:
                    mem[0] = msg.sender
                    mem[32] = 4
                    if uint256(stor4[msg.sender]) != 1:
                        revert with 0, 'Caller is neither owner nor accessor'
                    if cd[132] < block.timestamp:
                        revert with 0, 'PancakeRouter: EXPIRED'
                    idx = 0
                    s = 0
                    while idx < ('cd', 68).length:
                        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if 2 * idx >= ('cd', 4).length:
                            revert with 0, 50
                        require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                        if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                            revert with 0, 17
                        if 1 > !(2 * idx):
                            revert with 0, 17
                        if (2 * idx) + 1 >= ('cd', 4).length:
                            revert with 0, 50
                        require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                        if idx >= ('cd', 68).length:
                            revert with 0, 50
                        if idx >= ('cd', 100).length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] < s:
                            revert with 0, 17
                        stor6.length = 0
                        mem[0] = 6
                        t = sha3(6)
                        while sha3(6) + (6 * stor6.length) > t:
                            stor[t] = 0
                            stor1[t] = 0
                            stor2[t] = 0
                            stor3[t] = 0
                            address(stor4[t]) = 0
                            stor5[t] = 0
                            t = t + 6
                            continue 
                        t = 0
                        while t < cd[((32 * idx) + cd[68] + 36)] - s:
                            if t > !s:
                                revert with 0, 17
                            if t + s >= ('cd', 36).length:
                                revert with 0, 50
                            require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                            _1277 = mem[64]
                            mem[64] = mem[64] + 192
                            mem[_1277] = address(cd[((64 * idx) + cd[4] + 36)])
                            mem[_1277 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[_1277 + 64] = 0
                            mem[_1277 + 96] = 0
                            mem[_1277 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                            mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                            mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1284 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            mem[_1277 + 160] = mem[_1284]
                            stor6.length++
                            mem[0] = 6
                            stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                            stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            uint256(stor6[stor6.length].field_512) = 0
                            uint256(stor6[stor6.length].field_768) = 0
                            stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                            uint256(stor6[stor6.length].field_1280) = mem[_1277 + 160]
                            mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                    gas gas_remaining wei
                                   args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                            mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _1308 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 64
                            _1311 = mem[_1308]
                            _1312 = mem[_1308 + 32]
                            if t >= stor6.length:
                                revert with 0, 50
                            mem[0] = 6
                            uint256(stor6[t].field_768) = _1312
                            uint256(stor6[t].field_512) = _1311
                            if t == -1:
                                revert with 0, 17
                            t = t + 1
                            continue 
                        _1252 = mem[64]
                        mem[64] = mem[64] + 192
                        mem[_1252] = 0
                        mem[_1252 + 32] = 0
                        mem[_1252 + 64] = 0
                        mem[_1252 + 96] = 0
                        mem[_1252 + 128] = 0
                        mem[_1252 + 160] = 0
                        t = 0
                        while t < cd[((32 * idx) + cd[68] + 36)] - s:
                            if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                revert with 0, 17
                            if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                revert with 0, 17
                            if var146002 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                if t == -1:
                                    revert with 0, 17
                                t = t + 1
                                continue 
                            if var148001 < stor6.length:
                                if 1 > !var152002:
                                    revert with 0, 17
                                u = var154003 + 1
                                v = var154006
                                w = var154007
                                x = var154009
                                while u < stor6.length:
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if uint256(stor6[w].field_2304) and uint256(stor6[u].field_1280) > -1 / uint256(stor6[w].field_2304):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280) and v > -1 / uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280):
                                        revert with 0, 17
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    if uint256(stor6[w].field_768) and uint256(stor6[w].field_1280) > -1 / uint256(stor6[w].field_768):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_768) * uint256(stor6[w].field_1280) and uint256(stor6[w].field_2048) > -1 / uint256(stor6[w].field_768) * uint256(stor6[w].field_1280):
                                        revert with 0, 17
                                    if uint256(stor6[w].field_768) * uint256(stor6[w].field_1280) * uint256(stor6[w].field_2048) >= uint256(stor6[w].field_2304) * uint256(stor6[u].field_1280) * v:
                                        if w == -1:
                                            revert with 0, 17
                                        if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                            revert with 0, 17
                                        if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                            revert with 0, 17
                                        if w + 1 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                            if t == -1:
                                                revert with 0, 17
                                            t = t + 1
                                            continue 
                                        if w + 1 >= stor6.length:
                                            revert with 0, 50
                                        mem[0] = 6
                                        if 1 > !(w + 1):
                                            revert with 0, 17
                                        u = w + 2
                                        v = uint256(stor6[w].field_2048)
                                        w = w + 1
                                        x = x
                                        continue 
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    _14048 = mem[64]
                                    mem[64] = mem[64] + 192
                                    mem[_14048] = stor6[w].field_0
                                    mem[_14048 + 32] = stor6[w].field_256
                                    mem[_14048 + 64] = uint256(stor6[w].field_512)
                                    mem[_14048 + 96] = uint256(stor6[w].field_768)
                                    mem[_14048 + 128] = stor6[w].field_1024
                                    mem[_14048 + 160] = uint256(stor6[w].field_1280)
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    if w >= stor6.length:
                                        revert with 0, 50
                                    stor6[w].field_0 = stor6[w].field_1536
                                    stor6[w].field_256 = stor6[w].field_1792
                                    uint256(stor6[w].field_512) = uint256(stor6[w].field_2048)
                                    uint256(stor6[w].field_768) = uint256(stor6[w].field_2304)
                                    stor6[w].field_1024 = stor6[w].field_2560
                                    uint256(stor6[w].field_1280) = uint256(stor6[w].field_2816)
                                    if 1 > !w:
                                        revert with 0, 17
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    stor6[w].field_1536 = stor6[w].field_0
                                    stor6[w].field_1792 = stor6[w].field_256
                                    uint256(stor6[w].field_2048) = uint256(stor6[w].field_512)
                                    uint256(stor6[w].field_2304) = uint256(stor6[w].field_768)
                                    stor6[w].field_2560 = stor6[w].field_1024
                                    uint256(stor6[w].field_2816) = uint256(stor6[w].field_1280)
                                    if w == -1:
                                        revert with 0, 17
                                    if cd[((32 * idx) + cd[68] + 36)] - s < t:
                                        revert with 0, 17
                                    if cd[((32 * idx) + cd[68] + 36)] - s - t < 1:
                                        revert with 0, 17
                                    if w + 1 >= cd[((32 * idx) + cd[68] + 36)] + -s + -t - 1:
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        continue 
                                    if w + 1 >= stor6.length:
                                        revert with 0, 50
                                    mem[0] = 6
                                    if 1 > !(w + 1):
                                        revert with 0, 17
                                    u = w + 2
                                    v = uint256(stor6[w].field_2048)
                                    w = w + 1
                                    x = _14048
                                    continue 
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                            revert with 0, 17
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                            revert with 0, 17
                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                            revert with 0, 17
                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                            revert with 0, 50
                        if 0 >= stor6.length:
                            revert with 0, 50
                        mem[0] = 6
                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                            revert with 0, 17
                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                            if 0 >= stor6.length:
                                revert with 0, 50
                            if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                revert with 0, 17
                            if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                revert with 0, 50
                            mem[0] = 6
                            if stor1.length == address(stor6.field_0):
                                t = 0
                                u = 0
                                v = eth.balance(this.address) / 2
                                w = 0
                                while t < stor7:
                                    if v <= 0:
                                        revert with 0, 'RELAY:InvalidQty'
                                    if uint256(stor6.field_512) > !v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if not uint256(stor6.field_768):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                        revert with 0, 17
                                    if not uint256(stor6.field_512):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                        revert with 0, 17
                                    if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 18
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if eth.balance(this.address) < v:
                                        revert with 0, 17
                                    if v > !(eth.balance(this.address) - v / 2):
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    t = t + 1
                                    u = v
                                    v = v + (eth.balance(this.address) - v / 2)
                                    w = v
                                    continue 
                                _1498 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                mem[mem[64] + 96] = 2
                                mem[64] = mem[64] + 192
                                if not mem[_1498]:
                                    revert with 0, 50
                                mem[_1498 + 32] = address(stor6.field_0)
                                if 1 >= mem[_1498]:
                                    revert with 0, 50
                                mem[_1498 + 64] = address(stor6.field_256)
                                if not mem[_1498 + 96]:
                                    revert with 0, 50
                                mem[_1498 + 128] = address(stor6.field_256)
                                if 1 >= mem[_1498 + 96]:
                                    revert with 0, 50
                                mem[_1498 + 160] = address(stor6.field_0)
                                if u:
                                    if stor1.length == address(stor6.field_0):
                                        mem[_1498 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                        mem[_1498 + 196] = 1
                                        mem[_1498 + 228] = 128
                                        mem[_1498 + 324] = mem[_1498]
                                        t = 0
                                        v = _1498 + 32
                                        w = _1498 + 356
                                        while t < mem[_1498]:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_1498 + 260] = this.address
                                        mem[_1498 + 292] = stor2.length
                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                           value u wei
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _1498 + (32 * mem[_1498]) + -mem[64] + 352]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2514 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2526 = mem[_2514]
                                        require mem[_2514] <= test266151307()
                                        require _2514 + mem[_2514] + 31 < _2514 + return_data.size
                                        _2540 = mem[_2514 + mem[_2514]]
                                        if mem[_2514 + mem[_2514]] > test266151307():
                                            revert with 0, 65
                                        if _2514 + ceil32(return_data.size) + ceil32(32 * mem[_2514 + mem[_2514]]) + 1 > test266151307() or ceil32(32 * mem[_2514 + mem[_2514]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _2514 + ceil32(return_data.size) + ceil32(32 * mem[_2514 + mem[_2514]]) + 1
                                        mem[_2514 + ceil32(return_data.size)] = _2540
                                        require (32 * _2540) + _2526 + 32 <= return_data.size
                                        v = _2514 + ceil32(return_data.size) + 32
                                        t = _2514 + _2526 + 32
                                        while t < (32 * _2540) + _2514 + _2526 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _2540 < 1:
                                            revert with 0, 17
                                        if _2540 - 1 >= _2540:
                                            revert with 0, 50
                                        _3472 = mem[(32 * _2540 - 1) + _2514 + ceil32(return_data.size) + 32]
                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = _3472
                                        mem[mem[64] + 36] = 1
                                        mem[mem[64] + 68] = 160
                                        _3486 = mem[_1498 + 96]
                                        mem[mem[64] + 164] = mem[_1498 + 96]
                                        t = 0
                                        v = _1498 + 128
                                        w = mem[64] + 196
                                        while t < _3486:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[mem[64] + 100] = this.address
                                        mem[mem[64] + 132] = stor2.length
                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                             gas gas_remaining wei
                                            args _3472, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _3486) + 32]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4310 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _4324 = mem[_4310]
                                        require mem[_4310] <= test266151307()
                                        require _4310 + mem[_4310] + 31 < _4310 + return_data.size
                                        _4336 = mem[_4310 + mem[_4310]]
                                        if mem[_4310 + mem[_4310]] > test266151307():
                                            revert with 0, 65
                                        if _4310 + ceil32(return_data.size) + ceil32(32 * mem[_4310 + mem[_4310]]) + 1 > test266151307() or ceil32(32 * mem[_4310 + mem[_4310]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _4310 + ceil32(return_data.size) + ceil32(32 * mem[_4310 + mem[_4310]]) + 1
                                        mem[_4310 + ceil32(return_data.size)] = _4336
                                        require (32 * _4336) + _4324 + 32 <= return_data.size
                                        v = _4310 + ceil32(return_data.size) + 32
                                        t = _4310 + _4324 + 32
                                        while t < (32 * _4336) + _4310 + _4324 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _4336 < 1:
                                            revert with 0, 17
                                        if _4336 - 1 >= _4336:
                                            revert with 0, 50
                                        _5114 = mem[(32 * _4336 - 1) + _4310 + ceil32(return_data.size) + 32]
                                        if mem[(32 * _4336 - 1) + _4310 + ceil32(return_data.size) + 32] < u:
                                            revert with 0, 17
                                        if mem[(32 * _4336 - 1) + _4310 + ceil32(return_data.size) + 32] - u <= 0:
                                            revert with 0, 'RELAY:NegGain'
                                        if mem[(32 * _4336 - 1) + _4310 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                            mem[mem[64]] = address(stor6.field_256)
                                            mem[mem[64] + 32] = _5114 - u
                                            emit 0x2bcd0e02: address(stor6.field_256), _5114 - u, address(stor6.field_0)
                                            t = _5114 - u
                                            while t:
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 2 * idx >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 1 > !(2 * idx):
                                                    revert with 0, 17
                                                if (2 * idx) + 1 >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                if idx >= ('cd', 68).length:
                                                    revert with 0, 50
                                                if idx >= ('cd', 100).length:
                                                    revert with 0, 50
                                                if cd[((32 * idx) + cd[68] + 36)] < s:
                                                    revert with 0, 17
                                                stor6.length = 0
                                                mem[0] = 6
                                                t = sha3(6)
                                                while sha3(6) + (6 * stor6.length) > t:
                                                    stor[t] = 0
                                                    stor1[t] = 0
                                                    stor2[t] = 0
                                                    stor3[t] = 0
                                                    address(stor4[t]) = 0
                                                    stor5[t] = 0
                                                    t = t + 6
                                                    continue 
                                                t = 0
                                                while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if t > !s:
                                                        revert with 0, 17
                                                    if t + s >= ('cd', 36).length:
                                                        revert with 0, 50
                                                    require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                    _7079 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7079] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[_7079 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[_7079 + 64] = 0
                                                    mem[_7079 + 96] = 0
                                                    mem[_7079 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7116 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    mem[_7079 + 160] = mem[_7116]
                                                    stor6.length++
                                                    mem[0] = 6
                                                    stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                    stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    uint256(stor6[stor6.length].field_512) = 0
                                                    uint256(stor6[stor6.length].field_768) = 0
                                                    stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    uint256(stor6[stor6.length].field_1280) = mem[_7079 + 160]
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7260 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _7284 = mem[_7260]
                                                    _7285 = mem[_7260 + 32]
                                                    if t >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    uint256(stor6[t].field_768) = _7285
                                                    uint256(stor6[t].field_512) = _7284
                                                    if t == -1:
                                                        revert with 0, 17
                                                    t = t + 1
                                                    continue 
                                                _7027 = mem[64]
                                                mem[64] = mem[64] + 192
                                                mem[_7027] = 0
                                                mem[_7027 + 32] = 0
                                                mem[_7027 + 64] = 0
                                                mem[_7027 + 96] = 0
                                                mem[_7027 + 128] = 0
                                                mem[_7027 + 160] = 0
                                                if var248001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < var248001:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s - var248001 < 1:
                                                        revert with 0, 17
                                                    # nil
                                                else:
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                        t = 0
                                                        continue 
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if stor1.length == address(stor6.field_0):
                                                        t = 0
                                                        u = 0
                                                        v = eth.balance(this.address) / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if eth.balance(this.address) < v:
                                                                revert with 0, 17
                                                            if v > !(eth.balance(this.address) - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (eth.balance(this.address) - v / 2)
                                                            w = v
                                                            continue 
                                                        _8476 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8476]:
                                                            revert with 0, 50
                                                        mem[_8476 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8476]:
                                                            revert with 0, 50
                                                        mem[_8476 + 64] = address(stor6.field_256)
                                                        if not mem[_8476 + 96]:
                                                            revert with 0, 50
                                                        mem[_8476 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8476 + 96]:
                                                            revert with 0, 50
                                                        mem[_8476 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8476 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8476 + 196] = 1
                                                            mem[_8476 + 228] = 128
                                                            mem[_8476 + 324] = mem[_8476]
                                                            t = 0
                                                            v = _8476 + 32
                                                            w = _8476 + 356
                                                            while t < mem[_8476]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8476 + 260] = this.address
                                                            mem[_8476 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8476 + (32 * mem[_8476]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11072 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11145 = mem[_11072]
                                                            require mem[_11072] <= test266151307()
                                                            require _11072 + mem[_11072] + 31 < _11072 + return_data.size
                                                            _11230 = mem[_11072 + mem[_11072]]
                                                            if mem[_11072 + mem[_11072]] > test266151307():
                                                                revert with 0, 65
                                                            if _11072 + ceil32(return_data.size) + ceil32(32 * mem[_11072 + mem[_11072]]) + 1 > test266151307() or ceil32(32 * mem[_11072 + mem[_11072]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11072 + ceil32(return_data.size) + ceil32(32 * mem[_11072 + mem[_11072]]) + 1
                                                            mem[_11072 + ceil32(return_data.size)] = _11230
                                                            require (32 * _11230) + _11145 + 32 <= return_data.size
                                                            v = _11072 + ceil32(return_data.size) + 32
                                                            t = _11072 + _11145 + 32
                                                            while t < (32 * _11230) + _11072 + _11145 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11230 < 1:
                                                                revert with 0, 17
                                                            if _11230 - 1 >= _11230:
                                                                revert with 0, 50
                                                            _13340 = mem[(32 * _11230 - 1) + _11072 + ceil32(return_data.size) + 32]
                                                            _13341 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13340
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13414 = mem[_8476 + 96]
                                                            mem[mem[64] + 164] = mem[_8476 + 96]
                                                            t = 0
                                                            v = _8476 + 128
                                                            w = mem[64] + 196
                                                            while t < _13414:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13341 + 100] = this.address
                                                            mem[_13341 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13341 + (32 * _13414) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14862 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14946 = mem[_14862]
                                                            require mem[_14862] <= test266151307()
                                                            require _14862 + mem[_14862] + 31 < _14862 + return_data.size
                                                            _15018 = mem[_14862 + mem[_14862]]
                                                            if mem[_14862 + mem[_14862]] > test266151307():
                                                                revert with 0, 65
                                                            if _14862 + ceil32(return_data.size) + ceil32(32 * mem[_14862 + mem[_14862]]) + 1 > test266151307() or ceil32(32 * mem[_14862 + mem[_14862]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14862 + ceil32(return_data.size) + ceil32(32 * mem[_14862 + mem[_14862]]) + 1
                                                            mem[_14862 + ceil32(return_data.size)] = _15018
                                                            require (32 * _15018) + _14946 + 32 <= return_data.size
                                                            t = _14862 + ceil32(return_data.size) + 32
                                                            s = _14862 + _14946 + 32
                                                            while s < (32 * _15018) + _14862 + _14946 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15018 < 1:
                                                                revert with 0, 17
                                                            if _15018 - 1 >= _15018:
                                                                revert with 0, 50
                                                            _16158 = mem[(32 * _15018 - 1) + _14862 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15018 - 1) + _14862 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15018 - 1) + _14862 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15018 - 1) + _14862 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16158 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16158 - u, address(stor6.field_0)
                                                            t = _16158 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8476 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8476 + 196] = u
                                                            mem[_8476 + 228] = 1
                                                            mem[_8476 + 260] = 160
                                                            mem[_8476 + 356] = mem[_8476]
                                                            t = 0
                                                            v = _8476 + 32
                                                            w = _8476 + 388
                                                            while t < mem[_8476]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8476 + 292] = this.address
                                                            mem[_8476 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8476 + (32 * mem[_8476]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11071 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11144 = mem[_11071]
                                                            require mem[_11071] <= test266151307()
                                                            require _11071 + mem[_11071] + 31 < _11071 + return_data.size
                                                            _11229 = mem[_11071 + mem[_11071]]
                                                            if mem[_11071 + mem[_11071]] > test266151307():
                                                                revert with 0, 65
                                                            if _11071 + ceil32(return_data.size) + ceil32(32 * mem[_11071 + mem[_11071]]) + 1 > test266151307() or ceil32(32 * mem[_11071 + mem[_11071]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11071 + ceil32(return_data.size) + ceil32(32 * mem[_11071 + mem[_11071]]) + 1
                                                            mem[_11071 + ceil32(return_data.size)] = _11229
                                                            require (32 * _11229) + _11144 + 32 <= return_data.size
                                                            v = _11071 + ceil32(return_data.size) + 32
                                                            t = _11071 + _11144 + 32
                                                            while t < (32 * _11229) + _11071 + _11144 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11229 < 1:
                                                                revert with 0, 17
                                                            if _11229 - 1 >= _11229:
                                                                revert with 0, 50
                                                            _13338 = mem[(32 * _11229 - 1) + _11071 + ceil32(return_data.size) + 32]
                                                            _13339 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13413 = mem[_8476 + 96]
                                                            mem[mem[64] + 132] = mem[_8476 + 96]
                                                            t = 0
                                                            v = _8476 + 128
                                                            w = mem[64] + 164
                                                            while t < _13413:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13339 + 68] = this.address
                                                            mem[_13339 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13338 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13339 + (32 * _13413) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14861 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14945 = mem[_14861]
                                                            require mem[_14861] <= test266151307()
                                                            require _14861 + mem[_14861] + 31 < _14861 + return_data.size
                                                            _15017 = mem[_14861 + mem[_14861]]
                                                            if mem[_14861 + mem[_14861]] > test266151307():
                                                                revert with 0, 65
                                                            if _14861 + ceil32(return_data.size) + ceil32(32 * mem[_14861 + mem[_14861]]) + 1 > test266151307() or ceil32(32 * mem[_14861 + mem[_14861]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14861 + ceil32(return_data.size) + ceil32(32 * mem[_14861 + mem[_14861]]) + 1
                                                            mem[_14861 + ceil32(return_data.size)] = _15017
                                                            require (32 * _15017) + _14945 + 32 <= return_data.size
                                                            t = _14861 + ceil32(return_data.size) + 32
                                                            s = _14861 + _14945 + 32
                                                            while s < (32 * _15017) + _14861 + _14945 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15017 < 1:
                                                                revert with 0, 17
                                                            if _15017 - 1 >= _15017:
                                                                revert with 0, 50
                                                            _16157 = mem[(32 * _15017 - 1) + _14861 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15017 - 1) + _14861 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15017 - 1) + _14861 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15017 - 1) + _14861 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16157 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16157 - u, address(stor6.field_0)
                                                            t = _16157 - u
                                                            continue 
                                                        mem[_8476 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8476 + 196] = u
                                                        mem[_8476 + 228] = 1
                                                        mem[_8476 + 260] = 160
                                                        mem[_8476 + 356] = mem[_8476]
                                                        t = 0
                                                        v = _8476 + 32
                                                        w = _8476 + 388
                                                        while t < mem[_8476]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8476 + 292] = this.address
                                                        mem[_8476 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8476 + (32 * mem[_8476]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11070 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11143 = mem[_11070]
                                                        require mem[_11070] <= test266151307()
                                                        require _11070 + mem[_11070] + 31 < _11070 + return_data.size
                                                        _11228 = mem[_11070 + mem[_11070]]
                                                        if mem[_11070 + mem[_11070]] > test266151307():
                                                            revert with 0, 65
                                                        if _11070 + ceil32(return_data.size) + ceil32(32 * mem[_11070 + mem[_11070]]) + 1 > test266151307() or ceil32(32 * mem[_11070 + mem[_11070]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11070 + ceil32(return_data.size) + ceil32(32 * mem[_11070 + mem[_11070]]) + 1
                                                        mem[_11070 + ceil32(return_data.size)] = _11228
                                                        require (32 * _11228) + _11143 + 32 <= return_data.size
                                                        v = _11070 + ceil32(return_data.size) + 32
                                                        t = _11070 + _11143 + 32
                                                        while t < (32 * _11228) + _11070 + _11143 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11228 < 1:
                                                            revert with 0, 17
                                                        if _11228 - 1 >= _11228:
                                                            revert with 0, 50
                                                        _13336 = mem[(32 * _11228 - 1) + _11070 + ceil32(return_data.size) + 32]
                                                        _13337 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13336
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13412 = mem[_8476 + 96]
                                                        mem[mem[64] + 164] = mem[_8476 + 96]
                                                        t = 0
                                                        v = _8476 + 128
                                                        w = mem[64] + 196
                                                        while t < _13412:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13337 + 100] = this.address
                                                        mem[_13337 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13337 + (32 * _13412) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14860 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14944 = mem[_14860]
                                                        require mem[_14860] <= test266151307()
                                                        require _14860 + mem[_14860] + 31 < _14860 + return_data.size
                                                        _15016 = mem[_14860 + mem[_14860]]
                                                        if mem[_14860 + mem[_14860]] > test266151307():
                                                            revert with 0, 65
                                                        if _14860 + ceil32(return_data.size) + ceil32(32 * mem[_14860 + mem[_14860]]) + 1 > test266151307() or ceil32(32 * mem[_14860 + mem[_14860]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14860 + ceil32(return_data.size) + ceil32(32 * mem[_14860 + mem[_14860]]) + 1
                                                        mem[_14860 + ceil32(return_data.size)] = _15016
                                                        require (32 * _15016) + _14944 + 32 <= return_data.size
                                                        t = _14860 + ceil32(return_data.size) + 32
                                                        s = _14860 + _14944 + 32
                                                        while s < (32 * _15016) + _14860 + _14944 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _15016 < 1:
                                                            revert with 0, 17
                                                        if _15016 - 1 >= _15016:
                                                            revert with 0, 50
                                                        _16156 = mem[(32 * _15016 - 1) + _14860 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _15016 - 1) + _14860 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _15016 - 1) + _14860 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _15016 - 1) + _14860 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16156 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16156 - u, address(stor6.field_0)
                                                        t = _16156 - u
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    staticcall address(stor6.field_0).0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8115 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    t = 0
                                                    u = 0
                                                    v = mem[_8115] / 2
                                                    w = 0
                                                    while t < stor7:
                                                        if v <= 0:
                                                            revert with 0, 'RELAY:InvalidQty'
                                                        if uint256(stor6.field_512) > !v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_768):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_512):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 18
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if mem[_8115] < v:
                                                            revert with 0, 17
                                                        if v > !(mem[_8115] - v / 2):
                                                            revert with 0, 17
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        u = v
                                                        v = v + (mem[_8115] - v / 2)
                                                        w = v
                                                        continue 
                                                    _8473 = mem[64]
                                                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                    mem[mem[64] + 96] = 2
                                                    mem[64] = mem[64] + 192
                                                    if not mem[_8473]:
                                                        revert with 0, 50
                                                    mem[_8473 + 32] = address(stor6.field_0)
                                                    if 1 >= mem[_8473]:
                                                        revert with 0, 50
                                                    mem[_8473 + 64] = address(stor6.field_256)
                                                    if not mem[_8473 + 96]:
                                                        revert with 0, 50
                                                    mem[_8473 + 128] = address(stor6.field_256)
                                                    if 1 >= mem[_8473 + 96]:
                                                        revert with 0, 50
                                                    mem[_8473 + 160] = address(stor6.field_0)
                                                    if not u:
                                                        t = 0
                                                        continue 
                                                    if stor1.length == address(stor6.field_0):
                                                        mem[_8473 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[_8473 + 196] = 1
                                                        mem[_8473 + 228] = 128
                                                        mem[_8473 + 324] = mem[_8473]
                                                        t = 0
                                                        v = _8473 + 32
                                                        w = _8473 + 356
                                                        while t < mem[_8473]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8473 + 260] = this.address
                                                        mem[_8473 + 292] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                           value u wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8473 + (32 * mem[_8473]) + -mem[64] + 352]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11069 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11142 = mem[_11069]
                                                        require mem[_11069] <= test266151307()
                                                        require _11069 + mem[_11069] + 31 < _11069 + return_data.size
                                                        _11227 = mem[_11069 + mem[_11069]]
                                                        if mem[_11069 + mem[_11069]] > test266151307():
                                                            revert with 0, 65
                                                        if _11069 + ceil32(return_data.size) + ceil32(32 * mem[_11069 + mem[_11069]]) + 1 > test266151307() or ceil32(32 * mem[_11069 + mem[_11069]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11069 + ceil32(return_data.size) + ceil32(32 * mem[_11069 + mem[_11069]]) + 1
                                                        mem[_11069 + ceil32(return_data.size)] = _11227
                                                        require (32 * _11227) + _11142 + 32 <= return_data.size
                                                        v = _11069 + ceil32(return_data.size) + 32
                                                        t = _11069 + _11142 + 32
                                                        while t < (32 * _11227) + _11069 + _11142 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11227 < 1:
                                                            revert with 0, 17
                                                        if _11227 - 1 >= _11227:
                                                            revert with 0, 50
                                                        _13334 = mem[(32 * _11227 - 1) + _11069 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13334
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13411 = mem[_8473 + 96]
                                                        mem[mem[64] + 164] = mem[_8473 + 96]
                                                        t = 0
                                                        v = _8473 + 128
                                                        w = mem[64] + 196
                                                        while t < _13411:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                             gas gas_remaining wei
                                                            args _13334, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13411) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14859 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14943 = mem[_14859]
                                                        require mem[_14859] <= test266151307()
                                                        require _14859 + mem[_14859] + 31 < _14859 + return_data.size
                                                        _15015 = mem[_14859 + mem[_14859]]
                                                        if mem[_14859 + mem[_14859]] > test266151307():
                                                            revert with 0, 65
                                                        if _14859 + ceil32(return_data.size) + ceil32(32 * mem[_14859 + mem[_14859]]) + 1 > test266151307() or ceil32(32 * mem[_14859 + mem[_14859]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14859 + ceil32(return_data.size) + ceil32(32 * mem[_14859 + mem[_14859]]) + 1
                                                        mem[_14859 + ceil32(return_data.size)] = _15015
                                                        require (32 * _15015) + _14943 + 32 <= return_data.size
                                                        t = _14859 + ceil32(return_data.size) + 32
                                                        s = _14859 + _14943 + 32
                                                        while s < (32 * _15015) + _14859 + _14943 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _15015 < 1:
                                                            revert with 0, 17
                                                        if _15015 - 1 >= _15015:
                                                            revert with 0, 50
                                                        if mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                        t = mem[(32 * _15015 - 1) + _14859 + ceil32(return_data.size) + 32] - u
                                                        continue 
                                                    if stor1.length == address(stor6.field_256):
                                                        mem[_8473 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8473 + 196] = u
                                                        mem[_8473 + 228] = 1
                                                        mem[_8473 + 260] = 160
                                                        mem[_8473 + 356] = mem[_8473]
                                                        t = 0
                                                        v = _8473 + 32
                                                        w = _8473 + 388
                                                        while t < mem[_8473]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8473 + 292] = this.address
                                                        mem[_8473 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8473 + (32 * mem[_8473]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11068 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11141 = mem[_11068]
                                                        require mem[_11068] <= test266151307()
                                                        require _11068 + mem[_11068] + 31 < _11068 + return_data.size
                                                        _11226 = mem[_11068 + mem[_11068]]
                                                        if mem[_11068 + mem[_11068]] > test266151307():
                                                            revert with 0, 65
                                                        if _11068 + ceil32(return_data.size) + ceil32(32 * mem[_11068 + mem[_11068]]) + 1 > test266151307() or ceil32(32 * mem[_11068 + mem[_11068]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11068 + ceil32(return_data.size) + ceil32(32 * mem[_11068 + mem[_11068]]) + 1
                                                        mem[_11068 + ceil32(return_data.size)] = _11226
                                                        require (32 * _11226) + _11141 + 32 <= return_data.size
                                                        v = _11068 + ceil32(return_data.size) + 32
                                                        t = _11068 + _11141 + 32
                                                        while t < (32 * _11226) + _11068 + _11141 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11226 < 1:
                                                            revert with 0, 17
                                                        if _11226 - 1 >= _11226:
                                                            revert with 0, 50
                                                        _13332 = mem[(32 * _11226 - 1) + _11068 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13410 = mem[_8473 + 96]
                                                        mem[mem[64] + 132] = mem[_8473 + 96]
                                                        t = 0
                                                        v = _8473 + 128
                                                        w = mem[64] + 164
                                                        while t < _13410:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 68] = this.address
                                                        mem[mem[64] + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                           value _13332 wei
                                                             gas gas_remaining wei
                                                            args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13410) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14858 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14942 = mem[_14858]
                                                        require mem[_14858] <= test266151307()
                                                        require _14858 + mem[_14858] + 31 < _14858 + return_data.size
                                                        _15014 = mem[_14858 + mem[_14858]]
                                                        if mem[_14858 + mem[_14858]] > test266151307():
                                                            revert with 0, 65
                                                        if _14858 + ceil32(return_data.size) + ceil32(32 * mem[_14858 + mem[_14858]]) + 1 > test266151307() or ceil32(32 * mem[_14858 + mem[_14858]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14858 + ceil32(return_data.size) + ceil32(32 * mem[_14858 + mem[_14858]]) + 1
                                                        mem[_14858 + ceil32(return_data.size)] = _15014
                                                        require (32 * _15014) + _14942 + 32 <= return_data.size
                                                        t = _14858 + ceil32(return_data.size) + 32
                                                        s = _14858 + _14942 + 32
                                                        while s < (32 * _15014) + _14858 + _14942 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _15014 < 1:
                                                            revert with 0, 17
                                                        if _15014 - 1 >= _15014:
                                                            revert with 0, 50
                                                        _16154 = mem[(32 * _15014 - 1) + _14858 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _15014 - 1) + _14858 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _15014 - 1) + _14858 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _15014 - 1) + _14858 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16154 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16154 - u, address(stor6.field_0)
                                                        t = _16154 - u
                                                        continue 
                                                    mem[_8473 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[_8473 + 196] = u
                                                    mem[_8473 + 228] = 1
                                                    mem[_8473 + 260] = 160
                                                    mem[_8473 + 356] = mem[_8473]
                                                    t = 0
                                                    v = _8473 + 32
                                                    w = _8473 + 388
                                                    while t < mem[_8473]:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_8473 + 292] = this.address
                                                    mem[_8473 + 324] = stor2.length
                                                    call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _8473 + (32 * mem[_8473]) + -mem[64] + 384]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _11067 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _11140 = mem[_11067]
                                                    require mem[_11067] <= test266151307()
                                                    require _11067 + mem[_11067] + 31 < _11067 + return_data.size
                                                    _11225 = mem[_11067 + mem[_11067]]
                                                    if mem[_11067 + mem[_11067]] > test266151307():
                                                        revert with 0, 65
                                                    if _11067 + ceil32(return_data.size) + ceil32(32 * mem[_11067 + mem[_11067]]) + 1 > test266151307() or ceil32(32 * mem[_11067 + mem[_11067]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _11067 + ceil32(return_data.size) + ceil32(32 * mem[_11067 + mem[_11067]]) + 1
                                                    mem[_11067 + ceil32(return_data.size)] = _11225
                                                    require (32 * _11225) + _11140 + 32 <= return_data.size
                                                    v = _11067 + ceil32(return_data.size) + 32
                                                    t = _11067 + _11140 + 32
                                                    while t < (32 * _11225) + _11067 + _11140 + 32:
                                                        mem[v] = mem[t]
                                                        v = v + 32
                                                        t = t + 32
                                                        continue 
                                                    if _11225 < 1:
                                                        revert with 0, 17
                                                    if _11225 - 1 >= _11225:
                                                        revert with 0, 50
                                                    _13330 = mem[(32 * _11225 - 1) + _11067 + ceil32(return_data.size) + 32]
                                                    _13331 = mem[64]
                                                    mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = _13330
                                                    mem[mem[64] + 36] = 1
                                                    mem[mem[64] + 68] = 160
                                                    _13409 = mem[_8473 + 96]
                                                    mem[mem[64] + 164] = mem[_8473 + 96]
                                                    t = 0
                                                    v = _8473 + 128
                                                    w = mem[64] + 196
                                                    while t < _13409:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_13331 + 100] = this.address
                                                    mem[_13331 + 132] = stor2.length
                                                    call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _13331 + (32 * _13409) + -mem[64] + 192]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14857 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _14941 = mem[_14857]
                                                    require mem[_14857] <= test266151307()
                                                    require _14857 + mem[_14857] + 31 < _14857 + return_data.size
                                                    _15013 = mem[_14857 + mem[_14857]]
                                                    if mem[_14857 + mem[_14857]] > test266151307():
                                                        revert with 0, 65
                                                    if _14857 + ceil32(return_data.size) + ceil32(32 * mem[_14857 + mem[_14857]]) + 1 > test266151307() or ceil32(32 * mem[_14857 + mem[_14857]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _14857 + ceil32(return_data.size) + ceil32(32 * mem[_14857 + mem[_14857]]) + 1
                                                    mem[_14857 + ceil32(return_data.size)] = _15013
                                                    require (32 * _15013) + _14941 + 32 <= return_data.size
                                                    t = _14857 + ceil32(return_data.size) + 32
                                                    s = _14857 + _14941 + 32
                                                    while s < (32 * _15013) + _14857 + _14941 + 32:
                                                        mem[t] = mem[s]
                                                        t = t + 32
                                                        s = s + 32
                                                        continue 
                                                    if _15013 < 1:
                                                        revert with 0, 17
                                                    if _15013 - 1 >= _15013:
                                                        revert with 0, 50
                                                    _16153 = mem[(32 * _15013 - 1) + _14857 + ceil32(return_data.size) + 32]
                                                    if mem[(32 * _15013 - 1) + _14857 + ceil32(return_data.size) + 32] < u:
                                                        revert with 0, 17
                                                    if mem[(32 * _15013 - 1) + _14857 + ceil32(return_data.size) + 32] - u <= 0:
                                                        revert with 0, 'RELAY:NegGain'
                                                    if mem[(32 * _15013 - 1) + _14857 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                        t = 0
                                                        continue 
                                                    mem[mem[64]] = address(stor6.field_256)
                                                    mem[mem[64] + 32] = _16153 - u
                                                    emit 0x2bcd0e02: address(stor6.field_256), _16153 - u, address(stor6.field_0)
                                                    t = _16153 - u
                                                    continue 
                                    else:
                                        if stor1.length == address(stor6.field_256):
                                            mem[_1498 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                            mem[_1498 + 196] = u
                                            mem[_1498 + 228] = 1
                                            mem[_1498 + 260] = 160
                                            mem[_1498 + 356] = mem[_1498]
                                            t = 0
                                            v = _1498 + 32
                                            w = _1498 + 388
                                            while t < mem[_1498]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1498 + 292] = this.address
                                            mem[_1498 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1498 + (32 * mem[_1498]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2513 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2525 = mem[_2513]
                                            require mem[_2513] <= test266151307()
                                            require _2513 + mem[_2513] + 31 < _2513 + return_data.size
                                            _2539 = mem[_2513 + mem[_2513]]
                                            if mem[_2513 + mem[_2513]] > test266151307():
                                                revert with 0, 65
                                            if _2513 + ceil32(return_data.size) + ceil32(32 * mem[_2513 + mem[_2513]]) + 1 > test266151307() or ceil32(32 * mem[_2513 + mem[_2513]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2513 + ceil32(return_data.size) + ceil32(32 * mem[_2513 + mem[_2513]]) + 1
                                            mem[_2513 + ceil32(return_data.size)] = _2539
                                            require (32 * _2539) + _2525 + 32 <= return_data.size
                                            v = _2513 + ceil32(return_data.size) + 32
                                            t = _2513 + _2525 + 32
                                            while t < (32 * _2539) + _2513 + _2525 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2539 < 1:
                                                revert with 0, 17
                                            if _2539 - 1 >= _2539:
                                                revert with 0, 50
                                            _3470 = mem[(32 * _2539 - 1) + _2513 + ceil32(return_data.size) + 32]
                                            _3471 = mem[64]
                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 1
                                            mem[mem[64] + 36] = 128
                                            _3485 = mem[_1498 + 96]
                                            mem[mem[64] + 132] = mem[_1498 + 96]
                                            t = 0
                                            v = _1498 + 128
                                            w = mem[64] + 164
                                            while t < _3485:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_3471 + 68] = this.address
                                            mem[_3471 + 100] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                               value _3470 wei
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3471 + (32 * _3485) + -mem[64] + 160]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4309 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4323 = mem[_4309]
                                            require mem[_4309] <= test266151307()
                                            require _4309 + mem[_4309] + 31 < _4309 + return_data.size
                                            _4335 = mem[_4309 + mem[_4309]]
                                            if mem[_4309 + mem[_4309]] > test266151307():
                                                revert with 0, 65
                                            if _4309 + ceil32(return_data.size) + ceil32(32 * mem[_4309 + mem[_4309]]) + 1 > test266151307() or ceil32(32 * mem[_4309 + mem[_4309]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4309 + ceil32(return_data.size) + ceil32(32 * mem[_4309 + mem[_4309]]) + 1
                                            mem[_4309 + ceil32(return_data.size)] = _4335
                                            require (32 * _4335) + _4323 + 32 <= return_data.size
                                            v = _4309 + ceil32(return_data.size) + 32
                                            t = _4309 + _4323 + 32
                                            while t < (32 * _4335) + _4309 + _4323 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4335 < 1:
                                                revert with 0, 17
                                            if _4335 - 1 >= _4335:
                                                revert with 0, 50
                                            _5113 = mem[(32 * _4335 - 1) + _4309 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4335 - 1) + _4309 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4335 - 1) + _4309 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4335 - 1) + _4309 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5113 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5113 - u, address(stor6.field_0)
                                                t = _5113 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7077 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7077] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7077 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7077 + 64] = 0
                                                        mem[_7077 + 96] = 0
                                                        mem[_7077 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7115 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7077 + 160] = mem[_7115]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7077 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7259 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7282 = mem[_7259]
                                                        _7283 = mem[_7259 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7283
                                                        uint256(stor6[t].field_512) = _7282
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7026 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7026] = 0
                                                    mem[_7026 + 32] = 0
                                                    mem[_7026 + 64] = 0
                                                    mem[_7026 + 96] = 0
                                                    mem[_7026 + 128] = 0
                                                    mem[_7026 + 160] = 0
                                                    if var249001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var249001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var249001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8470 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8470]:
                                                                revert with 0, 50
                                                            mem[_8470 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8470]:
                                                                revert with 0, 50
                                                            mem[_8470 + 64] = address(stor6.field_256)
                                                            if not mem[_8470 + 96]:
                                                                revert with 0, 50
                                                            mem[_8470 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8470 + 96]:
                                                                revert with 0, 50
                                                            mem[_8470 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8470 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8470 + 196] = 1
                                                                mem[_8470 + 228] = 128
                                                                mem[_8470 + 324] = mem[_8470]
                                                                t = 0
                                                                v = _8470 + 32
                                                                w = _8470 + 356
                                                                while t < mem[_8470]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8470 + 260] = this.address
                                                                mem[_8470 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8470 + (32 * mem[_8470]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11066 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11139 = mem[_11066]
                                                                require mem[_11066] <= test266151307()
                                                                require _11066 + mem[_11066] + 31 < _11066 + return_data.size
                                                                _11224 = mem[_11066 + mem[_11066]]
                                                                if mem[_11066 + mem[_11066]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11066 + ceil32(return_data.size) + ceil32(32 * mem[_11066 + mem[_11066]]) + 1 > test266151307() or ceil32(32 * mem[_11066 + mem[_11066]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11066 + ceil32(return_data.size) + ceil32(32 * mem[_11066 + mem[_11066]]) + 1
                                                                mem[_11066 + ceil32(return_data.size)] = _11224
                                                                require (32 * _11224) + _11139 + 32 <= return_data.size
                                                                v = _11066 + ceil32(return_data.size) + 32
                                                                t = _11066 + _11139 + 32
                                                                while t < (32 * _11224) + _11066 + _11139 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11224 < 1:
                                                                    revert with 0, 17
                                                                if _11224 - 1 >= _11224:
                                                                    revert with 0, 50
                                                                _13327 = mem[(32 * _11224 - 1) + _11066 + ceil32(return_data.size) + 32]
                                                                _13328 = mem[64]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13327
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13408 = mem[_8470 + 96]
                                                                mem[mem[64] + 164] = mem[_8470 + 96]
                                                                t = 0
                                                                v = _8470 + 128
                                                                w = mem[64] + 196
                                                                while t < _13408:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_13328 + 100] = this.address
                                                                mem[_13328 + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13328 + (32 * _13408) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14856 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14940 = mem[_14856]
                                                                require mem[_14856] <= test266151307()
                                                                require _14856 + mem[_14856] + 31 < _14856 + return_data.size
                                                                _15012 = mem[_14856 + mem[_14856]]
                                                                if mem[_14856 + mem[_14856]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14856 + ceil32(return_data.size) + ceil32(32 * mem[_14856 + mem[_14856]]) + 1 > test266151307() or ceil32(32 * mem[_14856 + mem[_14856]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14856 + ceil32(return_data.size) + ceil32(32 * mem[_14856 + mem[_14856]]) + 1
                                                                mem[_14856 + ceil32(return_data.size)] = _15012
                                                                require (32 * _15012) + _14940 + 32 <= return_data.size
                                                                t = _14856 + ceil32(return_data.size) + 32
                                                                s = _14856 + _14940 + 32
                                                                while s < (32 * _15012) + _14856 + _14940 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _15012 < 1:
                                                                    revert with 0, 17
                                                                if _15012 - 1 >= _15012:
                                                                    revert with 0, 50
                                                                _16152 = mem[(32 * _15012 - 1) + _14856 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _15012 - 1) + _14856 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _15012 - 1) + _14856 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _15012 - 1) + _14856 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16152 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16152 - u, address(stor6.field_0)
                                                                t = _16152 - u
                                                                continue 
                                                            if stor1.length == address(stor6.field_256):
                                                                mem[_8470 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[_8470 + 196] = u
                                                                mem[_8470 + 228] = 1
                                                                mem[_8470 + 260] = 160
                                                                mem[_8470 + 356] = mem[_8470]
                                                                t = 0
                                                                v = _8470 + 32
                                                                w = _8470 + 388
                                                                while t < mem[_8470]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8470 + 292] = this.address
                                                                mem[_8470 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8470 + (32 * mem[_8470]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11065 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11138 = mem[_11065]
                                                                require mem[_11065] <= test266151307()
                                                                require _11065 + mem[_11065] + 31 < _11065 + return_data.size
                                                                _11223 = mem[_11065 + mem[_11065]]
                                                                if mem[_11065 + mem[_11065]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11065 + ceil32(return_data.size) + ceil32(32 * mem[_11065 + mem[_11065]]) + 1 > test266151307() or ceil32(32 * mem[_11065 + mem[_11065]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11065 + ceil32(return_data.size) + ceil32(32 * mem[_11065 + mem[_11065]]) + 1
                                                                mem[_11065 + ceil32(return_data.size)] = _11223
                                                                require (32 * _11223) + _11138 + 32 <= return_data.size
                                                                v = _11065 + ceil32(return_data.size) + 32
                                                                t = _11065 + _11138 + 32
                                                                while t < (32 * _11223) + _11065 + _11138 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11223 < 1:
                                                                    revert with 0, 17
                                                                if _11223 - 1 >= _11223:
                                                                    revert with 0, 50
                                                                _13325 = mem[(32 * _11223 - 1) + _11065 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 1
                                                                mem[mem[64] + 36] = 128
                                                                _13407 = mem[_8470 + 96]
                                                                mem[mem[64] + 132] = mem[_8470 + 96]
                                                                t = 0
                                                                v = _8470 + 128
                                                                w = mem[64] + 164
                                                                while t < _13407:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 68] = this.address
                                                                mem[mem[64] + 100] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                                   value _13325 wei
                                                                     gas gas_remaining wei
                                                                    args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13407) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14855 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14939 = mem[_14855]
                                                                require mem[_14855] <= test266151307()
                                                                require _14855 + mem[_14855] + 31 < _14855 + return_data.size
                                                                _15011 = mem[_14855 + mem[_14855]]
                                                                if mem[_14855 + mem[_14855]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14855 + ceil32(return_data.size) + ceil32(32 * mem[_14855 + mem[_14855]]) + 1 > test266151307() or ceil32(32 * mem[_14855 + mem[_14855]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14855 + ceil32(return_data.size) + ceil32(32 * mem[_14855 + mem[_14855]]) + 1
                                                                mem[_14855 + ceil32(return_data.size)] = _15011
                                                                require (32 * _15011) + _14939 + 32 <= return_data.size
                                                                t = _14855 + ceil32(return_data.size) + 32
                                                                s = _14855 + _14939 + 32
                                                                while s < (32 * _15011) + _14855 + _14939 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _15011 < 1:
                                                                    revert with 0, 17
                                                                if _15011 - 1 >= _15011:
                                                                    revert with 0, 50
                                                                _16151 = mem[(32 * _15011 - 1) + _14855 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _15011 - 1) + _14855 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _15011 - 1) + _14855 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _15011 - 1) + _14855 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16151 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16151 - u, address(stor6.field_0)
                                                                t = _16151 - u
                                                                continue 
                                                            mem[_8470 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8470 + 196] = u
                                                            mem[_8470 + 228] = 1
                                                            mem[_8470 + 260] = 160
                                                            mem[_8470 + 356] = mem[_8470]
                                                            t = 0
                                                            v = _8470 + 32
                                                            w = _8470 + 388
                                                            while t < mem[_8470]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8470 + 292] = this.address
                                                            mem[_8470 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8470 + (32 * mem[_8470]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11064 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11137 = mem[_11064]
                                                            require mem[_11064] <= test266151307()
                                                            require _11064 + mem[_11064] + 31 < _11064 + return_data.size
                                                            _11222 = mem[_11064 + mem[_11064]]
                                                            if mem[_11064 + mem[_11064]] > test266151307():
                                                                revert with 0, 65
                                                            if _11064 + ceil32(return_data.size) + ceil32(32 * mem[_11064 + mem[_11064]]) + 1 > test266151307() or ceil32(32 * mem[_11064 + mem[_11064]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11064 + ceil32(return_data.size) + ceil32(32 * mem[_11064 + mem[_11064]]) + 1
                                                            mem[_11064 + ceil32(return_data.size)] = _11222
                                                            require (32 * _11222) + _11137 + 32 <= return_data.size
                                                            v = _11064 + ceil32(return_data.size) + 32
                                                            t = _11064 + _11137 + 32
                                                            while t < (32 * _11222) + _11064 + _11137 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11222 < 1:
                                                                revert with 0, 17
                                                            if _11222 - 1 >= _11222:
                                                                revert with 0, 50
                                                            _13323 = mem[(32 * _11222 - 1) + _11064 + ceil32(return_data.size) + 32]
                                                            _13324 = mem[64]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13323
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13406 = mem[_8470 + 96]
                                                            mem[mem[64] + 164] = mem[_8470 + 96]
                                                            t = 0
                                                            v = _8470 + 128
                                                            w = mem[64] + 196
                                                            while t < _13406:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13324 + 100] = this.address
                                                            mem[_13324 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13324 + (32 * _13406) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14854 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14938 = mem[_14854]
                                                            require mem[_14854] <= test266151307()
                                                            require _14854 + mem[_14854] + 31 < _14854 + return_data.size
                                                            _15010 = mem[_14854 + mem[_14854]]
                                                            if mem[_14854 + mem[_14854]] > test266151307():
                                                                revert with 0, 65
                                                            if _14854 + ceil32(return_data.size) + ceil32(32 * mem[_14854 + mem[_14854]]) + 1 > test266151307() or ceil32(32 * mem[_14854 + mem[_14854]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14854 + ceil32(return_data.size) + ceil32(32 * mem[_14854 + mem[_14854]]) + 1
                                                            mem[_14854 + ceil32(return_data.size)] = _15010
                                                            require (32 * _15010) + _14938 + 32 <= return_data.size
                                                            t = _14854 + ceil32(return_data.size) + 32
                                                            s = _14854 + _14938 + 32
                                                            while s < (32 * _15010) + _14854 + _14938 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15010 < 1:
                                                                revert with 0, 17
                                                            if _15010 - 1 >= _15010:
                                                                revert with 0, 50
                                                            _16150 = mem[(32 * _15010 - 1) + _14854 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15010 - 1) + _14854 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15010 - 1) + _14854 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15010 - 1) + _14854 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16150 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16150 - u, address(stor6.field_0)
                                                            t = _16150 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8113 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8113] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8113] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8113] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8113] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8467 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8467]:
                                                            revert with 0, 50
                                                        mem[_8467 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8467]:
                                                            revert with 0, 50
                                                        mem[_8467 + 64] = address(stor6.field_256)
                                                        if not mem[_8467 + 96]:
                                                            revert with 0, 50
                                                        mem[_8467 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8467 + 96]:
                                                            revert with 0, 50
                                                        mem[_8467 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8467 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8467 + 196] = 1
                                                            mem[_8467 + 228] = 128
                                                            mem[_8467 + 324] = mem[_8467]
                                                            t = 0
                                                            v = _8467 + 32
                                                            w = _8467 + 356
                                                            while t < mem[_8467]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8467 + 260] = this.address
                                                            mem[_8467 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8467 + (32 * mem[_8467]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11063 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11136 = mem[_11063]
                                                            require mem[_11063] <= test266151307()
                                                            require _11063 + mem[_11063] + 31 < _11063 + return_data.size
                                                            _11221 = mem[_11063 + mem[_11063]]
                                                            if mem[_11063 + mem[_11063]] > test266151307():
                                                                revert with 0, 65
                                                            if _11063 + ceil32(return_data.size) + ceil32(32 * mem[_11063 + mem[_11063]]) + 1 > test266151307() or ceil32(32 * mem[_11063 + mem[_11063]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11063 + ceil32(return_data.size) + ceil32(32 * mem[_11063 + mem[_11063]]) + 1
                                                            mem[_11063 + ceil32(return_data.size)] = _11221
                                                            require (32 * _11221) + _11136 + 32 <= return_data.size
                                                            v = _11063 + ceil32(return_data.size) + 32
                                                            t = _11063 + _11136 + 32
                                                            while t < (32 * _11221) + _11063 + _11136 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11221 < 1:
                                                                revert with 0, 17
                                                            if _11221 - 1 >= _11221:
                                                                revert with 0, 50
                                                            _13321 = mem[(32 * _11221 - 1) + _11063 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13321
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13405 = mem[_8467 + 96]
                                                            mem[mem[64] + 164] = mem[_8467 + 96]
                                                            t = 0
                                                            v = _8467 + 128
                                                            w = mem[64] + 196
                                                            while t < _13405:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13321, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13405) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14853 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14937 = mem[_14853]
                                                            require mem[_14853] <= test266151307()
                                                            require _14853 + mem[_14853] + 31 < _14853 + return_data.size
                                                            _15009 = mem[_14853 + mem[_14853]]
                                                            if mem[_14853 + mem[_14853]] > test266151307():
                                                                revert with 0, 65
                                                            if _14853 + ceil32(return_data.size) + ceil32(32 * mem[_14853 + mem[_14853]]) + 1 > test266151307() or ceil32(32 * mem[_14853 + mem[_14853]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14853 + ceil32(return_data.size) + ceil32(32 * mem[_14853 + mem[_14853]]) + 1
                                                            mem[_14853 + ceil32(return_data.size)] = _15009
                                                            require (32 * _15009) + _14937 + 32 <= return_data.size
                                                            t = _14853 + ceil32(return_data.size) + 32
                                                            s = _14853 + _14937 + 32
                                                            while s < (32 * _15009) + _14853 + _14937 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15009 < 1:
                                                                revert with 0, 17
                                                            if _15009 - 1 >= _15009:
                                                                revert with 0, 50
                                                            _16149 = mem[(32 * _15009 - 1) + _14853 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15009 - 1) + _14853 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15009 - 1) + _14853 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15009 - 1) + _14853 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16149 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16149 - u, address(stor6.field_0)
                                                            t = _16149 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8467 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8467 + 196] = u
                                                            mem[_8467 + 228] = 1
                                                            mem[_8467 + 260] = 160
                                                            mem[_8467 + 356] = mem[_8467]
                                                            t = 0
                                                            v = _8467 + 32
                                                            w = _8467 + 388
                                                            while t < mem[_8467]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8467 + 292] = this.address
                                                            mem[_8467 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8467 + (32 * mem[_8467]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11062 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11135 = mem[_11062]
                                                            require mem[_11062] <= test266151307()
                                                            require _11062 + mem[_11062] + 31 < _11062 + return_data.size
                                                            _11220 = mem[_11062 + mem[_11062]]
                                                            if mem[_11062 + mem[_11062]] > test266151307():
                                                                revert with 0, 65
                                                            if _11062 + ceil32(return_data.size) + ceil32(32 * mem[_11062 + mem[_11062]]) + 1 > test266151307() or ceil32(32 * mem[_11062 + mem[_11062]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11062 + ceil32(return_data.size) + ceil32(32 * mem[_11062 + mem[_11062]]) + 1
                                                            mem[_11062 + ceil32(return_data.size)] = _11220
                                                            require (32 * _11220) + _11135 + 32 <= return_data.size
                                                            v = _11062 + ceil32(return_data.size) + 32
                                                            t = _11062 + _11135 + 32
                                                            while t < (32 * _11220) + _11062 + _11135 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11220 < 1:
                                                                revert with 0, 17
                                                            if _11220 - 1 >= _11220:
                                                                revert with 0, 50
                                                            _13319 = mem[(32 * _11220 - 1) + _11062 + ceil32(return_data.size) + 32]
                                                            _13320 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13404 = mem[_8467 + 96]
                                                            mem[mem[64] + 132] = mem[_8467 + 96]
                                                            t = 0
                                                            v = _8467 + 128
                                                            w = mem[64] + 164
                                                            while t < _13404:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13320 + 68] = this.address
                                                            mem[_13320 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13319 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13320 + (32 * _13404) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14852 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14936 = mem[_14852]
                                                            require mem[_14852] <= test266151307()
                                                            require _14852 + mem[_14852] + 31 < _14852 + return_data.size
                                                            _15008 = mem[_14852 + mem[_14852]]
                                                            if mem[_14852 + mem[_14852]] > test266151307():
                                                                revert with 0, 65
                                                            if _14852 + ceil32(return_data.size) + ceil32(32 * mem[_14852 + mem[_14852]]) + 1 > test266151307() or ceil32(32 * mem[_14852 + mem[_14852]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14852 + ceil32(return_data.size) + ceil32(32 * mem[_14852 + mem[_14852]]) + 1
                                                            mem[_14852 + ceil32(return_data.size)] = _15008
                                                            require (32 * _15008) + _14936 + 32 <= return_data.size
                                                            t = _14852 + ceil32(return_data.size) + 32
                                                            s = _14852 + _14936 + 32
                                                            while s < (32 * _15008) + _14852 + _14936 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15008 < 1:
                                                                revert with 0, 17
                                                            if _15008 - 1 >= _15008:
                                                                revert with 0, 50
                                                            if mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] - u, address(stor6.field_0)
                                                            t = mem[(32 * _15008 - 1) + _14852 + ceil32(return_data.size) + 32] - u
                                                            continue 
                                                        mem[_8467 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8467 + 196] = u
                                                        mem[_8467 + 228] = 1
                                                        mem[_8467 + 260] = 160
                                                        mem[_8467 + 356] = mem[_8467]
                                                        t = 0
                                                        v = _8467 + 32
                                                        w = _8467 + 388
                                                        while t < mem[_8467]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8467 + 292] = this.address
                                                        mem[_8467 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8467 + (32 * mem[_8467]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11061 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11134 = mem[_11061]
                                                        require mem[_11061] <= test266151307()
                                                        require _11061 + mem[_11061] + 31 < _11061 + return_data.size
                                                        _11219 = mem[_11061 + mem[_11061]]
                                                        if mem[_11061 + mem[_11061]] > test266151307():
                                                            revert with 0, 65
                                                        if _11061 + ceil32(return_data.size) + ceil32(32 * mem[_11061 + mem[_11061]]) + 1 > test266151307() or ceil32(32 * mem[_11061 + mem[_11061]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11061 + ceil32(return_data.size) + ceil32(32 * mem[_11061 + mem[_11061]]) + 1
                                                        mem[_11061 + ceil32(return_data.size)] = _11219
                                                        require (32 * _11219) + _11134 + 32 <= return_data.size
                                                        v = _11061 + ceil32(return_data.size) + 32
                                                        t = _11061 + _11134 + 32
                                                        while t < (32 * _11219) + _11061 + _11134 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11219 < 1:
                                                            revert with 0, 17
                                                        if _11219 - 1 >= _11219:
                                                            revert with 0, 50
                                                        _13317 = mem[(32 * _11219 - 1) + _11061 + ceil32(return_data.size) + 32]
                                                        _13318 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13317
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13403 = mem[_8467 + 96]
                                                        mem[mem[64] + 164] = mem[_8467 + 96]
                                                        t = 0
                                                        v = _8467 + 128
                                                        w = mem[64] + 196
                                                        while t < _13403:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13318 + 100] = this.address
                                                        mem[_13318 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13318 + (32 * _13403) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14851 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14935 = mem[_14851]
                                                        require mem[_14851] <= test266151307()
                                                        require _14851 + mem[_14851] + 31 < _14851 + return_data.size
                                                        _15007 = mem[_14851 + mem[_14851]]
                                                        if mem[_14851 + mem[_14851]] > test266151307():
                                                            revert with 0, 65
                                                        if _14851 + ceil32(return_data.size) + ceil32(32 * mem[_14851 + mem[_14851]]) + 1 > test266151307() or ceil32(32 * mem[_14851 + mem[_14851]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14851 + ceil32(return_data.size) + ceil32(32 * mem[_14851 + mem[_14851]]) + 1
                                                        mem[_14851 + ceil32(return_data.size)] = _15007
                                                        require (32 * _15007) + _14935 + 32 <= return_data.size
                                                        t = _14851 + ceil32(return_data.size) + 32
                                                        s = _14851 + _14935 + 32
                                                        while s < (32 * _15007) + _14851 + _14935 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _15007 < 1:
                                                            revert with 0, 17
                                                        if _15007 - 1 >= _15007:
                                                            revert with 0, 50
                                                        _16147 = mem[(32 * _15007 - 1) + _14851 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _15007 - 1) + _14851 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _15007 - 1) + _14851 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _15007 - 1) + _14851 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16147 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16147 - u, address(stor6.field_0)
                                                        t = _16147 - u
                                                        continue 
                                        else:
                                            mem[_1498 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[_1498 + 196] = u
                                            mem[_1498 + 228] = 1
                                            mem[_1498 + 260] = 160
                                            mem[_1498 + 356] = mem[_1498]
                                            t = 0
                                            v = _1498 + 32
                                            w = _1498 + 388
                                            while t < mem[_1498]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1498 + 292] = this.address
                                            mem[_1498 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1498 + (32 * mem[_1498]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2512 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2524 = mem[_2512]
                                            require mem[_2512] <= test266151307()
                                            require _2512 + mem[_2512] + 31 < _2512 + return_data.size
                                            _2538 = mem[_2512 + mem[_2512]]
                                            if mem[_2512 + mem[_2512]] > test266151307():
                                                revert with 0, 65
                                            if _2512 + ceil32(return_data.size) + ceil32(32 * mem[_2512 + mem[_2512]]) + 1 > test266151307() or ceil32(32 * mem[_2512 + mem[_2512]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2512 + ceil32(return_data.size) + ceil32(32 * mem[_2512 + mem[_2512]]) + 1
                                            mem[_2512 + ceil32(return_data.size)] = _2538
                                            require (32 * _2538) + _2524 + 32 <= return_data.size
                                            v = _2512 + ceil32(return_data.size) + 32
                                            t = _2512 + _2524 + 32
                                            while t < (32 * _2538) + _2512 + _2524 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2538 < 1:
                                                revert with 0, 17
                                            if _2538 - 1 >= _2538:
                                                revert with 0, 50
                                            _3468 = mem[(32 * _2538 - 1) + _2512 + ceil32(return_data.size) + 32]
                                            _3469 = mem[64]
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = _3468
                                            mem[mem[64] + 36] = 1
                                            mem[mem[64] + 68] = 160
                                            _3484 = mem[_1498 + 96]
                                            mem[mem[64] + 164] = mem[_1498 + 96]
                                            t = 0
                                            v = _1498 + 128
                                            w = mem[64] + 196
                                            while t < _3484:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_3469 + 100] = this.address
                                            mem[_3469 + 132] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3469 + (32 * _3484) + -mem[64] + 192]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4308 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4322 = mem[_4308]
                                            require mem[_4308] <= test266151307()
                                            require _4308 + mem[_4308] + 31 < _4308 + return_data.size
                                            _4334 = mem[_4308 + mem[_4308]]
                                            if mem[_4308 + mem[_4308]] > test266151307():
                                                revert with 0, 65
                                            if _4308 + ceil32(return_data.size) + ceil32(32 * mem[_4308 + mem[_4308]]) + 1 > test266151307() or ceil32(32 * mem[_4308 + mem[_4308]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4308 + ceil32(return_data.size) + ceil32(32 * mem[_4308 + mem[_4308]]) + 1
                                            mem[_4308 + ceil32(return_data.size)] = _4334
                                            require (32 * _4334) + _4322 + 32 <= return_data.size
                                            v = _4308 + ceil32(return_data.size) + 32
                                            t = _4308 + _4322 + 32
                                            while t < (32 * _4334) + _4308 + _4322 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4334 < 1:
                                                revert with 0, 17
                                            if _4334 - 1 >= _4334:
                                                revert with 0, 50
                                            _5112 = mem[(32 * _4334 - 1) + _4308 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4334 - 1) + _4308 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4334 - 1) + _4308 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4334 - 1) + _4308 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5112 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5112 - u, address(stor6.field_0)
                                                t = _5112 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7075 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7075] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7075 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7075 + 64] = 0
                                                        mem[_7075 + 96] = 0
                                                        mem[_7075 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7114 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7075 + 160] = mem[_7114]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7075 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7258 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7280 = mem[_7258]
                                                        _7281 = mem[_7258 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7281
                                                        uint256(stor6[t].field_512) = _7280
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7025 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7025] = 0
                                                    mem[_7025 + 32] = 0
                                                    mem[_7025 + 64] = 0
                                                    mem[_7025 + 96] = 0
                                                    mem[_7025 + 128] = 0
                                                    mem[_7025 + 160] = 0
                                                    if var249001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var249001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var249001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8464 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8464]:
                                                                revert with 0, 50
                                                            mem[_8464 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8464]:
                                                                revert with 0, 50
                                                            mem[_8464 + 64] = address(stor6.field_256)
                                                            if not mem[_8464 + 96]:
                                                                revert with 0, 50
                                                            mem[_8464 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8464 + 96]:
                                                                revert with 0, 50
                                                            mem[_8464 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8464 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8464 + 196] = 1
                                                                mem[_8464 + 228] = 128
                                                                mem[_8464 + 324] = mem[_8464]
                                                                t = 0
                                                                v = _8464 + 32
                                                                w = _8464 + 356
                                                                while t < mem[_8464]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8464 + 260] = this.address
                                                                mem[_8464 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8464 + (32 * mem[_8464]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11060 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11133 = mem[_11060]
                                                                require mem[_11060] <= test266151307()
                                                                require _11060 + mem[_11060] + 31 < _11060 + return_data.size
                                                                _11218 = mem[_11060 + mem[_11060]]
                                                                if mem[_11060 + mem[_11060]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11060 + ceil32(return_data.size) + ceil32(32 * mem[_11060 + mem[_11060]]) + 1 > test266151307() or ceil32(32 * mem[_11060 + mem[_11060]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11060 + ceil32(return_data.size) + ceil32(32 * mem[_11060 + mem[_11060]]) + 1
                                                                mem[_11060 + ceil32(return_data.size)] = _11218
                                                                require (32 * _11218) + _11133 + 32 <= return_data.size
                                                                v = _11060 + ceil32(return_data.size) + 32
                                                                t = _11060 + _11133 + 32
                                                                while t < (32 * _11218) + _11060 + _11133 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11218 < 1:
                                                                    revert with 0, 17
                                                                if _11218 - 1 >= _11218:
                                                                    revert with 0, 50
                                                                _13314 = mem[(32 * _11218 - 1) + _11060 + ceil32(return_data.size) + 32]
                                                                _13315 = mem[64]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13314
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13402 = mem[_8464 + 96]
                                                                mem[mem[64] + 164] = mem[_8464 + 96]
                                                                t = 0
                                                                v = _8464 + 128
                                                                w = mem[64] + 196
                                                                while t < _13402:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_13315 + 100] = this.address
                                                                mem[_13315 + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13315 + (32 * _13402) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14850 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14934 = mem[_14850]
                                                                require mem[_14850] <= test266151307()
                                                                require _14850 + mem[_14850] + 31 < _14850 + return_data.size
                                                                _15006 = mem[_14850 + mem[_14850]]
                                                                if mem[_14850 + mem[_14850]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14850 + ceil32(return_data.size) + ceil32(32 * mem[_14850 + mem[_14850]]) + 1 > test266151307() or ceil32(32 * mem[_14850 + mem[_14850]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14850 + ceil32(return_data.size) + ceil32(32 * mem[_14850 + mem[_14850]]) + 1
                                                                mem[_14850 + ceil32(return_data.size)] = _15006
                                                                require (32 * _15006) + _14934 + 32 <= return_data.size
                                                                t = _14850 + ceil32(return_data.size) + 32
                                                                s = _14850 + _14934 + 32
                                                                while s < (32 * _15006) + _14850 + _14934 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _15006 < 1:
                                                                    revert with 0, 17
                                                                if _15006 - 1 >= _15006:
                                                                    revert with 0, 50
                                                                _16146 = mem[(32 * _15006 - 1) + _14850 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _15006 - 1) + _14850 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _15006 - 1) + _14850 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _15006 - 1) + _14850 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16146 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16146 - u, address(stor6.field_0)
                                                                t = _16146 - u
                                                                continue 
                                                            if stor1.length != address(stor6.field_256):
                                                                mem[_8464 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[_8464 + 196] = u
                                                                mem[_8464 + 228] = 1
                                                                mem[_8464 + 260] = 160
                                                                mem[_8464 + 356] = mem[_8464]
                                                                t = 0
                                                                v = _8464 + 32
                                                                w = _8464 + 388
                                                                while t < mem[_8464]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8464 + 292] = this.address
                                                                mem[_8464 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8464 + (32 * mem[_8464]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11058 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11131 = mem[_11058]
                                                                require mem[_11058] <= test266151307()
                                                                require _11058 + mem[_11058] + 31 < _11058 + return_data.size
                                                                _11216 = mem[_11058 + mem[_11058]]
                                                                if mem[_11058 + mem[_11058]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11058 + ceil32(return_data.size) + ceil32(32 * mem[_11058 + mem[_11058]]) + 1 > test266151307() or ceil32(32 * mem[_11058 + mem[_11058]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11058 + ceil32(return_data.size) + ceil32(32 * mem[_11058 + mem[_11058]]) + 1
                                                                mem[_11058 + ceil32(return_data.size)] = _11216
                                                                require (32 * _11216) + _11131 + 32 <= return_data.size
                                                                v = _11058 + ceil32(return_data.size) + 32
                                                                t = _11058 + _11131 + 32
                                                                while t < (32 * _11216) + _11058 + _11131 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11216 < 1:
                                                                    revert with 0, 17
                                                                if _11216 - 1 >= _11216:
                                                                    revert with 0, 50
                                                                _13310 = mem[(32 * _11216 - 1) + _11058 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13310
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13400 = mem[_8464 + 96]
                                                                mem[mem[64] + 164] = mem[_8464 + 96]
                                                                t = 0
                                                                v = _8464 + 128
                                                                w = mem[64] + 196
                                                                while t < _13400:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                     gas gas_remaining wei
                                                                    args _13310, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13400) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14848 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14932 = mem[_14848]
                                                                require mem[_14848] <= test266151307()
                                                                require _14848 + mem[_14848] + 31 < _14848 + return_data.size
                                                                _15004 = mem[_14848 + mem[_14848]]
                                                                if mem[_14848 + mem[_14848]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14848 + ceil32(return_data.size) + ceil32(32 * mem[_14848 + mem[_14848]]) + 1 > test266151307() or ceil32(32 * mem[_14848 + mem[_14848]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14848 + ceil32(return_data.size) + ceil32(32 * mem[_14848 + mem[_14848]]) + 1
                                                                mem[_14848 + ceil32(return_data.size)] = _15004
                                                                require (32 * _15004) + _14932 + 32 <= return_data.size
                                                                t = _14848 + ceil32(return_data.size) + 32
                                                                s = _14848 + _14932 + 32
                                                                while s < (32 * _15004) + _14848 + _14932 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _15004 < 1:
                                                                    revert with 0, 17
                                                                if _15004 - 1 >= _15004:
                                                                    revert with 0, 50
                                                                _16144 = mem[(32 * _15004 - 1) + _14848 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _15004 - 1) + _14848 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _15004 - 1) + _14848 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _15004 - 1) + _14848 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16144 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16144 - u, address(stor6.field_0)
                                                                t = _16144 - u
                                                                continue 
                                                            mem[_8464 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8464 + 196] = u
                                                            mem[_8464 + 228] = 1
                                                            mem[_8464 + 260] = 160
                                                            mem[_8464 + 356] = mem[_8464]
                                                            t = 0
                                                            v = _8464 + 32
                                                            w = _8464 + 388
                                                            while t < mem[_8464]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8464 + 292] = this.address
                                                            mem[_8464 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8464 + (32 * mem[_8464]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11059 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11132 = mem[_11059]
                                                            require mem[_11059] <= test266151307()
                                                            require _11059 + mem[_11059] + 31 < _11059 + return_data.size
                                                            _11217 = mem[_11059 + mem[_11059]]
                                                            if mem[_11059 + mem[_11059]] > test266151307():
                                                                revert with 0, 65
                                                            if _11059 + ceil32(return_data.size) + ceil32(32 * mem[_11059 + mem[_11059]]) + 1 > test266151307() or ceil32(32 * mem[_11059 + mem[_11059]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11059 + ceil32(return_data.size) + ceil32(32 * mem[_11059 + mem[_11059]]) + 1
                                                            mem[_11059 + ceil32(return_data.size)] = _11217
                                                            require (32 * _11217) + _11132 + 32 <= return_data.size
                                                            v = _11059 + ceil32(return_data.size) + 32
                                                            t = _11059 + _11132 + 32
                                                            while t < (32 * _11217) + _11059 + _11132 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11217 < 1:
                                                                revert with 0, 17
                                                            if _11217 - 1 >= _11217:
                                                                revert with 0, 50
                                                            _13312 = mem[(32 * _11217 - 1) + _11059 + ceil32(return_data.size) + 32]
                                                            _13313 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13401 = mem[_8464 + 96]
                                                            mem[mem[64] + 132] = mem[_8464 + 96]
                                                            t = 0
                                                            v = _8464 + 128
                                                            w = mem[64] + 164
                                                            while t < _13401:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13313 + 68] = this.address
                                                            mem[_13313 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13312 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13313 + (32 * _13401) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14849 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14933 = mem[_14849]
                                                            require mem[_14849] <= test266151307()
                                                            require _14849 + mem[_14849] + 31 < _14849 + return_data.size
                                                            _15005 = mem[_14849 + mem[_14849]]
                                                            if mem[_14849 + mem[_14849]] > test266151307():
                                                                revert with 0, 65
                                                            if _14849 + ceil32(return_data.size) + ceil32(32 * mem[_14849 + mem[_14849]]) + 1 > test266151307() or ceil32(32 * mem[_14849 + mem[_14849]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14849 + ceil32(return_data.size) + ceil32(32 * mem[_14849 + mem[_14849]]) + 1
                                                            mem[_14849 + ceil32(return_data.size)] = _15005
                                                            require (32 * _15005) + _14933 + 32 <= return_data.size
                                                            t = _14849 + ceil32(return_data.size) + 32
                                                            s = _14849 + _14933 + 32
                                                            while s < (32 * _15005) + _14849 + _14933 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15005 < 1:
                                                                revert with 0, 17
                                                            if _15005 - 1 >= _15005:
                                                                revert with 0, 50
                                                            _16145 = mem[(32 * _15005 - 1) + _14849 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15005 - 1) + _14849 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15005 - 1) + _14849 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15005 - 1) + _14849 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16145 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16145 - u, address(stor6.field_0)
                                                            t = _16145 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8111 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8111] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8111] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8111] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8111] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8461 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8461]:
                                                            revert with 0, 50
                                                        mem[_8461 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8461]:
                                                            revert with 0, 50
                                                        mem[_8461 + 64] = address(stor6.field_256)
                                                        if not mem[_8461 + 96]:
                                                            revert with 0, 50
                                                        mem[_8461 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8461 + 96]:
                                                            revert with 0, 50
                                                        mem[_8461 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8461 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8461 + 196] = 1
                                                            mem[_8461 + 228] = 128
                                                            mem[_8461 + 324] = mem[_8461]
                                                            t = 0
                                                            v = _8461 + 32
                                                            w = _8461 + 356
                                                            while t < mem[_8461]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8461 + 260] = this.address
                                                            mem[_8461 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8461 + (32 * mem[_8461]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11057 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11130 = mem[_11057]
                                                            require mem[_11057] <= test266151307()
                                                            require _11057 + mem[_11057] + 31 < _11057 + return_data.size
                                                            _11215 = mem[_11057 + mem[_11057]]
                                                            if mem[_11057 + mem[_11057]] > test266151307():
                                                                revert with 0, 65
                                                            if _11057 + ceil32(return_data.size) + ceil32(32 * mem[_11057 + mem[_11057]]) + 1 > test266151307() or ceil32(32 * mem[_11057 + mem[_11057]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11057 + ceil32(return_data.size) + ceil32(32 * mem[_11057 + mem[_11057]]) + 1
                                                            mem[_11057 + ceil32(return_data.size)] = _11215
                                                            require (32 * _11215) + _11130 + 32 <= return_data.size
                                                            v = _11057 + ceil32(return_data.size) + 32
                                                            t = _11057 + _11130 + 32
                                                            while t < (32 * _11215) + _11057 + _11130 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11215 < 1:
                                                                revert with 0, 17
                                                            if _11215 - 1 >= _11215:
                                                                revert with 0, 50
                                                            _13308 = mem[(32 * _11215 - 1) + _11057 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13308
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13399 = mem[_8461 + 96]
                                                            mem[mem[64] + 164] = mem[_8461 + 96]
                                                            t = 0
                                                            v = _8461 + 128
                                                            w = mem[64] + 196
                                                            while t < _13399:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13308, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13399) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14847 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14931 = mem[_14847]
                                                            require mem[_14847] <= test266151307()
                                                            require _14847 + mem[_14847] + 31 < _14847 + return_data.size
                                                            _15003 = mem[_14847 + mem[_14847]]
                                                            if mem[_14847 + mem[_14847]] > test266151307():
                                                                revert with 0, 65
                                                            if _14847 + ceil32(return_data.size) + ceil32(32 * mem[_14847 + mem[_14847]]) + 1 > test266151307() or ceil32(32 * mem[_14847 + mem[_14847]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14847 + ceil32(return_data.size) + ceil32(32 * mem[_14847 + mem[_14847]]) + 1
                                                            mem[_14847 + ceil32(return_data.size)] = _15003
                                                            require (32 * _15003) + _14931 + 32 <= return_data.size
                                                            t = _14847 + ceil32(return_data.size) + 32
                                                            s = _14847 + _14931 + 32
                                                            while s < (32 * _15003) + _14847 + _14931 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15003 < 1:
                                                                revert with 0, 17
                                                            if _15003 - 1 >= _15003:
                                                                revert with 0, 50
                                                            _16143 = mem[(32 * _15003 - 1) + _14847 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15003 - 1) + _14847 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15003 - 1) + _14847 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15003 - 1) + _14847 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16143 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16143 - u, address(stor6.field_0)
                                                            t = _16143 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8461 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8461 + 196] = u
                                                            mem[_8461 + 228] = 1
                                                            mem[_8461 + 260] = 160
                                                            mem[_8461 + 356] = mem[_8461]
                                                            t = 0
                                                            v = _8461 + 32
                                                            w = _8461 + 388
                                                            while t < mem[_8461]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8461 + 292] = this.address
                                                            mem[_8461 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8461 + (32 * mem[_8461]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11056 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11129 = mem[_11056]
                                                            require mem[_11056] <= test266151307()
                                                            require _11056 + mem[_11056] + 31 < _11056 + return_data.size
                                                            _11214 = mem[_11056 + mem[_11056]]
                                                            if mem[_11056 + mem[_11056]] > test266151307():
                                                                revert with 0, 65
                                                            if _11056 + ceil32(return_data.size) + ceil32(32 * mem[_11056 + mem[_11056]]) + 1 > test266151307() or ceil32(32 * mem[_11056 + mem[_11056]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11056 + ceil32(return_data.size) + ceil32(32 * mem[_11056 + mem[_11056]]) + 1
                                                            mem[_11056 + ceil32(return_data.size)] = _11214
                                                            require (32 * _11214) + _11129 + 32 <= return_data.size
                                                            v = _11056 + ceil32(return_data.size) + 32
                                                            t = _11056 + _11129 + 32
                                                            while t < (32 * _11214) + _11056 + _11129 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11214 < 1:
                                                                revert with 0, 17
                                                            if _11214 - 1 >= _11214:
                                                                revert with 0, 50
                                                            _13306 = mem[(32 * _11214 - 1) + _11056 + ceil32(return_data.size) + 32]
                                                            _13307 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13398 = mem[_8461 + 96]
                                                            mem[mem[64] + 132] = mem[_8461 + 96]
                                                            t = 0
                                                            v = _8461 + 128
                                                            w = mem[64] + 164
                                                            while t < _13398:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13307 + 68] = this.address
                                                            mem[_13307 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13306 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13307 + (32 * _13398) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14846 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14930 = mem[_14846]
                                                            require mem[_14846] <= test266151307()
                                                            require _14846 + mem[_14846] + 31 < _14846 + return_data.size
                                                            _15002 = mem[_14846 + mem[_14846]]
                                                            if mem[_14846 + mem[_14846]] > test266151307():
                                                                revert with 0, 65
                                                            if _14846 + ceil32(return_data.size) + ceil32(32 * mem[_14846 + mem[_14846]]) + 1 > test266151307() or ceil32(32 * mem[_14846 + mem[_14846]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14846 + ceil32(return_data.size) + ceil32(32 * mem[_14846 + mem[_14846]]) + 1
                                                            mem[_14846 + ceil32(return_data.size)] = _15002
                                                            require (32 * _15002) + _14930 + 32 <= return_data.size
                                                            t = _14846 + ceil32(return_data.size) + 32
                                                            s = _14846 + _14930 + 32
                                                            while s < (32 * _15002) + _14846 + _14930 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15002 < 1:
                                                                revert with 0, 17
                                                            if _15002 - 1 >= _15002:
                                                                revert with 0, 50
                                                            _16142 = mem[(32 * _15002 - 1) + _14846 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15002 - 1) + _14846 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15002 - 1) + _14846 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15002 - 1) + _14846 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16142 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16142 - u, address(stor6.field_0)
                                                            t = _16142 - u
                                                            continue 
                                                        mem[_8461 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8461 + 196] = u
                                                        mem[_8461 + 228] = 1
                                                        mem[_8461 + 260] = 160
                                                        mem[_8461 + 356] = mem[_8461]
                                                        t = 0
                                                        v = _8461 + 32
                                                        w = _8461 + 388
                                                        while t < mem[_8461]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8461 + 292] = this.address
                                                        mem[_8461 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8461 + (32 * mem[_8461]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11055 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11128 = mem[_11055]
                                                        require mem[_11055] <= test266151307()
                                                        require _11055 + mem[_11055] + 31 < _11055 + return_data.size
                                                        _11213 = mem[_11055 + mem[_11055]]
                                                        if mem[_11055 + mem[_11055]] > test266151307():
                                                            revert with 0, 65
                                                        if _11055 + ceil32(return_data.size) + ceil32(32 * mem[_11055 + mem[_11055]]) + 1 > test266151307() or ceil32(32 * mem[_11055 + mem[_11055]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11055 + ceil32(return_data.size) + ceil32(32 * mem[_11055 + mem[_11055]]) + 1
                                                        mem[_11055 + ceil32(return_data.size)] = _11213
                                                        require (32 * _11213) + _11128 + 32 <= return_data.size
                                                        v = _11055 + ceil32(return_data.size) + 32
                                                        t = _11055 + _11128 + 32
                                                        while t < (32 * _11213) + _11055 + _11128 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11213 < 1:
                                                            revert with 0, 17
                                                        if _11213 - 1 >= _11213:
                                                            revert with 0, 50
                                                        _13304 = mem[(32 * _11213 - 1) + _11055 + ceil32(return_data.size) + 32]
                                                        _13305 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13304
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13397 = mem[_8461 + 96]
                                                        mem[mem[64] + 164] = mem[_8461 + 96]
                                                        t = 0
                                                        v = _8461 + 128
                                                        w = mem[64] + 196
                                                        while t < _13397:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13305 + 100] = this.address
                                                        mem[_13305 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13305 + (32 * _13397) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14845 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14929 = mem[_14845]
                                                        require mem[_14845] <= test266151307()
                                                        require _14845 + mem[_14845] + 31 < _14845 + return_data.size
                                                        _15001 = mem[_14845 + mem[_14845]]
                                                        if mem[_14845 + mem[_14845]] > test266151307():
                                                            revert with 0, 65
                                                        if _14845 + ceil32(return_data.size) + ceil32(32 * mem[_14845 + mem[_14845]]) + 1 > test266151307() or ceil32(32 * mem[_14845 + mem[_14845]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14845 + ceil32(return_data.size) + ceil32(32 * mem[_14845 + mem[_14845]]) + 1
                                                        mem[_14845 + ceil32(return_data.size)] = _15001
                                                        require (32 * _15001) + _14929 + 32 <= return_data.size
                                                        t = _14845 + ceil32(return_data.size) + 32
                                                        s = _14845 + _14929 + 32
                                                        while s < (32 * _15001) + _14845 + _14929 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _15001 < 1:
                                                            revert with 0, 17
                                                        if _15001 - 1 >= _15001:
                                                            revert with 0, 50
                                                        _16141 = mem[(32 * _15001 - 1) + _14845 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _15001 - 1) + _14845 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _15001 - 1) + _14845 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _15001 - 1) + _14845 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16141 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16141 - u, address(stor6.field_0)
                                                        t = _16141 - u
                                                        continue 
                            else:
                                mem[mem[64] + 4] = this.address
                                staticcall address(stor6.field_0).0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _1439 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                t = 0
                                u = 0
                                v = mem[_1439] / 2
                                w = 0
                                while t < stor7:
                                    if v <= 0:
                                        revert with 0, 'RELAY:InvalidQty'
                                    if uint256(stor6.field_512) > !v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if not uint256(stor6.field_768):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                        revert with 0, 17
                                    if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                        revert with 0, 17
                                    if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                        revert with 0, 17
                                    if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                        revert with 0, 17
                                    if not uint256(stor6.field_512):
                                        revert with 0, 18
                                    if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                        revert with 0, 17
                                    if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 18
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                        revert with 0, 17
                                    if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                        revert with 0, 17
                                    if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                        if v < w:
                                            revert with 0, 17
                                        if w > !(v - w / 2):
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        t = t + 1
                                        u = u
                                        v = w + (v - w / 2)
                                        w = w
                                        continue 
                                    if mem[_1439] < v:
                                        revert with 0, 17
                                    if v > !(mem[_1439] - v / 2):
                                        revert with 0, 17
                                    if t == -1:
                                        revert with 0, 17
                                    t = t + 1
                                    u = v
                                    v = v + (mem[_1439] - v / 2)
                                    w = v
                                    continue 
                                _1495 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                mem[mem[64] + 96] = 2
                                mem[64] = mem[64] + 192
                                if not mem[_1495]:
                                    revert with 0, 50
                                mem[_1495 + 32] = address(stor6.field_0)
                                if 1 >= mem[_1495]:
                                    revert with 0, 50
                                mem[_1495 + 64] = address(stor6.field_256)
                                if not mem[_1495 + 96]:
                                    revert with 0, 50
                                mem[_1495 + 128] = address(stor6.field_256)
                                if 1 >= mem[_1495 + 96]:
                                    revert with 0, 50
                                mem[_1495 + 160] = address(stor6.field_0)
                                if u:
                                    if stor1.length == address(stor6.field_0):
                                        mem[_1495 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                        mem[_1495 + 196] = 1
                                        mem[_1495 + 228] = 128
                                        mem[_1495 + 324] = mem[_1495]
                                        t = 0
                                        v = _1495 + 32
                                        w = _1495 + 356
                                        while t < mem[_1495]:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_1495 + 260] = this.address
                                        mem[_1495 + 292] = stor2.length
                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                           value u wei
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _1495 + (32 * mem[_1495]) + -mem[64] + 352]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _2511 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _2523 = mem[_2511]
                                        require mem[_2511] <= test266151307()
                                        require _2511 + mem[_2511] + 31 < _2511 + return_data.size
                                        _2537 = mem[_2511 + mem[_2511]]
                                        if mem[_2511 + mem[_2511]] > test266151307():
                                            revert with 0, 65
                                        if _2511 + ceil32(return_data.size) + ceil32(32 * mem[_2511 + mem[_2511]]) + 1 > test266151307() or ceil32(32 * mem[_2511 + mem[_2511]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _2511 + ceil32(return_data.size) + ceil32(32 * mem[_2511 + mem[_2511]]) + 1
                                        mem[_2511 + ceil32(return_data.size)] = _2537
                                        require (32 * _2537) + _2523 + 32 <= return_data.size
                                        v = _2511 + ceil32(return_data.size) + 32
                                        t = _2511 + _2523 + 32
                                        while t < (32 * _2537) + _2511 + _2523 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _2537 < 1:
                                            revert with 0, 17
                                        if _2537 - 1 >= _2537:
                                            revert with 0, 50
                                        _3466 = mem[(32 * _2537 - 1) + _2511 + ceil32(return_data.size) + 32]
                                        _3467 = mem[64]
                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                        mem[mem[64] + 4] = _3466
                                        mem[mem[64] + 36] = 1
                                        mem[mem[64] + 68] = 160
                                        _3483 = mem[_1495 + 96]
                                        mem[mem[64] + 164] = mem[_1495 + 96]
                                        t = 0
                                        v = _1495 + 128
                                        w = mem[64] + 196
                                        while t < _3483:
                                            mem[w] = mem[v + 12 len 20]
                                            t = t + 1
                                            v = v + 32
                                            w = w + 32
                                            continue 
                                        mem[_3467 + 100] = this.address
                                        mem[_3467 + 132] = stor2.length
                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                             gas gas_remaining wei
                                            args mem[mem[64] + 4 len _3467 + (32 * _3483) + -mem[64] + 192]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4307 = mem[64]
                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        _4321 = mem[_4307]
                                        require mem[_4307] <= test266151307()
                                        require _4307 + mem[_4307] + 31 < _4307 + return_data.size
                                        _4333 = mem[_4307 + mem[_4307]]
                                        if mem[_4307 + mem[_4307]] > test266151307():
                                            revert with 0, 65
                                        if _4307 + ceil32(return_data.size) + ceil32(32 * mem[_4307 + mem[_4307]]) + 1 > test266151307() or ceil32(32 * mem[_4307 + mem[_4307]]) + 1 < 0:
                                            revert with 0, 65
                                        mem[64] = _4307 + ceil32(return_data.size) + ceil32(32 * mem[_4307 + mem[_4307]]) + 1
                                        mem[_4307 + ceil32(return_data.size)] = _4333
                                        require (32 * _4333) + _4321 + 32 <= return_data.size
                                        v = _4307 + ceil32(return_data.size) + 32
                                        t = _4307 + _4321 + 32
                                        while t < (32 * _4333) + _4307 + _4321 + 32:
                                            mem[v] = mem[t]
                                            v = v + 32
                                            t = t + 32
                                            continue 
                                        if _4333 < 1:
                                            revert with 0, 17
                                        if _4333 - 1 >= _4333:
                                            revert with 0, 50
                                        _5111 = mem[(32 * _4333 - 1) + _4307 + ceil32(return_data.size) + 32]
                                        if mem[(32 * _4333 - 1) + _4307 + ceil32(return_data.size) + 32] < u:
                                            revert with 0, 17
                                        if mem[(32 * _4333 - 1) + _4307 + ceil32(return_data.size) + 32] - u <= 0:
                                            revert with 0, 'RELAY:NegGain'
                                        if mem[(32 * _4333 - 1) + _4307 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                            mem[mem[64]] = address(stor6.field_256)
                                            mem[mem[64] + 32] = _5111 - u
                                            emit 0x2bcd0e02: address(stor6.field_256), _5111 - u, address(stor6.field_0)
                                            t = _5111 - u
                                            while t:
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 2 * idx >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                    revert with 0, 17
                                                if 1 > !(2 * idx):
                                                    revert with 0, 17
                                                if (2 * idx) + 1 >= ('cd', 4).length:
                                                    revert with 0, 50
                                                require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                if idx >= ('cd', 68).length:
                                                    revert with 0, 50
                                                if idx >= ('cd', 100).length:
                                                    revert with 0, 50
                                                if cd[((32 * idx) + cd[68] + 36)] < s:
                                                    revert with 0, 17
                                                stor6.length = 0
                                                mem[0] = 6
                                                t = sha3(6)
                                                while sha3(6) + (6 * stor6.length) > t:
                                                    stor[t] = 0
                                                    stor1[t] = 0
                                                    stor2[t] = 0
                                                    stor3[t] = 0
                                                    address(stor4[t]) = 0
                                                    stor5[t] = 0
                                                    t = t + 6
                                                    continue 
                                                t = 0
                                                while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if t > !s:
                                                        revert with 0, 17
                                                    if t + s >= ('cd', 36).length:
                                                        revert with 0, 50
                                                    require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                    _7073 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7073] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[_7073 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[_7073 + 64] = 0
                                                    mem[_7073 + 96] = 0
                                                    mem[_7073 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7113 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    mem[_7073 + 160] = mem[_7113]
                                                    stor6.length++
                                                    mem[0] = 6
                                                    stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                    stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    uint256(stor6[stor6.length].field_512) = 0
                                                    uint256(stor6[stor6.length].field_768) = 0
                                                    stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                    uint256(stor6[stor6.length].field_1280) = mem[_7073 + 160]
                                                    mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                            gas gas_remaining wei
                                                           args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _7257 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 64
                                                    _7278 = mem[_7257]
                                                    _7279 = mem[_7257 + 32]
                                                    if t >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    uint256(stor6[t].field_768) = _7279
                                                    uint256(stor6[t].field_512) = _7278
                                                    if t == -1:
                                                        revert with 0, 17
                                                    t = t + 1
                                                    continue 
                                                _7024 = mem[64]
                                                mem[64] = mem[64] + 192
                                                mem[_7024] = 0
                                                mem[_7024 + 32] = 0
                                                mem[_7024 + 64] = 0
                                                mem[_7024 + 96] = 0
                                                mem[_7024 + 128] = 0
                                                mem[_7024 + 160] = 0
                                                if var252001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < var252001:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s - var252001 < 1:
                                                        revert with 0, 17
                                                    # nil
                                                else:
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                        revert with 0, 17
                                                    if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                        revert with 0, 17
                                                    if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                        t = 0
                                                        continue 
                                                    if 0 >= stor6.length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                        revert with 0, 17
                                                    if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                        revert with 0, 50
                                                    mem[0] = 6
                                                    if stor1.length == address(stor6.field_0):
                                                        t = 0
                                                        u = 0
                                                        v = eth.balance(this.address) / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if eth.balance(this.address) < v:
                                                                revert with 0, 17
                                                            if v > !(eth.balance(this.address) - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (eth.balance(this.address) - v / 2)
                                                            w = v
                                                            continue 
                                                        _8458 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8458]:
                                                            revert with 0, 50
                                                        mem[_8458 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8458]:
                                                            revert with 0, 50
                                                        mem[_8458 + 64] = address(stor6.field_256)
                                                        if not mem[_8458 + 96]:
                                                            revert with 0, 50
                                                        mem[_8458 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8458 + 96]:
                                                            revert with 0, 50
                                                        mem[_8458 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8458 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8458 + 196] = 1
                                                            mem[_8458 + 228] = 128
                                                            mem[_8458 + 324] = mem[_8458]
                                                            t = 0
                                                            v = _8458 + 32
                                                            w = _8458 + 356
                                                            while t < mem[_8458]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8458 + 260] = this.address
                                                            mem[_8458 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8458 + (32 * mem[_8458]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11054 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11127 = mem[_11054]
                                                            require mem[_11054] <= test266151307()
                                                            require _11054 + mem[_11054] + 31 < _11054 + return_data.size
                                                            _11212 = mem[_11054 + mem[_11054]]
                                                            if mem[_11054 + mem[_11054]] > test266151307():
                                                                revert with 0, 65
                                                            if _11054 + ceil32(return_data.size) + ceil32(32 * mem[_11054 + mem[_11054]]) + 1 > test266151307() or ceil32(32 * mem[_11054 + mem[_11054]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11054 + ceil32(return_data.size) + ceil32(32 * mem[_11054 + mem[_11054]]) + 1
                                                            mem[_11054 + ceil32(return_data.size)] = _11212
                                                            require (32 * _11212) + _11127 + 32 <= return_data.size
                                                            v = _11054 + ceil32(return_data.size) + 32
                                                            t = _11054 + _11127 + 32
                                                            while t < (32 * _11212) + _11054 + _11127 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11212 < 1:
                                                                revert with 0, 17
                                                            if _11212 - 1 >= _11212:
                                                                revert with 0, 50
                                                            _13301 = mem[(32 * _11212 - 1) + _11054 + ceil32(return_data.size) + 32]
                                                            _13302 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13301
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13396 = mem[_8458 + 96]
                                                            mem[mem[64] + 164] = mem[_8458 + 96]
                                                            t = 0
                                                            v = _8458 + 128
                                                            w = mem[64] + 196
                                                            while t < _13396:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13302 + 100] = this.address
                                                            mem[_13302 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13302 + (32 * _13396) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14844 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14928 = mem[_14844]
                                                            require mem[_14844] <= test266151307()
                                                            require _14844 + mem[_14844] + 31 < _14844 + return_data.size
                                                            _15000 = mem[_14844 + mem[_14844]]
                                                            if mem[_14844 + mem[_14844]] > test266151307():
                                                                revert with 0, 65
                                                            if _14844 + ceil32(return_data.size) + ceil32(32 * mem[_14844 + mem[_14844]]) + 1 > test266151307() or ceil32(32 * mem[_14844 + mem[_14844]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14844 + ceil32(return_data.size) + ceil32(32 * mem[_14844 + mem[_14844]]) + 1
                                                            mem[_14844 + ceil32(return_data.size)] = _15000
                                                            require (32 * _15000) + _14928 + 32 <= return_data.size
                                                            t = _14844 + ceil32(return_data.size) + 32
                                                            s = _14844 + _14928 + 32
                                                            while s < (32 * _15000) + _14844 + _14928 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _15000 < 1:
                                                                revert with 0, 17
                                                            if _15000 - 1 >= _15000:
                                                                revert with 0, 50
                                                            _16140 = mem[(32 * _15000 - 1) + _14844 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _15000 - 1) + _14844 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _15000 - 1) + _14844 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _15000 - 1) + _14844 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16140 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16140 - u, address(stor6.field_0)
                                                            t = _16140 - u
                                                            continue 
                                                        if stor1.length != address(stor6.field_256):
                                                            mem[_8458 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8458 + 196] = u
                                                            mem[_8458 + 228] = 1
                                                            mem[_8458 + 260] = 160
                                                            mem[_8458 + 356] = mem[_8458]
                                                            t = 0
                                                            v = _8458 + 32
                                                            w = _8458 + 388
                                                            while t < mem[_8458]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8458 + 292] = this.address
                                                            mem[_8458 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8458 + (32 * mem[_8458]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11052 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11125 = mem[_11052]
                                                            require mem[_11052] <= test266151307()
                                                            require _11052 + mem[_11052] + 31 < _11052 + return_data.size
                                                            _11210 = mem[_11052 + mem[_11052]]
                                                            if mem[_11052 + mem[_11052]] > test266151307():
                                                                revert with 0, 65
                                                            if _11052 + ceil32(return_data.size) + ceil32(32 * mem[_11052 + mem[_11052]]) + 1 > test266151307() or ceil32(32 * mem[_11052 + mem[_11052]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11052 + ceil32(return_data.size) + ceil32(32 * mem[_11052 + mem[_11052]]) + 1
                                                            mem[_11052 + ceil32(return_data.size)] = _11210
                                                            require (32 * _11210) + _11125 + 32 <= return_data.size
                                                            v = _11052 + ceil32(return_data.size) + 32
                                                            t = _11052 + _11125 + 32
                                                            while t < (32 * _11210) + _11052 + _11125 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11210 < 1:
                                                                revert with 0, 17
                                                            if _11210 - 1 >= _11210:
                                                                revert with 0, 50
                                                            _13297 = mem[(32 * _11210 - 1) + _11052 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13297
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13394 = mem[_8458 + 96]
                                                            mem[mem[64] + 164] = mem[_8458 + 96]
                                                            t = 0
                                                            v = _8458 + 128
                                                            w = mem[64] + 196
                                                            while t < _13394:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                 gas gas_remaining wei
                                                                args _13297, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13394) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14842 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14926 = mem[_14842]
                                                            require mem[_14842] <= test266151307()
                                                            require _14842 + mem[_14842] + 31 < _14842 + return_data.size
                                                            _14998 = mem[_14842 + mem[_14842]]
                                                            if mem[_14842 + mem[_14842]] > test266151307():
                                                                revert with 0, 65
                                                            if _14842 + ceil32(return_data.size) + ceil32(32 * mem[_14842 + mem[_14842]]) + 1 > test266151307() or ceil32(32 * mem[_14842 + mem[_14842]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14842 + ceil32(return_data.size) + ceil32(32 * mem[_14842 + mem[_14842]]) + 1
                                                            mem[_14842 + ceil32(return_data.size)] = _14998
                                                            require (32 * _14998) + _14926 + 32 <= return_data.size
                                                            t = _14842 + ceil32(return_data.size) + 32
                                                            s = _14842 + _14926 + 32
                                                            while s < (32 * _14998) + _14842 + _14926 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14998 < 1:
                                                                revert with 0, 17
                                                            if _14998 - 1 >= _14998:
                                                                revert with 0, 50
                                                            _16138 = mem[(32 * _14998 - 1) + _14842 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14998 - 1) + _14842 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14998 - 1) + _14842 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14998 - 1) + _14842 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16138 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16138 - u, address(stor6.field_0)
                                                            t = _16138 - u
                                                            continue 
                                                        mem[_8458 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8458 + 196] = u
                                                        mem[_8458 + 228] = 1
                                                        mem[_8458 + 260] = 160
                                                        mem[_8458 + 356] = mem[_8458]
                                                        t = 0
                                                        v = _8458 + 32
                                                        w = _8458 + 388
                                                        while t < mem[_8458]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8458 + 292] = this.address
                                                        mem[_8458 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8458 + (32 * mem[_8458]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11053 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11126 = mem[_11053]
                                                        require mem[_11053] <= test266151307()
                                                        require _11053 + mem[_11053] + 31 < _11053 + return_data.size
                                                        _11211 = mem[_11053 + mem[_11053]]
                                                        if mem[_11053 + mem[_11053]] > test266151307():
                                                            revert with 0, 65
                                                        if _11053 + ceil32(return_data.size) + ceil32(32 * mem[_11053 + mem[_11053]]) + 1 > test266151307() or ceil32(32 * mem[_11053 + mem[_11053]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11053 + ceil32(return_data.size) + ceil32(32 * mem[_11053 + mem[_11053]]) + 1
                                                        mem[_11053 + ceil32(return_data.size)] = _11211
                                                        require (32 * _11211) + _11126 + 32 <= return_data.size
                                                        v = _11053 + ceil32(return_data.size) + 32
                                                        t = _11053 + _11126 + 32
                                                        while t < (32 * _11211) + _11053 + _11126 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11211 < 1:
                                                            revert with 0, 17
                                                        if _11211 - 1 >= _11211:
                                                            revert with 0, 50
                                                        _13299 = mem[(32 * _11211 - 1) + _11053 + ceil32(return_data.size) + 32]
                                                        _13300 = mem[64]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13395 = mem[_8458 + 96]
                                                        mem[mem[64] + 132] = mem[_8458 + 96]
                                                        t = 0
                                                        v = _8458 + 128
                                                        w = mem[64] + 164
                                                        while t < _13395:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13300 + 68] = this.address
                                                        mem[_13300 + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                           value _13299 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13300 + (32 * _13395) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14843 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14927 = mem[_14843]
                                                        require mem[_14843] <= test266151307()
                                                        require _14843 + mem[_14843] + 31 < _14843 + return_data.size
                                                        _14999 = mem[_14843 + mem[_14843]]
                                                        if mem[_14843 + mem[_14843]] > test266151307():
                                                            revert with 0, 65
                                                        if _14843 + ceil32(return_data.size) + ceil32(32 * mem[_14843 + mem[_14843]]) + 1 > test266151307() or ceil32(32 * mem[_14843 + mem[_14843]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14843 + ceil32(return_data.size) + ceil32(32 * mem[_14843 + mem[_14843]]) + 1
                                                        mem[_14843 + ceil32(return_data.size)] = _14999
                                                        require (32 * _14999) + _14927 + 32 <= return_data.size
                                                        t = _14843 + ceil32(return_data.size) + 32
                                                        s = _14843 + _14927 + 32
                                                        while s < (32 * _14999) + _14843 + _14927 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14999 < 1:
                                                            revert with 0, 17
                                                        if _14999 - 1 >= _14999:
                                                            revert with 0, 50
                                                        _16139 = mem[(32 * _14999 - 1) + _14843 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14999 - 1) + _14843 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14999 - 1) + _14843 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14999 - 1) + _14843 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16139 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16139 - u, address(stor6.field_0)
                                                        t = _16139 - u
                                                        continue 
                                                    mem[mem[64] + 4] = this.address
                                                    staticcall address(stor6.field_0).0x70a08231 with:
                                                            gas gas_remaining wei
                                                           args this.address
                                                    mem[mem[64]] = ext_call.return_data[0]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _8109 = mem[64]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    t = 0
                                                    u = 0
                                                    v = mem[_8109] / 2
                                                    w = 0
                                                    while t < stor7:
                                                        if v <= 0:
                                                            revert with 0, 'RELAY:InvalidQty'
                                                        if uint256(stor6.field_512) > !v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_768):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                            revert with 0, 17
                                                        if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                            revert with 0, 17
                                                        if not uint256(stor6.field_512):
                                                            revert with 0, 18
                                                        if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 18
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                            revert with 0, 17
                                                        if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                            if v < w:
                                                                revert with 0, 17
                                                            if w > !(v - w / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = u
                                                            v = w + (v - w / 2)
                                                            w = w
                                                            continue 
                                                        if mem[_8109] < v:
                                                            revert with 0, 17
                                                        if v > !(mem[_8109] - v / 2):
                                                            revert with 0, 17
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        u = v
                                                        v = v + (mem[_8109] - v / 2)
                                                        w = v
                                                        continue 
                                                    _8455 = mem[64]
                                                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                    mem[mem[64] + 96] = 2
                                                    mem[64] = mem[64] + 192
                                                    if not mem[_8455]:
                                                        revert with 0, 50
                                                    mem[_8455 + 32] = address(stor6.field_0)
                                                    if 1 >= mem[_8455]:
                                                        revert with 0, 50
                                                    mem[_8455 + 64] = address(stor6.field_256)
                                                    if not mem[_8455 + 96]:
                                                        revert with 0, 50
                                                    mem[_8455 + 128] = address(stor6.field_256)
                                                    if 1 >= mem[_8455 + 96]:
                                                        revert with 0, 50
                                                    mem[_8455 + 160] = address(stor6.field_0)
                                                    if not u:
                                                        t = 0
                                                        continue 
                                                    if stor1.length == address(stor6.field_0):
                                                        mem[_8455 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[_8455 + 196] = 1
                                                        mem[_8455 + 228] = 128
                                                        mem[_8455 + 324] = mem[_8455]
                                                        t = 0
                                                        v = _8455 + 32
                                                        w = _8455 + 356
                                                        while t < mem[_8455]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8455 + 260] = this.address
                                                        mem[_8455 + 292] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                           value u wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8455 + (32 * mem[_8455]) + -mem[64] + 352]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11051 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11124 = mem[_11051]
                                                        require mem[_11051] <= test266151307()
                                                        require _11051 + mem[_11051] + 31 < _11051 + return_data.size
                                                        _11209 = mem[_11051 + mem[_11051]]
                                                        if mem[_11051 + mem[_11051]] > test266151307():
                                                            revert with 0, 65
                                                        if _11051 + ceil32(return_data.size) + ceil32(32 * mem[_11051 + mem[_11051]]) + 1 > test266151307() or ceil32(32 * mem[_11051 + mem[_11051]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11051 + ceil32(return_data.size) + ceil32(32 * mem[_11051 + mem[_11051]]) + 1
                                                        mem[_11051 + ceil32(return_data.size)] = _11209
                                                        require (32 * _11209) + _11124 + 32 <= return_data.size
                                                        v = _11051 + ceil32(return_data.size) + 32
                                                        t = _11051 + _11124 + 32
                                                        while t < (32 * _11209) + _11051 + _11124 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11209 < 1:
                                                            revert with 0, 17
                                                        if _11209 - 1 >= _11209:
                                                            revert with 0, 50
                                                        _13296 = mem[64]
                                                        mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = mem[(32 * _11209 - 1) + _11051 + ceil32(return_data.size) + 32]
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13393 = mem[_8455 + 96]
                                                        mem[mem[64] + 164] = mem[_8455 + 96]
                                                        t = 0
                                                        v = _8455 + 128
                                                        w = mem[64] + 196
                                                        while t < _13393:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13296 + 100] = this.address
                                                        mem[_13296 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13296 + (32 * _13393) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14841 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14925 = mem[_14841]
                                                        require mem[_14841] <= test266151307()
                                                        require _14841 + mem[_14841] + 31 < _14841 + return_data.size
                                                        _14997 = mem[_14841 + mem[_14841]]
                                                        if mem[_14841 + mem[_14841]] > test266151307():
                                                            revert with 0, 65
                                                        if _14841 + ceil32(return_data.size) + ceil32(32 * mem[_14841 + mem[_14841]]) + 1 > test266151307() or ceil32(32 * mem[_14841 + mem[_14841]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14841 + ceil32(return_data.size) + ceil32(32 * mem[_14841 + mem[_14841]]) + 1
                                                        mem[_14841 + ceil32(return_data.size)] = _14997
                                                        require (32 * _14997) + _14925 + 32 <= return_data.size
                                                        t = _14841 + ceil32(return_data.size) + 32
                                                        s = _14841 + _14925 + 32
                                                        while s < (32 * _14997) + _14841 + _14925 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14997 < 1:
                                                            revert with 0, 17
                                                        if _14997 - 1 >= _14997:
                                                            revert with 0, 50
                                                        _16137 = mem[(32 * _14997 - 1) + _14841 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14997 - 1) + _14841 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14997 - 1) + _14841 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14997 - 1) + _14841 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16137 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16137 - u, address(stor6.field_0)
                                                        t = _16137 - u
                                                        continue 
                                                    if stor1.length != address(stor6.field_256):
                                                        mem[_8455 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8455 + 196] = u
                                                        mem[_8455 + 228] = 1
                                                        mem[_8455 + 260] = 160
                                                        mem[_8455 + 356] = mem[_8455]
                                                        t = 0
                                                        v = _8455 + 32
                                                        w = _8455 + 388
                                                        while t < mem[_8455]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8455 + 292] = this.address
                                                        mem[_8455 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8455 + (32 * mem[_8455]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11049 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11122 = mem[_11049]
                                                        require mem[_11049] <= test266151307()
                                                        require _11049 + mem[_11049] + 31 < _11049 + return_data.size
                                                        _11207 = mem[_11049 + mem[_11049]]
                                                        if mem[_11049 + mem[_11049]] > test266151307():
                                                            revert with 0, 65
                                                        if _11049 + ceil32(return_data.size) + ceil32(32 * mem[_11049 + mem[_11049]]) + 1 > test266151307() or ceil32(32 * mem[_11049 + mem[_11049]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11049 + ceil32(return_data.size) + ceil32(32 * mem[_11049 + mem[_11049]]) + 1
                                                        mem[_11049 + ceil32(return_data.size)] = _11207
                                                        require (32 * _11207) + _11122 + 32 <= return_data.size
                                                        v = _11049 + ceil32(return_data.size) + 32
                                                        t = _11049 + _11122 + 32
                                                        while t < (32 * _11207) + _11049 + _11122 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11207 < 1:
                                                            revert with 0, 17
                                                        if _11207 - 1 >= _11207:
                                                            revert with 0, 50
                                                        _13291 = mem[(32 * _11207 - 1) + _11049 + ceil32(return_data.size) + 32]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13291
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13391 = mem[_8455 + 96]
                                                        mem[mem[64] + 164] = mem[_8455 + 96]
                                                        t = 0
                                                        v = _8455 + 128
                                                        w = mem[64] + 196
                                                        while t < _13391:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[mem[64] + 100] = this.address
                                                        mem[mem[64] + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                             gas gas_remaining wei
                                                            args _13291, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13391) + 32]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14839 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14923 = mem[_14839]
                                                        require mem[_14839] <= test266151307()
                                                        require _14839 + mem[_14839] + 31 < _14839 + return_data.size
                                                        _14995 = mem[_14839 + mem[_14839]]
                                                        if mem[_14839 + mem[_14839]] > test266151307():
                                                            revert with 0, 65
                                                        if _14839 + ceil32(return_data.size) + ceil32(32 * mem[_14839 + mem[_14839]]) + 1 > test266151307() or ceil32(32 * mem[_14839 + mem[_14839]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14839 + ceil32(return_data.size) + ceil32(32 * mem[_14839 + mem[_14839]]) + 1
                                                        mem[_14839 + ceil32(return_data.size)] = _14995
                                                        require (32 * _14995) + _14923 + 32 <= return_data.size
                                                        t = _14839 + ceil32(return_data.size) + 32
                                                        s = _14839 + _14923 + 32
                                                        while s < (32 * _14995) + _14839 + _14923 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14995 < 1:
                                                            revert with 0, 17
                                                        if _14995 - 1 >= _14995:
                                                            revert with 0, 50
                                                        _16135 = mem[(32 * _14995 - 1) + _14839 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14995 - 1) + _14839 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14995 - 1) + _14839 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14995 - 1) + _14839 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16135 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16135 - u, address(stor6.field_0)
                                                        t = _16135 - u
                                                        continue 
                                                    mem[_8455 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                    mem[_8455 + 196] = u
                                                    mem[_8455 + 228] = 1
                                                    mem[_8455 + 260] = 160
                                                    mem[_8455 + 356] = mem[_8455]
                                                    t = 0
                                                    v = _8455 + 32
                                                    w = _8455 + 388
                                                    while t < mem[_8455]:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_8455 + 292] = this.address
                                                    mem[_8455 + 324] = stor2.length
                                                    call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _8455 + (32 * mem[_8455]) + -mem[64] + 384]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _11050 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _11123 = mem[_11050]
                                                    require mem[_11050] <= test266151307()
                                                    require _11050 + mem[_11050] + 31 < _11050 + return_data.size
                                                    _11208 = mem[_11050 + mem[_11050]]
                                                    if mem[_11050 + mem[_11050]] > test266151307():
                                                        revert with 0, 65
                                                    if _11050 + ceil32(return_data.size) + ceil32(32 * mem[_11050 + mem[_11050]]) + 1 > test266151307() or ceil32(32 * mem[_11050 + mem[_11050]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _11050 + ceil32(return_data.size) + ceil32(32 * mem[_11050 + mem[_11050]]) + 1
                                                    mem[_11050 + ceil32(return_data.size)] = _11208
                                                    require (32 * _11208) + _11123 + 32 <= return_data.size
                                                    v = _11050 + ceil32(return_data.size) + 32
                                                    t = _11050 + _11123 + 32
                                                    while t < (32 * _11208) + _11050 + _11123 + 32:
                                                        mem[v] = mem[t]
                                                        v = v + 32
                                                        t = t + 32
                                                        continue 
                                                    if _11208 < 1:
                                                        revert with 0, 17
                                                    if _11208 - 1 >= _11208:
                                                        revert with 0, 50
                                                    _13293 = mem[(32 * _11208 - 1) + _11050 + ceil32(return_data.size) + 32]
                                                    _13294 = mem[64]
                                                    mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                    mem[mem[64] + 4] = 1
                                                    mem[mem[64] + 36] = 128
                                                    _13392 = mem[_8455 + 96]
                                                    mem[mem[64] + 132] = mem[_8455 + 96]
                                                    t = 0
                                                    v = _8455 + 128
                                                    w = mem[64] + 164
                                                    while t < _13392:
                                                        mem[w] = mem[v + 12 len 20]
                                                        t = t + 1
                                                        v = v + 32
                                                        w = w + 32
                                                        continue 
                                                    mem[_13294 + 68] = this.address
                                                    mem[_13294 + 100] = stor2.length
                                                    call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                       value _13293 wei
                                                         gas gas_remaining wei
                                                        args mem[mem[64] + 4 len _13294 + (32 * _13392) + -mem[64] + 160]
                                                    if not ext_call.success:
                                                        revert with ext_call.return_data[0 len return_data.size]
                                                    _14840 = mem[64]
                                                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                    mem[64] = mem[64] + ceil32(return_data.size)
                                                    require return_data.size >= 32
                                                    _14924 = mem[_14840]
                                                    require mem[_14840] <= test266151307()
                                                    require _14840 + mem[_14840] + 31 < _14840 + return_data.size
                                                    _14996 = mem[_14840 + mem[_14840]]
                                                    if mem[_14840 + mem[_14840]] > test266151307():
                                                        revert with 0, 65
                                                    if _14840 + ceil32(return_data.size) + ceil32(32 * mem[_14840 + mem[_14840]]) + 1 > test266151307() or ceil32(32 * mem[_14840 + mem[_14840]]) + 1 < 0:
                                                        revert with 0, 65
                                                    mem[64] = _14840 + ceil32(return_data.size) + ceil32(32 * mem[_14840 + mem[_14840]]) + 1
                                                    mem[_14840 + ceil32(return_data.size)] = _14996
                                                    require (32 * _14996) + _14924 + 32 <= return_data.size
                                                    t = _14840 + ceil32(return_data.size) + 32
                                                    s = _14840 + _14924 + 32
                                                    while s < (32 * _14996) + _14840 + _14924 + 32:
                                                        mem[t] = mem[s]
                                                        t = t + 32
                                                        s = s + 32
                                                        continue 
                                                    if _14996 < 1:
                                                        revert with 0, 17
                                                    if _14996 - 1 >= _14996:
                                                        revert with 0, 50
                                                    _16136 = mem[(32 * _14996 - 1) + _14840 + ceil32(return_data.size) + 32]
                                                    if mem[(32 * _14996 - 1) + _14840 + ceil32(return_data.size) + 32] < u:
                                                        revert with 0, 17
                                                    if mem[(32 * _14996 - 1) + _14840 + ceil32(return_data.size) + 32] - u <= 0:
                                                        revert with 0, 'RELAY:NegGain'
                                                    if mem[(32 * _14996 - 1) + _14840 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                        t = 0
                                                        continue 
                                                    mem[mem[64]] = address(stor6.field_256)
                                                    mem[mem[64] + 32] = _16136 - u
                                                    emit 0x2bcd0e02: address(stor6.field_256), _16136 - u, address(stor6.field_0)
                                                    t = _16136 - u
                                                    continue 
                                    else:
                                        if stor1.length == address(stor6.field_256):
                                            mem[_1495 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                            mem[_1495 + 196] = u
                                            mem[_1495 + 228] = 1
                                            mem[_1495 + 260] = 160
                                            mem[_1495 + 356] = mem[_1495]
                                            t = 0
                                            v = _1495 + 32
                                            w = _1495 + 388
                                            while t < mem[_1495]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1495 + 292] = this.address
                                            mem[_1495 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1495 + (32 * mem[_1495]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2510 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2522 = mem[_2510]
                                            require mem[_2510] <= test266151307()
                                            require _2510 + mem[_2510] + 31 < _2510 + return_data.size
                                            _2536 = mem[_2510 + mem[_2510]]
                                            if mem[_2510 + mem[_2510]] > test266151307():
                                                revert with 0, 65
                                            if _2510 + ceil32(return_data.size) + ceil32(32 * mem[_2510 + mem[_2510]]) + 1 > test266151307() or ceil32(32 * mem[_2510 + mem[_2510]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2510 + ceil32(return_data.size) + ceil32(32 * mem[_2510 + mem[_2510]]) + 1
                                            mem[_2510 + ceil32(return_data.size)] = _2536
                                            require (32 * _2536) + _2522 + 32 <= return_data.size
                                            v = _2510 + ceil32(return_data.size) + 32
                                            t = _2510 + _2522 + 32
                                            while t < (32 * _2536) + _2510 + _2522 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2536 < 1:
                                                revert with 0, 17
                                            if _2536 - 1 >= _2536:
                                                revert with 0, 50
                                            _3464 = mem[(32 * _2536 - 1) + _2510 + ceil32(return_data.size) + 32]
                                            _3465 = mem[64]
                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = 1
                                            mem[mem[64] + 36] = 128
                                            _3482 = mem[_1495 + 96]
                                            mem[mem[64] + 132] = mem[_1495 + 96]
                                            t = 0
                                            v = _1495 + 128
                                            w = mem[64] + 164
                                            while t < _3482:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_3465 + 68] = this.address
                                            mem[_3465 + 100] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                               value _3464 wei
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3465 + (32 * _3482) + -mem[64] + 160]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4306 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4320 = mem[_4306]
                                            require mem[_4306] <= test266151307()
                                            require _4306 + mem[_4306] + 31 < _4306 + return_data.size
                                            _4332 = mem[_4306 + mem[_4306]]
                                            if mem[_4306 + mem[_4306]] > test266151307():
                                                revert with 0, 65
                                            if _4306 + ceil32(return_data.size) + ceil32(32 * mem[_4306 + mem[_4306]]) + 1 > test266151307() or ceil32(32 * mem[_4306 + mem[_4306]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4306 + ceil32(return_data.size) + ceil32(32 * mem[_4306 + mem[_4306]]) + 1
                                            mem[_4306 + ceil32(return_data.size)] = _4332
                                            require (32 * _4332) + _4320 + 32 <= return_data.size
                                            v = _4306 + ceil32(return_data.size) + 32
                                            t = _4306 + _4320 + 32
                                            while t < (32 * _4332) + _4306 + _4320 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4332 < 1:
                                                revert with 0, 17
                                            if _4332 - 1 >= _4332:
                                                revert with 0, 50
                                            _5110 = mem[(32 * _4332 - 1) + _4306 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4332 - 1) + _4306 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4332 - 1) + _4306 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4332 - 1) + _4306 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5110 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5110 - u, address(stor6.field_0)
                                                t = _5110 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7071 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7071] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7071 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7071 + 64] = 0
                                                        mem[_7071 + 96] = 0
                                                        mem[_7071 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7112 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7071 + 160] = mem[_7112]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7071 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7256 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7276 = mem[_7256]
                                                        _7277 = mem[_7256 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7277
                                                        uint256(stor6[t].field_512) = _7276
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7023 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7023] = 0
                                                    mem[_7023 + 32] = 0
                                                    mem[_7023 + 64] = 0
                                                    mem[_7023 + 96] = 0
                                                    mem[_7023 + 128] = 0
                                                    mem[_7023 + 160] = 0
                                                    if var253001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var253001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var253001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8452 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8452]:
                                                                revert with 0, 50
                                                            mem[_8452 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8452]:
                                                                revert with 0, 50
                                                            mem[_8452 + 64] = address(stor6.field_256)
                                                            if not mem[_8452 + 96]:
                                                                revert with 0, 50
                                                            mem[_8452 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8452 + 96]:
                                                                revert with 0, 50
                                                            mem[_8452 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8452 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8452 + 196] = 1
                                                                mem[_8452 + 228] = 128
                                                                mem[_8452 + 324] = mem[_8452]
                                                                t = 0
                                                                v = _8452 + 32
                                                                w = _8452 + 356
                                                                while t < mem[_8452]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8452 + 260] = this.address
                                                                mem[_8452 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8452 + (32 * mem[_8452]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11048 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11121 = mem[_11048]
                                                                require mem[_11048] <= test266151307()
                                                                require _11048 + mem[_11048] + 31 < _11048 + return_data.size
                                                                _11206 = mem[_11048 + mem[_11048]]
                                                                if mem[_11048 + mem[_11048]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11048 + ceil32(return_data.size) + ceil32(32 * mem[_11048 + mem[_11048]]) + 1 > test266151307() or ceil32(32 * mem[_11048 + mem[_11048]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11048 + ceil32(return_data.size) + ceil32(32 * mem[_11048 + mem[_11048]]) + 1
                                                                mem[_11048 + ceil32(return_data.size)] = _11206
                                                                require (32 * _11206) + _11121 + 32 <= return_data.size
                                                                v = _11048 + ceil32(return_data.size) + 32
                                                                t = _11048 + _11121 + 32
                                                                while t < (32 * _11206) + _11048 + _11121 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11206 < 1:
                                                                    revert with 0, 17
                                                                if _11206 - 1 >= _11206:
                                                                    revert with 0, 50
                                                                _13288 = mem[(32 * _11206 - 1) + _11048 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13288
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13390 = mem[_8452 + 96]
                                                                mem[mem[64] + 164] = mem[_8452 + 96]
                                                                t = 0
                                                                v = _8452 + 128
                                                                w = mem[64] + 196
                                                                while t < _13390:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                     gas gas_remaining wei
                                                                    args _13288, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13390) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14838 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14922 = mem[_14838]
                                                                require mem[_14838] <= test266151307()
                                                                require _14838 + mem[_14838] + 31 < _14838 + return_data.size
                                                                _14994 = mem[_14838 + mem[_14838]]
                                                                if mem[_14838 + mem[_14838]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14838 + ceil32(return_data.size) + ceil32(32 * mem[_14838 + mem[_14838]]) + 1 > test266151307() or ceil32(32 * mem[_14838 + mem[_14838]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14838 + ceil32(return_data.size) + ceil32(32 * mem[_14838 + mem[_14838]]) + 1
                                                                mem[_14838 + ceil32(return_data.size)] = _14994
                                                                require (32 * _14994) + _14922 + 32 <= return_data.size
                                                                t = _14838 + ceil32(return_data.size) + 32
                                                                s = _14838 + _14922 + 32
                                                                while s < (32 * _14994) + _14838 + _14922 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14994 < 1:
                                                                    revert with 0, 17
                                                                if _14994 - 1 >= _14994:
                                                                    revert with 0, 50
                                                                _16134 = mem[(32 * _14994 - 1) + _14838 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14994 - 1) + _14838 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14994 - 1) + _14838 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14994 - 1) + _14838 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16134 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16134 - u, address(stor6.field_0)
                                                                t = _16134 - u
                                                                continue 
                                                            if stor1.length != address(stor6.field_256):
                                                                mem[_8452 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[_8452 + 196] = u
                                                                mem[_8452 + 228] = 1
                                                                mem[_8452 + 260] = 160
                                                                mem[_8452 + 356] = mem[_8452]
                                                                t = 0
                                                                v = _8452 + 32
                                                                w = _8452 + 388
                                                                while t < mem[_8452]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8452 + 292] = this.address
                                                                mem[_8452 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8452 + (32 * mem[_8452]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11046 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11119 = mem[_11046]
                                                                require mem[_11046] <= test266151307()
                                                                require _11046 + mem[_11046] + 31 < _11046 + return_data.size
                                                                _11204 = mem[_11046 + mem[_11046]]
                                                                if mem[_11046 + mem[_11046]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11046 + ceil32(return_data.size) + ceil32(32 * mem[_11046 + mem[_11046]]) + 1 > test266151307() or ceil32(32 * mem[_11046 + mem[_11046]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11046 + ceil32(return_data.size) + ceil32(32 * mem[_11046 + mem[_11046]]) + 1
                                                                mem[_11046 + ceil32(return_data.size)] = _11204
                                                                require (32 * _11204) + _11119 + 32 <= return_data.size
                                                                v = _11046 + ceil32(return_data.size) + 32
                                                                t = _11046 + _11119 + 32
                                                                while t < (32 * _11204) + _11046 + _11119 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11204 < 1:
                                                                    revert with 0, 17
                                                                if _11204 - 1 >= _11204:
                                                                    revert with 0, 50
                                                                _13284 = mem[(32 * _11204 - 1) + _11046 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13284
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13388 = mem[_8452 + 96]
                                                                mem[mem[64] + 164] = mem[_8452 + 96]
                                                                t = 0
                                                                v = _8452 + 128
                                                                w = mem[64] + 196
                                                                while t < _13388:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 100] = this.address
                                                                mem[mem[64] + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                     gas gas_remaining wei
                                                                    args _13284, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13388) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14836 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14920 = mem[_14836]
                                                                require mem[_14836] <= test266151307()
                                                                require _14836 + mem[_14836] + 31 < _14836 + return_data.size
                                                                _14992 = mem[_14836 + mem[_14836]]
                                                                if mem[_14836 + mem[_14836]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14836 + ceil32(return_data.size) + ceil32(32 * mem[_14836 + mem[_14836]]) + 1 > test266151307() or ceil32(32 * mem[_14836 + mem[_14836]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14836 + ceil32(return_data.size) + ceil32(32 * mem[_14836 + mem[_14836]]) + 1
                                                                mem[_14836 + ceil32(return_data.size)] = _14992
                                                                require (32 * _14992) + _14920 + 32 <= return_data.size
                                                                t = _14836 + ceil32(return_data.size) + 32
                                                                s = _14836 + _14920 + 32
                                                                while s < (32 * _14992) + _14836 + _14920 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14992 < 1:
                                                                    revert with 0, 17
                                                                if _14992 - 1 >= _14992:
                                                                    revert with 0, 50
                                                                _16132 = mem[(32 * _14992 - 1) + _14836 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14992 - 1) + _14836 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14992 - 1) + _14836 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14992 - 1) + _14836 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16132 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16132 - u, address(stor6.field_0)
                                                                t = _16132 - u
                                                                continue 
                                                            mem[_8452 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8452 + 196] = u
                                                            mem[_8452 + 228] = 1
                                                            mem[_8452 + 260] = 160
                                                            mem[_8452 + 356] = mem[_8452]
                                                            t = 0
                                                            v = _8452 + 32
                                                            w = _8452 + 388
                                                            while t < mem[_8452]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8452 + 292] = this.address
                                                            mem[_8452 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8452 + (32 * mem[_8452]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11047 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11120 = mem[_11047]
                                                            require mem[_11047] <= test266151307()
                                                            require _11047 + mem[_11047] + 31 < _11047 + return_data.size
                                                            _11205 = mem[_11047 + mem[_11047]]
                                                            if mem[_11047 + mem[_11047]] > test266151307():
                                                                revert with 0, 65
                                                            if _11047 + ceil32(return_data.size) + ceil32(32 * mem[_11047 + mem[_11047]]) + 1 > test266151307() or ceil32(32 * mem[_11047 + mem[_11047]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11047 + ceil32(return_data.size) + ceil32(32 * mem[_11047 + mem[_11047]]) + 1
                                                            mem[_11047 + ceil32(return_data.size)] = _11205
                                                            require (32 * _11205) + _11120 + 32 <= return_data.size
                                                            v = _11047 + ceil32(return_data.size) + 32
                                                            t = _11047 + _11120 + 32
                                                            while t < (32 * _11205) + _11047 + _11120 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11205 < 1:
                                                                revert with 0, 17
                                                            if _11205 - 1 >= _11205:
                                                                revert with 0, 50
                                                            _13286 = mem[(32 * _11205 - 1) + _11047 + ceil32(return_data.size) + 32]
                                                            _13287 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13389 = mem[_8452 + 96]
                                                            mem[mem[64] + 132] = mem[_8452 + 96]
                                                            t = 0
                                                            v = _8452 + 128
                                                            w = mem[64] + 164
                                                            while t < _13389:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13287 + 68] = this.address
                                                            mem[_13287 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13286 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13287 + (32 * _13389) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14837 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14921 = mem[_14837]
                                                            require mem[_14837] <= test266151307()
                                                            require _14837 + mem[_14837] + 31 < _14837 + return_data.size
                                                            _14993 = mem[_14837 + mem[_14837]]
                                                            if mem[_14837 + mem[_14837]] > test266151307():
                                                                revert with 0, 65
                                                            if _14837 + ceil32(return_data.size) + ceil32(32 * mem[_14837 + mem[_14837]]) + 1 > test266151307() or ceil32(32 * mem[_14837 + mem[_14837]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14837 + ceil32(return_data.size) + ceil32(32 * mem[_14837 + mem[_14837]]) + 1
                                                            mem[_14837 + ceil32(return_data.size)] = _14993
                                                            require (32 * _14993) + _14921 + 32 <= return_data.size
                                                            t = _14837 + ceil32(return_data.size) + 32
                                                            s = _14837 + _14921 + 32
                                                            while s < (32 * _14993) + _14837 + _14921 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14993 < 1:
                                                                revert with 0, 17
                                                            if _14993 - 1 >= _14993:
                                                                revert with 0, 50
                                                            _16133 = mem[(32 * _14993 - 1) + _14837 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14993 - 1) + _14837 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14993 - 1) + _14837 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14993 - 1) + _14837 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16133 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16133 - u, address(stor6.field_0)
                                                            t = _16133 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8107 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8107] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8107] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8107] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8107] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8449 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8449]:
                                                            revert with 0, 50
                                                        mem[_8449 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8449]:
                                                            revert with 0, 50
                                                        mem[_8449 + 64] = address(stor6.field_256)
                                                        if not mem[_8449 + 96]:
                                                            revert with 0, 50
                                                        mem[_8449 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8449 + 96]:
                                                            revert with 0, 50
                                                        mem[_8449 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8449 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8449 + 196] = 1
                                                            mem[_8449 + 228] = 128
                                                            mem[_8449 + 324] = mem[_8449]
                                                            t = 0
                                                            v = _8449 + 32
                                                            w = _8449 + 356
                                                            while t < mem[_8449]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8449 + 260] = this.address
                                                            mem[_8449 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8449 + (32 * mem[_8449]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11045 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11118 = mem[_11045]
                                                            require mem[_11045] <= test266151307()
                                                            require _11045 + mem[_11045] + 31 < _11045 + return_data.size
                                                            _11203 = mem[_11045 + mem[_11045]]
                                                            if mem[_11045 + mem[_11045]] > test266151307():
                                                                revert with 0, 65
                                                            if _11045 + ceil32(return_data.size) + ceil32(32 * mem[_11045 + mem[_11045]]) + 1 > test266151307() or ceil32(32 * mem[_11045 + mem[_11045]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11045 + ceil32(return_data.size) + ceil32(32 * mem[_11045 + mem[_11045]]) + 1
                                                            mem[_11045 + ceil32(return_data.size)] = _11203
                                                            require (32 * _11203) + _11118 + 32 <= return_data.size
                                                            v = _11045 + ceil32(return_data.size) + 32
                                                            t = _11045 + _11118 + 32
                                                            while t < (32 * _11203) + _11045 + _11118 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11203 < 1:
                                                                revert with 0, 17
                                                            if _11203 - 1 >= _11203:
                                                                revert with 0, 50
                                                            _13282 = mem[(32 * _11203 - 1) + _11045 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13282
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13387 = mem[_8449 + 96]
                                                            mem[mem[64] + 164] = mem[_8449 + 96]
                                                            t = 0
                                                            v = _8449 + 128
                                                            w = mem[64] + 196
                                                            while t < _13387:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x18cbafe5 with:
                                                                 gas gas_remaining wei
                                                                args _13282, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13387) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14835 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14919 = mem[_14835]
                                                            require mem[_14835] <= test266151307()
                                                            require _14835 + mem[_14835] + 31 < _14835 + return_data.size
                                                            _14991 = mem[_14835 + mem[_14835]]
                                                            if mem[_14835 + mem[_14835]] > test266151307():
                                                                revert with 0, 65
                                                            if _14835 + ceil32(return_data.size) + ceil32(32 * mem[_14835 + mem[_14835]]) + 1 > test266151307() or ceil32(32 * mem[_14835 + mem[_14835]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14835 + ceil32(return_data.size) + ceil32(32 * mem[_14835 + mem[_14835]]) + 1
                                                            mem[_14835 + ceil32(return_data.size)] = _14991
                                                            require (32 * _14991) + _14919 + 32 <= return_data.size
                                                            t = _14835 + ceil32(return_data.size) + 32
                                                            s = _14835 + _14919 + 32
                                                            while s < (32 * _14991) + _14835 + _14919 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14991 < 1:
                                                                revert with 0, 17
                                                            if _14991 - 1 >= _14991:
                                                                revert with 0, 50
                                                            _16131 = mem[(32 * _14991 - 1) + _14835 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14991 - 1) + _14835 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14991 - 1) + _14835 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14991 - 1) + _14835 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16131 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16131 - u, address(stor6.field_0)
                                                            t = _16131 - u
                                                            continue 
                                                        if stor1.length != address(stor6.field_256):
                                                            mem[_8449 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8449 + 196] = u
                                                            mem[_8449 + 228] = 1
                                                            mem[_8449 + 260] = 160
                                                            mem[_8449 + 356] = mem[_8449]
                                                            t = 0
                                                            v = _8449 + 32
                                                            w = _8449 + 388
                                                            while t < mem[_8449]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8449 + 292] = this.address
                                                            mem[_8449 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8449 + (32 * mem[_8449]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11043 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11116 = mem[_11043]
                                                            require mem[_11043] <= test266151307()
                                                            require _11043 + mem[_11043] + 31 < _11043 + return_data.size
                                                            _11201 = mem[_11043 + mem[_11043]]
                                                            if mem[_11043 + mem[_11043]] > test266151307():
                                                                revert with 0, 65
                                                            if _11043 + ceil32(return_data.size) + ceil32(32 * mem[_11043 + mem[_11043]]) + 1 > test266151307() or ceil32(32 * mem[_11043 + mem[_11043]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11043 + ceil32(return_data.size) + ceil32(32 * mem[_11043 + mem[_11043]]) + 1
                                                            mem[_11043 + ceil32(return_data.size)] = _11201
                                                            require (32 * _11201) + _11116 + 32 <= return_data.size
                                                            v = _11043 + ceil32(return_data.size) + 32
                                                            t = _11043 + _11116 + 32
                                                            while t < (32 * _11201) + _11043 + _11116 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11201 < 1:
                                                                revert with 0, 17
                                                            if _11201 - 1 >= _11201:
                                                                revert with 0, 50
                                                            _13278 = mem[(32 * _11201 - 1) + _11043 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13278
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13385 = mem[_8449 + 96]
                                                            mem[mem[64] + 164] = mem[_8449 + 96]
                                                            t = 0
                                                            v = _8449 + 128
                                                            w = mem[64] + 196
                                                            while t < _13385:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                 gas gas_remaining wei
                                                                args _13278, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13385) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14833 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14917 = mem[_14833]
                                                            require mem[_14833] <= test266151307()
                                                            require _14833 + mem[_14833] + 31 < _14833 + return_data.size
                                                            _14989 = mem[_14833 + mem[_14833]]
                                                            if mem[_14833 + mem[_14833]] > test266151307():
                                                                revert with 0, 65
                                                            if _14833 + ceil32(return_data.size) + ceil32(32 * mem[_14833 + mem[_14833]]) + 1 > test266151307() or ceil32(32 * mem[_14833 + mem[_14833]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14833 + ceil32(return_data.size) + ceil32(32 * mem[_14833 + mem[_14833]]) + 1
                                                            mem[_14833 + ceil32(return_data.size)] = _14989
                                                            require (32 * _14989) + _14917 + 32 <= return_data.size
                                                            t = _14833 + ceil32(return_data.size) + 32
                                                            s = _14833 + _14917 + 32
                                                            while s < (32 * _14989) + _14833 + _14917 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14989 < 1:
                                                                revert with 0, 17
                                                            if _14989 - 1 >= _14989:
                                                                revert with 0, 50
                                                            _16129 = mem[(32 * _14989 - 1) + _14833 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14989 - 1) + _14833 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14989 - 1) + _14833 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14989 - 1) + _14833 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16129 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16129 - u, address(stor6.field_0)
                                                            t = _16129 - u
                                                            continue 
                                                        mem[_8449 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                        mem[_8449 + 196] = u
                                                        mem[_8449 + 228] = 1
                                                        mem[_8449 + 260] = 160
                                                        mem[_8449 + 356] = mem[_8449]
                                                        t = 0
                                                        v = _8449 + 32
                                                        w = _8449 + 388
                                                        while t < mem[_8449]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8449 + 292] = this.address
                                                        mem[_8449 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8449 + (32 * mem[_8449]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11044 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11117 = mem[_11044]
                                                        require mem[_11044] <= test266151307()
                                                        require _11044 + mem[_11044] + 31 < _11044 + return_data.size
                                                        _11202 = mem[_11044 + mem[_11044]]
                                                        if mem[_11044 + mem[_11044]] > test266151307():
                                                            revert with 0, 65
                                                        if _11044 + ceil32(return_data.size) + ceil32(32 * mem[_11044 + mem[_11044]]) + 1 > test266151307() or ceil32(32 * mem[_11044 + mem[_11044]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11044 + ceil32(return_data.size) + ceil32(32 * mem[_11044 + mem[_11044]]) + 1
                                                        mem[_11044 + ceil32(return_data.size)] = _11202
                                                        require (32 * _11202) + _11117 + 32 <= return_data.size
                                                        v = _11044 + ceil32(return_data.size) + 32
                                                        t = _11044 + _11117 + 32
                                                        while t < (32 * _11202) + _11044 + _11117 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11202 < 1:
                                                            revert with 0, 17
                                                        if _11202 - 1 >= _11202:
                                                            revert with 0, 50
                                                        _13280 = mem[(32 * _11202 - 1) + _11044 + ceil32(return_data.size) + 32]
                                                        _13281 = mem[64]
                                                        mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = 1
                                                        mem[mem[64] + 36] = 128
                                                        _13386 = mem[_8449 + 96]
                                                        mem[mem[64] + 132] = mem[_8449 + 96]
                                                        t = 0
                                                        v = _8449 + 128
                                                        w = mem[64] + 164
                                                        while t < _13386:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13281 + 68] = this.address
                                                        mem[_13281 + 100] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                           value _13280 wei
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13281 + (32 * _13386) + -mem[64] + 160]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14834 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14918 = mem[_14834]
                                                        require mem[_14834] <= test266151307()
                                                        require _14834 + mem[_14834] + 31 < _14834 + return_data.size
                                                        _14990 = mem[_14834 + mem[_14834]]
                                                        if mem[_14834 + mem[_14834]] > test266151307():
                                                            revert with 0, 65
                                                        if _14834 + ceil32(return_data.size) + ceil32(32 * mem[_14834 + mem[_14834]]) + 1 > test266151307() or ceil32(32 * mem[_14834 + mem[_14834]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14834 + ceil32(return_data.size) + ceil32(32 * mem[_14834 + mem[_14834]]) + 1
                                                        mem[_14834 + ceil32(return_data.size)] = _14990
                                                        require (32 * _14990) + _14918 + 32 <= return_data.size
                                                        t = _14834 + ceil32(return_data.size) + 32
                                                        s = _14834 + _14918 + 32
                                                        while s < (32 * _14990) + _14834 + _14918 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14990 < 1:
                                                            revert with 0, 17
                                                        if _14990 - 1 >= _14990:
                                                            revert with 0, 50
                                                        _16130 = mem[(32 * _14990 - 1) + _14834 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14990 - 1) + _14834 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14990 - 1) + _14834 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14990 - 1) + _14834 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16130 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16130 - u, address(stor6.field_0)
                                                        t = _16130 - u
                                                        continue 
                                        else:
                                            mem[_1495 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[_1495 + 196] = u
                                            mem[_1495 + 228] = 1
                                            mem[_1495 + 260] = 160
                                            mem[_1495 + 356] = mem[_1495]
                                            t = 0
                                            v = _1495 + 32
                                            w = _1495 + 388
                                            while t < mem[_1495]:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_1495 + 292] = this.address
                                            mem[_1495 + 324] = stor2.length
                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _1495 + (32 * mem[_1495]) + -mem[64] + 384]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _2509 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _2521 = mem[_2509]
                                            require mem[_2509] <= test266151307()
                                            require _2509 + mem[_2509] + 31 < _2509 + return_data.size
                                            _2535 = mem[_2509 + mem[_2509]]
                                            if mem[_2509 + mem[_2509]] > test266151307():
                                                revert with 0, 65
                                            if _2509 + ceil32(return_data.size) + ceil32(32 * mem[_2509 + mem[_2509]]) + 1 > test266151307() or ceil32(32 * mem[_2509 + mem[_2509]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _2509 + ceil32(return_data.size) + ceil32(32 * mem[_2509 + mem[_2509]]) + 1
                                            mem[_2509 + ceil32(return_data.size)] = _2535
                                            require (32 * _2535) + _2521 + 32 <= return_data.size
                                            v = _2509 + ceil32(return_data.size) + 32
                                            t = _2509 + _2521 + 32
                                            while t < (32 * _2535) + _2509 + _2521 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _2535 < 1:
                                                revert with 0, 17
                                            if _2535 - 1 >= _2535:
                                                revert with 0, 50
                                            _3462 = mem[(32 * _2535 - 1) + _2509 + ceil32(return_data.size) + 32]
                                            _3463 = mem[64]
                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                            mem[mem[64] + 4] = _3462
                                            mem[mem[64] + 36] = 1
                                            mem[mem[64] + 68] = 160
                                            _3481 = mem[_1495 + 96]
                                            mem[mem[64] + 164] = mem[_1495 + 96]
                                            t = 0
                                            v = _1495 + 128
                                            w = mem[64] + 196
                                            while t < _3481:
                                                mem[w] = mem[v + 12 len 20]
                                                t = t + 1
                                                v = v + 32
                                                w = w + 32
                                                continue 
                                            mem[_3463 + 100] = this.address
                                            mem[_3463 + 132] = stor2.length
                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                 gas gas_remaining wei
                                                args mem[mem[64] + 4 len _3463 + (32 * _3481) + -mem[64] + 192]
                                            if not ext_call.success:
                                                revert with ext_call.return_data[0 len return_data.size]
                                            _4305 = mem[64]
                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                            mem[64] = mem[64] + ceil32(return_data.size)
                                            require return_data.size >= 32
                                            _4319 = mem[_4305]
                                            require mem[_4305] <= test266151307()
                                            require _4305 + mem[_4305] + 31 < _4305 + return_data.size
                                            _4331 = mem[_4305 + mem[_4305]]
                                            if mem[_4305 + mem[_4305]] > test266151307():
                                                revert with 0, 65
                                            if _4305 + ceil32(return_data.size) + ceil32(32 * mem[_4305 + mem[_4305]]) + 1 > test266151307() or ceil32(32 * mem[_4305 + mem[_4305]]) + 1 < 0:
                                                revert with 0, 65
                                            mem[64] = _4305 + ceil32(return_data.size) + ceil32(32 * mem[_4305 + mem[_4305]]) + 1
                                            mem[_4305 + ceil32(return_data.size)] = _4331
                                            require (32 * _4331) + _4319 + 32 <= return_data.size
                                            v = _4305 + ceil32(return_data.size) + 32
                                            t = _4305 + _4319 + 32
                                            while t < (32 * _4331) + _4305 + _4319 + 32:
                                                mem[v] = mem[t]
                                                v = v + 32
                                                t = t + 32
                                                continue 
                                            if _4331 < 1:
                                                revert with 0, 17
                                            if _4331 - 1 >= _4331:
                                                revert with 0, 50
                                            _5109 = mem[(32 * _4331 - 1) + _4305 + ceil32(return_data.size) + 32]
                                            if mem[(32 * _4331 - 1) + _4305 + ceil32(return_data.size) + 32] < u:
                                                revert with 0, 17
                                            if mem[(32 * _4331 - 1) + _4305 + ceil32(return_data.size) + 32] - u <= 0:
                                                revert with 0, 'RELAY:NegGain'
                                            if mem[(32 * _4331 - 1) + _4305 + ceil32(return_data.size) + 32] - u >= cd[((32 * idx) + cd[100] + 36)]:
                                                mem[mem[64]] = address(stor6.field_256)
                                                mem[mem[64] + 32] = _5109 - u
                                                emit 0x2bcd0e02: address(stor6.field_256), _5109 - u, address(stor6.field_0)
                                                t = _5109 - u
                                                while t:
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 2 * idx >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((64 * idx) + cd[4] + 36)] == address(cd[((64 * idx) + cd[4] + 36)])
                                                    if idx > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
                                                        revert with 0, 17
                                                    if 1 > !(2 * idx):
                                                        revert with 0, 17
                                                    if (2 * idx) + 1 >= ('cd', 4).length:
                                                        revert with 0, 50
                                                    require cd[((32 * (2 * idx) + 1) + cd[4] + 36)] == address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                    if idx >= ('cd', 68).length:
                                                        revert with 0, 50
                                                    if idx >= ('cd', 100).length:
                                                        revert with 0, 50
                                                    if cd[((32 * idx) + cd[68] + 36)] < s:
                                                        revert with 0, 17
                                                    stor6.length = 0
                                                    mem[0] = 6
                                                    t = sha3(6)
                                                    while sha3(6) + (6 * stor6.length) > t:
                                                        stor[t] = 0
                                                        stor1[t] = 0
                                                        stor2[t] = 0
                                                        stor3[t] = 0
                                                        address(stor4[t]) = 0
                                                        stor5[t] = 0
                                                        t = t + 6
                                                        continue 
                                                    t = 0
                                                    while t < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if t > !s:
                                                            revert with 0, 17
                                                        if t + s >= ('cd', 36).length:
                                                            revert with 0, 50
                                                        require cd[((32 * t + s) + cd[36] + 36)] == address(cd[((32 * t + s) + cd[36] + 36)])
                                                        _7069 = mem[64]
                                                        mem[64] = mem[64] + 192
                                                        mem[_7069] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[_7069 + 32] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[_7069 + 64] = 0
                                                        mem[_7069 + 96] = 0
                                                        mem[_7069 + 128] = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        mem[mem[64] + 4] = address(cd[((64 * idx) + cd[4] + 36)])
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getFee(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7111 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        mem[_7069 + 160] = mem[_7111]
                                                        stor6.length++
                                                        mem[0] = 6
                                                        stor6[stor6.length].field_0 = address(cd[((64 * idx) + cd[4] + 36)])
                                                        stor6[stor6.length].field_256 = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        uint256(stor6[stor6.length].field_512) = 0
                                                        uint256(stor6[stor6.length].field_768) = 0
                                                        stor6[stor6.length].field_1024 = address(cd[((32 * t + s) + cd[36] + 36)])
                                                        uint256(stor6[stor6.length].field_1280) = mem[_7069 + 160]
                                                        mem[mem[64] + 36] = address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        staticcall address(cd[((32 * t + s) + cd[36] + 36)]).getReserves(address arg1, address arg2) with:
                                                                gas gas_remaining wei
                                                               args address(cd[((64 * idx) + cd[4] + 36)]), address(cd[((32 * (2 * idx) + 1) + cd[4] + 36)])
                                                        mem[mem[64] len 64] = ext_call.return_data[0 len 64]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _7255 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 64
                                                        _7274 = mem[_7255]
                                                        _7275 = mem[_7255 + 32]
                                                        if t >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        uint256(stor6[t].field_768) = _7275
                                                        uint256(stor6[t].field_512) = _7274
                                                        if t == -1:
                                                            revert with 0, 17
                                                        t = t + 1
                                                        continue 
                                                    _7022 = mem[64]
                                                    mem[64] = mem[64] + 192
                                                    mem[_7022] = 0
                                                    mem[_7022 + 32] = 0
                                                    mem[_7022 + 64] = 0
                                                    mem[_7022 + 96] = 0
                                                    mem[_7022 + 128] = 0
                                                    mem[_7022 + 160] = 0
                                                    if var253001 < cd[((32 * idx) + cd[68] + 36)] - s:
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < var253001:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s - var253001 < 1:
                                                            revert with 0, 17
                                                        # nil
                                                    else:
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512):
                                                            revert with 0, 17
                                                        if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length and stor3.length > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280):
                                                            revert with 0, 17
                                                        if uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_512) * stor3.length * stor3.length:
                                                            t = 0
                                                            continue 
                                                        if 0 >= stor6.length:
                                                            revert with 0, 50
                                                        if cd[((32 * idx) + cd[68] + 36)] - s < 1:
                                                            revert with 0, 17
                                                        if cd[((32 * idx) + cd[68] + 36)] + -s - 1 >= stor6.length:
                                                            revert with 0, 50
                                                        mem[0] = 6
                                                        if stor1.length == address(stor6.field_0):
                                                            t = 0
                                                            u = 0
                                                            v = eth.balance(this.address) / 2
                                                            w = 0
                                                            while t < stor7:
                                                                if v <= 0:
                                                                    revert with 0, 'RELAY:InvalidQty'
                                                                if uint256(stor6.field_512) > !v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_768):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                    revert with 0, 17
                                                                if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                    revert with 0, 17
                                                                if not uint256(stor6.field_512):
                                                                    revert with 0, 18
                                                                if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                    revert with 0, 17
                                                                if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 18
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                    revert with 0, 17
                                                                if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                    revert with 0, 17
                                                                if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                    if v < w:
                                                                        revert with 0, 17
                                                                    if w > !(v - w / 2):
                                                                        revert with 0, 17
                                                                    if t == -1:
                                                                        revert with 0, 17
                                                                    t = t + 1
                                                                    u = u
                                                                    v = w + (v - w / 2)
                                                                    w = w
                                                                    continue 
                                                                if eth.balance(this.address) < v:
                                                                    revert with 0, 17
                                                                if v > !(eth.balance(this.address) - v / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = v
                                                                v = v + (eth.balance(this.address) - v / 2)
                                                                w = v
                                                                continue 
                                                            _8446 = mem[64]
                                                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                            mem[mem[64] + 96] = 2
                                                            mem[64] = mem[64] + 192
                                                            if not mem[_8446]:
                                                                revert with 0, 50
                                                            mem[_8446 + 32] = address(stor6.field_0)
                                                            if 1 >= mem[_8446]:
                                                                revert with 0, 50
                                                            mem[_8446 + 64] = address(stor6.field_256)
                                                            if not mem[_8446 + 96]:
                                                                revert with 0, 50
                                                            mem[_8446 + 128] = address(stor6.field_256)
                                                            if 1 >= mem[_8446 + 96]:
                                                                revert with 0, 50
                                                            mem[_8446 + 160] = address(stor6.field_0)
                                                            if not u:
                                                                t = 0
                                                                continue 
                                                            if stor1.length == address(stor6.field_0):
                                                                mem[_8446 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[_8446 + 196] = 1
                                                                mem[_8446 + 228] = 128
                                                                mem[_8446 + 324] = mem[_8446]
                                                                t = 0
                                                                v = _8446 + 32
                                                                w = _8446 + 356
                                                                while t < mem[_8446]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8446 + 260] = this.address
                                                                mem[_8446 + 292] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                   value u wei
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8446 + (32 * mem[_8446]) + -mem[64] + 352]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11042 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11115 = mem[_11042]
                                                                require mem[_11042] <= test266151307()
                                                                require _11042 + mem[_11042] + 31 < _11042 + return_data.size
                                                                _11200 = mem[_11042 + mem[_11042]]
                                                                if mem[_11042 + mem[_11042]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11042 + ceil32(return_data.size) + ceil32(32 * mem[_11042 + mem[_11042]]) + 1 > test266151307() or ceil32(32 * mem[_11042 + mem[_11042]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11042 + ceil32(return_data.size) + ceil32(32 * mem[_11042 + mem[_11042]]) + 1
                                                                mem[_11042 + ceil32(return_data.size)] = _11200
                                                                require (32 * _11200) + _11115 + 32 <= return_data.size
                                                                v = _11042 + ceil32(return_data.size) + 32
                                                                t = _11042 + _11115 + 32
                                                                while t < (32 * _11200) + _11042 + _11115 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11200 < 1:
                                                                    revert with 0, 17
                                                                if _11200 - 1 >= _11200:
                                                                    revert with 0, 50
                                                                _13275 = mem[(32 * _11200 - 1) + _11042 + ceil32(return_data.size) + 32]
                                                                _13276 = mem[64]
                                                                mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = _13275
                                                                mem[mem[64] + 36] = 1
                                                                mem[mem[64] + 68] = 160
                                                                _13384 = mem[_8446 + 96]
                                                                mem[mem[64] + 164] = mem[_8446 + 96]
                                                                t = 0
                                                                v = _8446 + 128
                                                                w = mem[64] + 196
                                                                while t < _13384:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_13276 + 100] = this.address
                                                                mem[_13276 + 132] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _13276 + (32 * _13384) + -mem[64] + 192]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14832 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14916 = mem[_14832]
                                                                require mem[_14832] <= test266151307()
                                                                require _14832 + mem[_14832] + 31 < _14832 + return_data.size
                                                                _14988 = mem[_14832 + mem[_14832]]
                                                                if mem[_14832 + mem[_14832]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14832 + ceil32(return_data.size) + ceil32(32 * mem[_14832 + mem[_14832]]) + 1 > test266151307() or ceil32(32 * mem[_14832 + mem[_14832]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14832 + ceil32(return_data.size) + ceil32(32 * mem[_14832 + mem[_14832]]) + 1
                                                                mem[_14832 + ceil32(return_data.size)] = _14988
                                                                require (32 * _14988) + _14916 + 32 <= return_data.size
                                                                t = _14832 + ceil32(return_data.size) + 32
                                                                s = _14832 + _14916 + 32
                                                                while s < (32 * _14988) + _14832 + _14916 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14988 < 1:
                                                                    revert with 0, 17
                                                                if _14988 - 1 >= _14988:
                                                                    revert with 0, 50
                                                                _16128 = mem[(32 * _14988 - 1) + _14832 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14988 - 1) + _14832 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14988 - 1) + _14832 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14988 - 1) + _14832 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16128 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16128 - u, address(stor6.field_0)
                                                                t = _16128 - u
                                                                continue 
                                                            if stor1.length == address(stor6.field_256):
                                                                mem[_8446 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                                mem[_8446 + 196] = u
                                                                mem[_8446 + 228] = 1
                                                                mem[_8446 + 260] = 160
                                                                mem[_8446 + 356] = mem[_8446]
                                                                t = 0
                                                                v = _8446 + 32
                                                                w = _8446 + 388
                                                                while t < mem[_8446]:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[_8446 + 292] = this.address
                                                                mem[_8446 + 324] = stor2.length
                                                                call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                     gas gas_remaining wei
                                                                    args mem[mem[64] + 4 len _8446 + (32 * mem[_8446]) + -mem[64] + 384]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _11041 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _11114 = mem[_11041]
                                                                require mem[_11041] <= test266151307()
                                                                require _11041 + mem[_11041] + 31 < _11041 + return_data.size
                                                                _11199 = mem[_11041 + mem[_11041]]
                                                                if mem[_11041 + mem[_11041]] > test266151307():
                                                                    revert with 0, 65
                                                                if _11041 + ceil32(return_data.size) + ceil32(32 * mem[_11041 + mem[_11041]]) + 1 > test266151307() or ceil32(32 * mem[_11041 + mem[_11041]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _11041 + ceil32(return_data.size) + ceil32(32 * mem[_11041 + mem[_11041]]) + 1
                                                                mem[_11041 + ceil32(return_data.size)] = _11199
                                                                require (32 * _11199) + _11114 + 32 <= return_data.size
                                                                v = _11041 + ceil32(return_data.size) + 32
                                                                t = _11041 + _11114 + 32
                                                                while t < (32 * _11199) + _11041 + _11114 + 32:
                                                                    mem[v] = mem[t]
                                                                    v = v + 32
                                                                    t = t + 32
                                                                    continue 
                                                                if _11199 < 1:
                                                                    revert with 0, 17
                                                                if _11199 - 1 >= _11199:
                                                                    revert with 0, 50
                                                                _13273 = mem[(32 * _11199 - 1) + _11041 + ceil32(return_data.size) + 32]
                                                                mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                                mem[mem[64] + 4] = 1
                                                                mem[mem[64] + 36] = 128
                                                                _13383 = mem[_8446 + 96]
                                                                mem[mem[64] + 132] = mem[_8446 + 96]
                                                                t = 0
                                                                v = _8446 + 128
                                                                w = mem[64] + 164
                                                                while t < _13383:
                                                                    mem[w] = mem[v + 12 len 20]
                                                                    t = t + 1
                                                                    v = v + 32
                                                                    w = w + 32
                                                                    continue 
                                                                mem[mem[64] + 68] = this.address
                                                                mem[mem[64] + 100] = stor2.length
                                                                call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                                                                   value _13273 wei
                                                                     gas gas_remaining wei
                                                                    args 1, 128, address(this.address), stor2.length, mem[mem[64] + 132 len (32 * _13383) + 32]
                                                                if not ext_call.success:
                                                                    revert with ext_call.return_data[0 len return_data.size]
                                                                _14831 = mem[64]
                                                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                                mem[64] = mem[64] + ceil32(return_data.size)
                                                                require return_data.size >= 32
                                                                _14915 = mem[_14831]
                                                                require mem[_14831] <= test266151307()
                                                                require _14831 + mem[_14831] + 31 < _14831 + return_data.size
                                                                _14987 = mem[_14831 + mem[_14831]]
                                                                if mem[_14831 + mem[_14831]] > test266151307():
                                                                    revert with 0, 65
                                                                if _14831 + ceil32(return_data.size) + ceil32(32 * mem[_14831 + mem[_14831]]) + 1 > test266151307() or ceil32(32 * mem[_14831 + mem[_14831]]) + 1 < 0:
                                                                    revert with 0, 65
                                                                mem[64] = _14831 + ceil32(return_data.size) + ceil32(32 * mem[_14831 + mem[_14831]]) + 1
                                                                mem[_14831 + ceil32(return_data.size)] = _14987
                                                                require (32 * _14987) + _14915 + 32 <= return_data.size
                                                                t = _14831 + ceil32(return_data.size) + 32
                                                                s = _14831 + _14915 + 32
                                                                while s < (32 * _14987) + _14831 + _14915 + 32:
                                                                    mem[t] = mem[s]
                                                                    t = t + 32
                                                                    s = s + 32
                                                                    continue 
                                                                if _14987 < 1:
                                                                    revert with 0, 17
                                                                if _14987 - 1 >= _14987:
                                                                    revert with 0, 50
                                                                _16127 = mem[(32 * _14987 - 1) + _14831 + ceil32(return_data.size) + 32]
                                                                if mem[(32 * _14987 - 1) + _14831 + ceil32(return_data.size) + 32] < u:
                                                                    revert with 0, 17
                                                                if mem[(32 * _14987 - 1) + _14831 + ceil32(return_data.size) + 32] - u <= 0:
                                                                    revert with 0, 'RELAY:NegGain'
                                                                if mem[(32 * _14987 - 1) + _14831 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                    t = 0
                                                                    continue 
                                                                mem[mem[64]] = address(stor6.field_256)
                                                                mem[mem[64] + 32] = _16127 - u
                                                                emit 0x2bcd0e02: address(stor6.field_256), _16127 - u, address(stor6.field_0)
                                                                t = _16127 - u
                                                                continue 
                                                            mem[_8446 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[_8446 + 196] = u
                                                            mem[_8446 + 228] = 1
                                                            mem[_8446 + 260] = 160
                                                            mem[_8446 + 356] = mem[_8446]
                                                            t = 0
                                                            v = _8446 + 32
                                                            w = _8446 + 388
                                                            while t < mem[_8446]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8446 + 292] = this.address
                                                            mem[_8446 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8446 + (32 * mem[_8446]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11040 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11113 = mem[_11040]
                                                            require mem[_11040] <= test266151307()
                                                            require _11040 + mem[_11040] + 31 < _11040 + return_data.size
                                                            _11198 = mem[_11040 + mem[_11040]]
                                                            if mem[_11040 + mem[_11040]] > test266151307():
                                                                revert with 0, 65
                                                            if _11040 + ceil32(return_data.size) + ceil32(32 * mem[_11040 + mem[_11040]]) + 1 > test266151307() or ceil32(32 * mem[_11040 + mem[_11040]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11040 + ceil32(return_data.size) + ceil32(32 * mem[_11040 + mem[_11040]]) + 1
                                                            mem[_11040 + ceil32(return_data.size)] = _11198
                                                            require (32 * _11198) + _11113 + 32 <= return_data.size
                                                            v = _11040 + ceil32(return_data.size) + 32
                                                            t = _11040 + _11113 + 32
                                                            while t < (32 * _11198) + _11040 + _11113 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11198 < 1:
                                                                revert with 0, 17
                                                            if _11198 - 1 >= _11198:
                                                                revert with 0, 50
                                                            _13271 = mem[(32 * _11198 - 1) + _11040 + ceil32(return_data.size) + 32]
                                                            mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13271
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13382 = mem[_8446 + 96]
                                                            mem[mem[64] + 164] = mem[_8446 + 96]
                                                            t = 0
                                                            v = _8446 + 128
                                                            w = mem[64] + 196
                                                            while t < _13382:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[mem[64] + 100] = this.address
                                                            mem[mem[64] + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.0x38ed1739 with:
                                                                 gas gas_remaining wei
                                                                args _13271, 1, 160, address(this.address), stor2.length, mem[mem[64] + 164 len (32 * _13382) + 32]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14830 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14914 = mem[_14830]
                                                            require mem[_14830] <= test266151307()
                                                            require _14830 + mem[_14830] + 31 < _14830 + return_data.size
                                                            _14986 = mem[_14830 + mem[_14830]]
                                                            if mem[_14830 + mem[_14830]] > test266151307():
                                                                revert with 0, 65
                                                            if _14830 + ceil32(return_data.size) + ceil32(32 * mem[_14830 + mem[_14830]]) + 1 > test266151307() or ceil32(32 * mem[_14830 + mem[_14830]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14830 + ceil32(return_data.size) + ceil32(32 * mem[_14830 + mem[_14830]]) + 1
                                                            mem[_14830 + ceil32(return_data.size)] = _14986
                                                            require (32 * _14986) + _14914 + 32 <= return_data.size
                                                            t = _14830 + ceil32(return_data.size) + 32
                                                            s = _14830 + _14914 + 32
                                                            while s < (32 * _14986) + _14830 + _14914 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14986 < 1:
                                                                revert with 0, 17
                                                            if _14986 - 1 >= _14986:
                                                                revert with 0, 50
                                                            _16126 = mem[(32 * _14986 - 1) + _14830 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14986 - 1) + _14830 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14986 - 1) + _14830 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14986 - 1) + _14830 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16126 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16126 - u, address(stor6.field_0)
                                                            t = _16126 - u
                                                            continue 
                                                        mem[mem[64] + 4] = this.address
                                                        staticcall address(stor6.field_0).0x70a08231 with:
                                                                gas gas_remaining wei
                                                               args this.address
                                                        mem[mem[64]] = ext_call.return_data[0]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _8105 = mem[64]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        t = 0
                                                        u = 0
                                                        v = mem[_8105] / 2
                                                        w = 0
                                                        while t < stor7:
                                                            if v <= 0:
                                                                revert with 0, 'RELAY:InvalidQty'
                                                            if uint256(stor6.field_512) > !v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and uint256(stor6.field_1280) > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and v > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v and uint256(stor6.field_768) > -1 / uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v:
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_768):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768) > !(uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) and v > -1 / uint256(stor6.field_1280):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * v and uint256(stor6.field_768) > -1 / uint256(stor6.field_1280) * v:
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor6.field_512) + v > -1 / stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) > !(uint256(stor6.field_1280) * v * uint256(stor6.field_768)):
                                                                revert with 0, 17
                                                            if stor3.length and uint256(stor6.field_512) + v > -1 / stor3.length:
                                                                revert with 0, 17
                                                            if not uint256(stor6.field_512):
                                                                revert with 0, 18
                                                            if (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512) and (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768)) > -1 / (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512):
                                                                revert with 0, 17
                                                            if not ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 18
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) <= uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) and uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v) > -1 / uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0):
                                                                revert with 0, 17
                                                            if uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) < uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v):
                                                                revert with 0, 17
                                                            if (uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor6.field_768) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) - (uint256(stor6.field_1280) * uint256(stor6.field_1280) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * v * uint256(stor6.field_768) / ((uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0)) / uint256(stor6.field_768)) + (uint256(stor6.field_1280) * v)) < (uint256(stor6.field_512) * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (v * stor3.length * uint256(stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)) + (uint256(stor6.field_1280) * v * uint256(stor6.field_768) * (uint256(stor6.field_512) * stor3.length) + (v * stor3.length) / uint256(stor6.field_512)):
                                                                if v < w:
                                                                    revert with 0, 17
                                                                if w > !(v - w / 2):
                                                                    revert with 0, 17
                                                                if t == -1:
                                                                    revert with 0, 17
                                                                t = t + 1
                                                                u = u
                                                                v = w + (v - w / 2)
                                                                w = w
                                                                continue 
                                                            if mem[_8105] < v:
                                                                revert with 0, 17
                                                            if v > !(mem[_8105] - v / 2):
                                                                revert with 0, 17
                                                            if t == -1:
                                                                revert with 0, 17
                                                            t = t + 1
                                                            u = v
                                                            v = v + (mem[_8105] - v / 2)
                                                            w = v
                                                            continue 
                                                        _8443 = mem[64]
                                                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                                        mem[mem[64] + 96] = 2
                                                        mem[64] = mem[64] + 192
                                                        if not mem[_8443]:
                                                            revert with 0, 50
                                                        mem[_8443 + 32] = address(stor6.field_0)
                                                        if 1 >= mem[_8443]:
                                                            revert with 0, 50
                                                        mem[_8443 + 64] = address(stor6.field_256)
                                                        if not mem[_8443 + 96]:
                                                            revert with 0, 50
                                                        mem[_8443 + 128] = address(stor6.field_256)
                                                        if 1 >= mem[_8443 + 96]:
                                                            revert with 0, 50
                                                        mem[_8443 + 160] = address(stor6.field_0)
                                                        if not u:
                                                            t = 0
                                                            continue 
                                                        if stor1.length == address(stor6.field_0):
                                                            mem[_8443 + 192] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[_8443 + 196] = 1
                                                            mem[_8443 + 228] = 128
                                                            mem[_8443 + 324] = mem[_8443]
                                                            t = 0
                                                            v = _8443 + 32
                                                            w = _8443 + 356
                                                            while t < mem[_8443]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8443 + 260] = this.address
                                                            mem[_8443 + 292] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                               value u wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8443 + (32 * mem[_8443]) + -mem[64] + 352]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11039 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11112 = mem[_11039]
                                                            require mem[_11039] <= test266151307()
                                                            require _11039 + mem[_11039] + 31 < _11039 + return_data.size
                                                            _11197 = mem[_11039 + mem[_11039]]
                                                            if mem[_11039 + mem[_11039]] > test266151307():
                                                                revert with 0, 65
                                                            if _11039 + ceil32(return_data.size) + ceil32(32 * mem[_11039 + mem[_11039]]) + 1 > test266151307() or ceil32(32 * mem[_11039 + mem[_11039]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11039 + ceil32(return_data.size) + ceil32(32 * mem[_11039 + mem[_11039]]) + 1
                                                            mem[_11039 + ceil32(return_data.size)] = _11197
                                                            require (32 * _11197) + _11112 + 32 <= return_data.size
                                                            v = _11039 + ceil32(return_data.size) + 32
                                                            t = _11039 + _11112 + 32
                                                            while t < (32 * _11197) + _11039 + _11112 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11197 < 1:
                                                                revert with 0, 17
                                                            if _11197 - 1 >= _11197:
                                                                revert with 0, 50
                                                            _13269 = mem[(32 * _11197 - 1) + _11039 + ceil32(return_data.size) + 32]
                                                            _13270 = mem[64]
                                                            mem[mem[64]] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = _13269
                                                            mem[mem[64] + 36] = 1
                                                            mem[mem[64] + 68] = 160
                                                            _13381 = mem[_8443 + 96]
                                                            mem[mem[64] + 164] = mem[_8443 + 96]
                                                            t = 0
                                                            v = _8443 + 128
                                                            w = mem[64] + 196
                                                            while t < _13381:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13270 + 100] = this.address
                                                            mem[_13270 + 132] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13270 + (32 * _13381) + -mem[64] + 192]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14829 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14913 = mem[_14829]
                                                            require mem[_14829] <= test266151307()
                                                            require _14829 + mem[_14829] + 31 < _14829 + return_data.size
                                                            _14985 = mem[_14829 + mem[_14829]]
                                                            if mem[_14829 + mem[_14829]] > test266151307():
                                                                revert with 0, 65
                                                            if _14829 + ceil32(return_data.size) + ceil32(32 * mem[_14829 + mem[_14829]]) + 1 > test266151307() or ceil32(32 * mem[_14829 + mem[_14829]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14829 + ceil32(return_data.size) + ceil32(32 * mem[_14829 + mem[_14829]]) + 1
                                                            mem[_14829 + ceil32(return_data.size)] = _14985
                                                            require (32 * _14985) + _14913 + 32 <= return_data.size
                                                            t = _14829 + ceil32(return_data.size) + 32
                                                            s = _14829 + _14913 + 32
                                                            while s < (32 * _14985) + _14829 + _14913 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14985 < 1:
                                                                revert with 0, 17
                                                            if _14985 - 1 >= _14985:
                                                                revert with 0, 50
                                                            _16125 = mem[(32 * _14985 - 1) + _14829 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14985 - 1) + _14829 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14985 - 1) + _14829 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14985 - 1) + _14829 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16125 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16125 - u, address(stor6.field_0)
                                                            t = _16125 - u
                                                            continue 
                                                        if stor1.length == address(stor6.field_256):
                                                            mem[_8443 + 192] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
                                                            mem[_8443 + 196] = u
                                                            mem[_8443 + 228] = 1
                                                            mem[_8443 + 260] = 160
                                                            mem[_8443 + 356] = mem[_8443]
                                                            t = 0
                                                            v = _8443 + 32
                                                            w = _8443 + 388
                                                            while t < mem[_8443]:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_8443 + 292] = this.address
                                                            mem[_8443 + 324] = stor2.length
                                                            call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _8443 + (32 * mem[_8443]) + -mem[64] + 384]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _11038 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _11111 = mem[_11038]
                                                            require mem[_11038] <= test266151307()
                                                            require _11038 + mem[_11038] + 31 < _11038 + return_data.size
                                                            _11196 = mem[_11038 + mem[_11038]]
                                                            if mem[_11038 + mem[_11038]] > test266151307():
                                                                revert with 0, 65
                                                            if _11038 + ceil32(return_data.size) + ceil32(32 * mem[_11038 + mem[_11038]]) + 1 > test266151307() or ceil32(32 * mem[_11038 + mem[_11038]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _11038 + ceil32(return_data.size) + ceil32(32 * mem[_11038 + mem[_11038]]) + 1
                                                            mem[_11038 + ceil32(return_data.size)] = _11196
                                                            require (32 * _11196) + _11111 + 32 <= return_data.size
                                                            v = _11038 + ceil32(return_data.size) + 32
                                                            t = _11038 + _11111 + 32
                                                            while t < (32 * _11196) + _11038 + _11111 + 32:
                                                                mem[v] = mem[t]
                                                                v = v + 32
                                                                t = t + 32
                                                                continue 
                                                            if _11196 < 1:
                                                                revert with 0, 17
                                                            if _11196 - 1 >= _11196:
                                                                revert with 0, 50
                                                            _13267 = mem[(32 * _11196 - 1) + _11038 + ceil32(return_data.size) + 32]
                                                            _13268 = mem[64]
                                                            mem[mem[64]] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                                                            mem[mem[64] + 4] = 1
                                                            mem[mem[64] + 36] = 128
                                                            _13380 = mem[_8443 + 96]
                                                            mem[mem[64] + 132] = mem[_8443 + 96]
                                                            t = 0
                                                            v = _8443 + 128
                                                            w = mem[64] + 164
                                                            while t < _13380:
                                                                mem[w] = mem[v + 12 len 20]
                                                                t = t + 1
                                                                v = v + 32
                                                                w = w + 32
                                                                continue 
                                                            mem[_13268 + 68] = this.address
                                                            mem[_13268 + 100] = stor2.length
                                                            call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                               value _13267 wei
                                                                 gas gas_remaining wei
                                                                args mem[mem[64] + 4 len _13268 + (32 * _13380) + -mem[64] + 160]
                                                            if not ext_call.success:
                                                                revert with ext_call.return_data[0 len return_data.size]
                                                            _14828 = mem[64]
                                                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                            mem[64] = mem[64] + ceil32(return_data.size)
                                                            require return_data.size >= 32
                                                            _14912 = mem[_14828]
                                                            require mem[_14828] <= test266151307()
                                                            require _14828 + mem[_14828] + 31 < _14828 + return_data.size
                                                            _14984 = mem[_14828 + mem[_14828]]
                                                            if mem[_14828 + mem[_14828]] > test266151307():
                                                                revert with 0, 65
                                                            if _14828 + ceil32(return_data.size) + ceil32(32 * mem[_14828 + mem[_14828]]) + 1 > test266151307() or ceil32(32 * mem[_14828 + mem[_14828]]) + 1 < 0:
                                                                revert with 0, 65
                                                            mem[64] = _14828 + ceil32(return_data.size) + ceil32(32 * mem[_14828 + mem[_14828]]) + 1
                                                            mem[_14828 + ceil32(return_data.size)] = _14984
                                                            require (32 * _14984) + _14912 + 32 <= return_data.size
                                                            t = _14828 + ceil32(return_data.size) + 32
                                                            s = _14828 + _14912 + 32
                                                            while s < (32 * _14984) + _14828 + _14912 + 32:
                                                                mem[t] = mem[s]
                                                                t = t + 32
                                                                s = s + 32
                                                                continue 
                                                            if _14984 < 1:
                                                                revert with 0, 17
                                                            if _14984 - 1 >= _14984:
                                                                revert with 0, 50
                                                            _16124 = mem[(32 * _14984 - 1) + _14828 + ceil32(return_data.size) + 32]
                                                            if mem[(32 * _14984 - 1) + _14828 + ceil32(return_data.size) + 32] < u:
                                                                revert with 0, 17
                                                            if mem[(32 * _14984 - 1) + _14828 + ceil32(return_data.size) + 32] - u <= 0:
                                                                revert with 0, 'RELAY:NegGain'
                                                            if mem[(32 * _14984 - 1) + _14828 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                                t = 0
                                                                continue 
                                                            mem[mem[64]] = address(stor6.field_256)
                                                            mem[mem[64] + 32] = _16124 - u
                                                            emit 0x2bcd0e02: address(stor6.field_256), _16124 - u, address(stor6.field_0)
                                                            t = _16124 - u
                                                            continue 
                                                        mem[_8443 + 192] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[_8443 + 196] = u
                                                        mem[_8443 + 228] = 1
                                                        mem[_8443 + 260] = 160
                                                        mem[_8443 + 356] = mem[_8443]
                                                        t = 0
                                                        v = _8443 + 32
                                                        w = _8443 + 388
                                                        while t < mem[_8443]:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_8443 + 292] = this.address
                                                        mem[_8443 + 324] = stor2.length
                                                        call address(stor6.field_1024).mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _8443 + (32 * mem[_8443]) + -mem[64] + 384]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _11037 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _11110 = mem[_11037]
                                                        require mem[_11037] <= test266151307()
                                                        require _11037 + mem[_11037] + 31 < _11037 + return_data.size
                                                        _11195 = mem[_11037 + mem[_11037]]
                                                        if mem[_11037 + mem[_11037]] > test266151307():
                                                            revert with 0, 65
                                                        if _11037 + ceil32(return_data.size) + ceil32(32 * mem[_11037 + mem[_11037]]) + 1 > test266151307() or ceil32(32 * mem[_11037 + mem[_11037]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _11037 + ceil32(return_data.size) + ceil32(32 * mem[_11037 + mem[_11037]]) + 1
                                                        mem[_11037 + ceil32(return_data.size)] = _11195
                                                        require (32 * _11195) + _11110 + 32 <= return_data.size
                                                        v = _11037 + ceil32(return_data.size) + 32
                                                        t = _11037 + _11110 + 32
                                                        while t < (32 * _11195) + _11037 + _11110 + 32:
                                                            mem[v] = mem[t]
                                                            v = v + 32
                                                            t = t + 32
                                                            continue 
                                                        if _11195 < 1:
                                                            revert with 0, 17
                                                        if _11195 - 1 >= _11195:
                                                            revert with 0, 50
                                                        _13265 = mem[(32 * _11195 - 1) + _11037 + ceil32(return_data.size) + 32]
                                                        _13266 = mem[64]
                                                        mem[mem[64]] = 0x38ed173900000000000000000000000000000000000000000000000000000000
                                                        mem[mem[64] + 4] = _13265
                                                        mem[mem[64] + 36] = 1
                                                        mem[mem[64] + 68] = 160
                                                        _13379 = mem[_8443 + 96]
                                                        mem[mem[64] + 164] = mem[_8443 + 96]
                                                        t = 0
                                                        v = _8443 + 128
                                                        w = mem[64] + 196
                                                        while t < _13379:
                                                            mem[w] = mem[v + 12 len 20]
                                                            t = t + 1
                                                            v = v + 32
                                                            w = w + 32
                                                            continue 
                                                        mem[_13266 + 100] = this.address
                                                        mem[_13266 + 132] = stor2.length
                                                        call stor[(6 * cd[((32 * idx) + cd[68] + 36)]) - (6 * s) + ('name', 'stor6', 6)].field_0.mem[mem[64] len 4] with:
                                                             gas gas_remaining wei
                                                            args mem[mem[64] + 4 len _13266 + (32 * _13379) + -mem[64] + 192]
                                                        if not ext_call.success:
                                                            revert with ext_call.return_data[0 len return_data.size]
                                                        _14827 = mem[64]
                                                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                                        mem[64] = mem[64] + ceil32(return_data.size)
                                                        require return_data.size >= 32
                                                        _14911 = mem[_14827]
                                                        require mem[_14827] <= test266151307()
                                                        require _14827 + mem[_14827] + 31 < _14827 + return_data.size
                                                        _14983 = mem[_14827 + mem[_14827]]
                                                        if mem[_14827 + mem[_14827]] > test266151307():
                                                            revert with 0, 65
                                                        if _14827 + ceil32(return_data.size) + ceil32(32 * mem[_14827 + mem[_14827]]) + 1 > test266151307() or ceil32(32 * mem[_14827 + mem[_14827]]) + 1 < 0:
                                                            revert with 0, 65
                                                        mem[64] = _14827 + ceil32(return_data.size) + ceil32(32 * mem[_14827 + mem[_14827]]) + 1
                                                        mem[_14827 + ceil32(return_data.size)] = _14983
                                                        require (32 * _14983) + _14911 + 32 <= return_data.size
                                                        t = _14827 + ceil32(return_data.size) + 32
                                                        s = _14827 + _14911 + 32
                                                        while s < (32 * _14983) + _14827 + _14911 + 32:
                                                            mem[t] = mem[s]
                                                            t = t + 32
                                                            s = s + 32
                                                            continue 
                                                        if _14983 < 1:
                                                            revert with 0, 17
                                                        if _14983 - 1 >= _14983:
                                                            revert with 0, 50
                                                        _16123 = mem[(32 * _14983 - 1) + _14827 + ceil32(return_data.size) + 32]
                                                        if mem[(32 * _14983 - 1) + _14827 + ceil32(return_data.size) + 32] < u:
                                                            revert with 0, 17
                                                        if mem[(32 * _14983 - 1) + _14827 + ceil32(return_data.size) + 32] - u <= 0:
                                                            revert with 0, 'RELAY:NegGain'
                                                        if mem[(32 * _14983 - 1) + _14827 + ceil32(return_data.size) + 32] - u < cd[((32 * idx) + cd[100] + 36)]:
                                                            t = 0
                                                            continue 
                                                        mem[mem[64]] = address(stor6.field_256)
                                                        mem[mem[64] + 32] = _16123 - u
                                                        emit 0x2bcd0e02: address(stor6.field_256), _16123 - u, address(stor6.field_0)
                                                        t = _16123 - u
                                                        continue 
                        if idx >= ('cd', 68).length:
                            revert with 0, 50
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        s = cd[((32 * idx) + cd[68] + 36)]
                        continue 
                stor6.length = 0
                idx = 0
                while 6 * stor6.length > idx:
                    stor6[idx].field_0 = 0
                    stor6[idx].field_256 = 0
                    uint256(stor6[idx].field_512) = 0
                    uint256(stor6[idx].field_768) = 0
                    stor6[idx].field_1024 = 0
                    uint256(stor6[idx].field_1280) = 0
                    idx = idx + 6
                    continue 
            if uint32(call.func_hash) >> 224 != unknown_0x58c32ba8(?????):
                if unknown_0x5bcf1f76(?????) == uint32(call.func_hash) >> 224:
                    require not msg.value
                    return stor1.length
                require unknown_0x63e91678(?????) == uint32(call.func_hash) >> 224
                require not msg.value
                require calldata.size - 4 >= 32
                require cd[4] == address(cd[4])
                if owner != msg.sender:
                    revert with 0, 'Caller is not owner'
                uint256(stor4[address(cd[4])]) = 1
            require not msg.value
            require calldata.size - 4 >= 192
            require cd[4] == address(cd[4])
            require cd[100] <= test266151307()
            require cd[100] + 35 < calldata.size
            require ('cd', 100).length <= test266151307()
            require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
            require cd[132] == address(cd[132])
            if msg.sender == owner:
                mem[128] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
                mem[132] = cd[68]
                mem[164] = 128
                mem[260] = ('cd', 100).length
                idx = 0
                s = cd[100] + 36
                t = 292
                while idx < ('cd', 100).length:
                    require cd[s] == address(cd[s])
                    mem[t] = address(cd[s])
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[196] = address(cd[132])
                mem[228] = cd[164]
                call address(cd[4]).swapETHForExactTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args cd[68], Array(len=('cd', 100).length, data=mem[292 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 128
                require return_data.size >= 32
                _693 = mem[128 len 4], Mask(224, 32, cd[68]) >> 32
                require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
                require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 159 < return_data.size + 128
                _783 = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
                if mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 1 < 0:
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129
                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
                require (32 * _783) + _693 + 32 <= return_data.size
                mem[ceil32(return_data.size) + 160 len ceil32(32 * _783)] = mem[_693 + 160 len ceil32(32 * _783)]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _783
                mem[mem[64] + 64 len 32 * _783] = mem[ceil32(return_data.size) + 160 len 32 * _783]
                return Array(len=_783, data=mem[mem[64] + 64 len 32 * _783])
            mem[0] = msg.sender
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
            mem[128] = 0xfb3bdb4100000000000000000000000000000000000000000000000000000000
            mem[132] = cd[68]
            mem[164] = 128
            mem[260] = ('cd', 100).length
            idx = 0
            s = cd[100] + 36
            t = 292
            while idx < ('cd', 100).length:
                require cd[s] == address(cd[s])
                mem[t] = address(cd[s])
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[196] = address(cd[132])
            mem[228] = cd[164]
            call address(cd[4]).swapETHForExactTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
               value cd[36] wei
                 gas gas_remaining wei
                args cd[68], Array(len=('cd', 100).length, data=mem[292 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 128
            require return_data.size >= 32
            _694 = mem[128 len 4], Mask(224, 32, cd[68]) >> 32
            require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
            require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 159 < return_data.size + 128
            _784 = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
            if mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 1 < 0:
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129
            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
            require (32 * _784) + _694 + 32 <= return_data.size
            mem[ceil32(return_data.size) + 160 len ceil32(32 * _784)] = mem[_694 + 160 len ceil32(32 * _784)]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _784
            mem[mem[64] + 64 len 32 * _784] = mem[ceil32(return_data.size) + 160 len 32 * _784]
            return Array(len=_784, data=mem[mem[64] + 64 len 32 * _784])
        if unknown_0x0d8ca571(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 192
            require cd[4] == address(cd[4])
            require cd[100] <= test266151307()
            require cd[100] + 35 < calldata.size
            require ('cd', 100).length <= test266151307()
            require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
            require cd[132] == address(cd[132])
            if msg.sender == owner:
                mem[128] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
                mem[132] = cd[68]
                mem[164] = 128
                mem[260] = ('cd', 100).length
                idx = 0
                s = cd[100] + 36
                t = 292
                while idx < ('cd', 100).length:
                    require cd[s] == address(cd[s])
                    mem[t] = address(cd[s])
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[196] = address(cd[132])
                mem[228] = cd[164]
                call address(cd[4]).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
                   value cd[36] wei
                     gas gas_remaining wei
                    args cd[68], Array(len=('cd', 100).length, data=mem[292 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 128
                require return_data.size >= 32
                _687 = mem[128 len 4], Mask(224, 32, cd[68]) >> 32
                require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
                require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 159 < return_data.size + 128
                _777 = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
                if mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 1 < 0:
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129
                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
                require (32 * _777) + _687 + 32 <= return_data.size
                mem[ceil32(return_data.size) + 160 len ceil32(32 * _777)] = mem[_687 + 160 len ceil32(32 * _777)]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _777
                mem[mem[64] + 64 len 32 * _777] = mem[ceil32(return_data.size) + 160 len 32 * _777]
                return Array(len=_777, data=mem[mem[64] + 64 len 32 * _777])
            mem[0] = msg.sender
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
            mem[128] = 0x7ff36ab500000000000000000000000000000000000000000000000000000000
            mem[132] = cd[68]
            mem[164] = 128
            mem[260] = ('cd', 100).length
            idx = 0
            s = cd[100] + 36
            t = 292
            while idx < ('cd', 100).length:
                require cd[s] == address(cd[s])
                mem[t] = address(cd[s])
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[196] = address(cd[132])
            mem[228] = cd[164]
            call address(cd[4]).swapExactETHForTokens(uint256 arg1, address[] arg2, address arg3, uint256 arg4) with:
               value cd[36] wei
                 gas gas_remaining wei
                args cd[68], Array(len=('cd', 100).length, data=mem[292 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 128
            require return_data.size >= 32
            _688 = mem[128 len 4], Mask(224, 32, cd[68]) >> 32
            require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 <= test266151307()
            require mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 159 < return_data.size + 128
            _778 = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
            if mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 1 < 0:
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]) + 129
            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[68]) >> 32 + 128]
            require (32 * _778) + _688 + 32 <= return_data.size
            mem[ceil32(return_data.size) + 160 len ceil32(32 * _778)] = mem[_688 + 160 len ceil32(32 * _778)]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _778
            mem[mem[64] + 64 len 32 * _778] = mem[ceil32(return_data.size) + 160 len 32 * _778]
            return Array(len=_778, data=mem[mem[64] + 64 len 32 * _778])
        if unknown_0x22b58410(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 192
            require cd[4] == address(cd[4])
            require cd[100] <= test266151307()
            require cd[100] + 35 < calldata.size
            require ('cd', 100).length <= test266151307()
            require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
            require cd[132] == address(cd[132])
            if msg.sender == owner:
                mem[128] = 0x8803dbee00000000000000000000000000000000000000000000000000000000
                mem[132] = cd[36]
                mem[164] = cd[68]
                mem[196] = 160
                mem[292] = ('cd', 100).length
                idx = 0
                s = cd[100] + 36
                t = 324
                while idx < ('cd', 100).length:
                    require cd[s] == address(cd[s])
                    mem[t] = address(cd[s])
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                mem[228] = address(cd[132])
                mem[260] = cd[164]
                call address(cd[4]).swapTokensForExactTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                     gas gas_remaining wei
                    args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = ceil32(return_data.size) + 128
                require return_data.size >= 32
                _689 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
                require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
                require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
                _779 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
                if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
                    revert with 0, 65
                if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
                    revert with 0, 65
                mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
                mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
                require (32 * _779) + _689 + 32 <= return_data.size
                mem[ceil32(return_data.size) + 160 len ceil32(32 * _779)] = mem[_689 + 160 len ceil32(32 * _779)]
                mem[mem[64]] = 32
                mem[mem[64] + 32] = _779
                mem[mem[64] + 64 len 32 * _779] = mem[ceil32(return_data.size) + 160 len 32 * _779]
                return Array(len=_779, data=mem[mem[64] + 64 len 32 * _779])
            mem[0] = msg.sender
            mem[32] = 4
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
            mem[128] = 0x8803dbee00000000000000000000000000000000000000000000000000000000
            mem[132] = cd[36]
            mem[164] = cd[68]
            mem[196] = 160
            mem[292] = ('cd', 100).length
            idx = 0
            s = cd[100] + 36
            t = 324
            while idx < ('cd', 100).length:
                require cd[s] == address(cd[s])
                mem[t] = address(cd[s])
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[228] = address(cd[132])
            mem[260] = cd[164]
            call address(cd[4]).swapTokensForExactTokens(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
                 gas gas_remaining wei
                args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 128
            require return_data.size >= 32
            _690 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
            _780 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            require (32 * _780) + _690 + 32 <= return_data.size
            mem[ceil32(return_data.size) + 160 len ceil32(32 * _780)] = mem[_690 + 160 len ceil32(32 * _780)]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _780
            mem[mem[64] + 64 len 32 * _780] = mem[ceil32(return_data.size) + 160 len 32 * _780]
            return Array(len=_780, data=mem[mem[64] + 64 len 32 * _780])
        if unknown_0x2ec9ad44(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] == address(cd[4])
            if owner != msg.sender:
                revert with 0, 'Caller is not owner'
            uint256(stor4[address(cd[4])]) = 0
        require unknown_0x375734d9(?????) == uint32(call.func_hash) >> 224
        require not msg.value
        require calldata.size - 4 >= 192
        require cd[4] == address(cd[4])
        require cd[100] <= test266151307()
        require cd[100] + 35 < calldata.size
        require ('cd', 100).length <= test266151307()
        require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
        require cd[132] == address(cd[132])
        if msg.sender == owner:
            mem[128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
            mem[132] = cd[36]
            mem[164] = cd[68]
            mem[196] = 160
            mem[292] = ('cd', 100).length
            idx = 0
            s = cd[100] + 36
            t = 324
            while idx < ('cd', 100).length:
                require cd[s] == address(cd[s])
                mem[t] = address(cd[s])
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[228] = address(cd[132])
            mem[260] = cd[164]
            call address(cd[4]).0x38ed1739 with:
                 gas gas_remaining wei
                args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 128
            require return_data.size >= 32
            _691 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
            _781 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            require (32 * _781) + _691 + 32 <= return_data.size
            mem[ceil32(return_data.size) + 160 len ceil32(32 * _781)] = mem[_691 + 160 len ceil32(32 * _781)]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _781
            mem[mem[64] + 64 len 32 * _781] = mem[ceil32(return_data.size) + 160 len 32 * _781]
            return Array(len=_781, data=mem[mem[64] + 64 len 32 * _781])
        mem[0] = msg.sender
        mem[32] = 4
        if uint256(stor4[msg.sender]) != 1:
            revert with 0, 'Caller is neither owner nor accessor'
        mem[128] = 0x38ed173900000000000000000000000000000000000000000000000000000000
        mem[132] = cd[36]
        mem[164] = cd[68]
        mem[196] = 160
        mem[292] = ('cd', 100).length
        idx = 0
        s = cd[100] + 36
        t = 324
        while idx < ('cd', 100).length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[228] = address(cd[132])
        mem[260] = cd[164]
        call address(cd[4]).0x38ed1739 with:
             gas gas_remaining wei
            args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 128
        require return_data.size >= 32
        _692 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
        _782 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
        mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        require (32 * _782) + _692 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 160 len ceil32(32 * _782)] = mem[_692 + 160 len ceil32(32 * _782)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _782
        mem[mem[64] + 64 len 32 * _782] = mem[ceil32(return_data.size) + 160 len 32 * _782]
        return Array(len=_782, data=mem[mem[64] + 64 len 32 * _782])
    if unknown_0xc3b35a7e(?????) > uint32(call.func_hash) >> 224:
        if unknown_0x697b894a(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            require calldata.size - 4 >= 64
            require cd[4] == address(cd[4])
            if owner != msg.sender:
                if uint256(stor4[msg.sender]) != 1:
                    revert with 0, 'Caller is neither owner nor accessor'
            call address(cd[4]) with:
               value cd[36] wei
                 gas gas_remaining wei
            if not ext_call.success:
                revert with 0, 'TransferHelper: ETH_TRANSFER_FAILED'
        if unknown_0x893d20e8(?????) == uint32(call.func_hash) >> 224:
            require not msg.value
            return owner
        if uint32(call.func_hash) >> 224 != unknown_0x9c91fcb5(?????):
            require unknown_0xa6f9dae1(?????) == uint32(call.func_hash) >> 224
            require not msg.value
            require calldata.size - 4 >= 32
            require cd[4] == address(cd[4])
            if owner != msg.sender:
                revert with 0, 'Caller is not owner'
            owner = address(cd[4])
        require not msg.value
        require calldata.size - 4 >= 192
        require cd[4] == address(cd[4])
        require cd[100] <= test266151307()
        require cd[100] + 35 < calldata.size
        require ('cd', 100).length <= test266151307()
        require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
        require cd[132] == address(cd[132])
        if msg.sender == owner:
            mem[128] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
            mem[132] = cd[36]
            mem[164] = cd[68]
            mem[196] = 160
            mem[292] = ('cd', 100).length
            idx = 0
            s = cd[100] + 36
            t = 324
            while idx < ('cd', 100).length:
                require cd[s] == address(cd[s])
                mem[t] = address(cd[s])
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            mem[228] = address(cd[132])
            mem[260] = cd[164]
            call address(cd[4]).0x18cbafe5 with:
                 gas gas_remaining wei
                args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = ceil32(return_data.size) + 128
            require return_data.size >= 32
            _699 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
            require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
            _789 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
                revert with 0, 65
            if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
                revert with 0, 65
            mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
            mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
            require (32 * _789) + _699 + 32 <= return_data.size
            mem[ceil32(return_data.size) + 160 len ceil32(32 * _789)] = mem[_699 + 160 len ceil32(32 * _789)]
            mem[mem[64]] = 32
            mem[mem[64] + 32] = _789
            mem[mem[64] + 64 len 32 * _789] = mem[ceil32(return_data.size) + 160 len 32 * _789]
            return Array(len=_789, data=mem[mem[64] + 64 len 32 * _789])
        mem[0] = msg.sender
        if uint256(stor4[msg.sender]) != 1:
            revert with 0, 'Caller is neither owner nor accessor'
        mem[128] = 0x18cbafe500000000000000000000000000000000000000000000000000000000
        mem[132] = cd[36]
        mem[164] = cd[68]
        mem[196] = 160
        mem[292] = ('cd', 100).length
        idx = 0
        s = cd[100] + 36
        t = 324
        while idx < ('cd', 100).length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[228] = address(cd[132])
        mem[260] = cd[164]
        call address(cd[4]).0x18cbafe5 with:
             gas gas_remaining wei
            args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 128
        require return_data.size >= 32
        _700 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
        _790 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
        mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        require (32 * _790) + _700 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 160 len ceil32(32 * _790)] = mem[_700 + 160 len ceil32(32 * _790)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _790
        mem[mem[64] + 64 len 32 * _790] = mem[ceil32(return_data.size) + 160 len 32 * _790]
        return Array(len=_790, data=mem[mem[64] + 64 len 32 * _790])
    if unknown_0xc3b35a7e(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 96
        require cd[4] == address(cd[4])
        require cd[36] == address(cd[36])
        if owner != msg.sender:
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
        mem[228 len 96] = unknown_0xa9059cbb(?????), address(cd[36]) << 64, 0, cd[68], mem[228 len 28]
        call address(cd[4]).mem[228 len 4] with:
             gas gas_remaining wei
            args mem[232 len 64]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            require not mem[96]
        mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        if return_data.size:
            require return_data.size >= 32
            require mem[260] == bool(mem[260])
            if not mem[260]:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
    if unknown_0xe1f21c67(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 96
        require cd[4] == address(cd[4])
        require cd[36] == address(cd[36])
        if owner != msg.sender:
            revert with 0, 'Caller is not owner'
        mem[228 len 96] = approve(address arg1, uint256 arg2), address(cd[36]) << 64, 0, cd[68], mem[228 len 28]
        call address(cd[4]).mem[228 len 4] with:
             gas gas_remaining wei
            args mem[232 len 64]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TransferHelper: APPROVE_FAILED'
            require not mem[96]
        mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TransferHelper: APPROVE_FAILED'
        if return_data.size:
            require return_data.size >= 32
            require mem[260] == bool(mem[260])
            if not mem[260]:
                revert with 0, 'TransferHelper: APPROVE_FAILED'
    if unknown_0xf14210a6(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 32
        if owner != msg.sender:
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
            if owner != msg.sender:
                if uint256(stor4[msg.sender]) != 1:
                    revert with 0, 'Caller is neither owner nor accessor'
        call msg.sender with:
           value cd[4] wei
             gas gas_remaining wei
        if not ext_call.success:
            revert with 0, 'TransferHelper: ETH_TRANSFER_FAILED'
    if unknown_0xf3fef3a3(?????) == uint32(call.func_hash) >> 224:
        require not msg.value
        require calldata.size - 4 >= 64
        require cd[4] == address(cd[4])
        if owner != msg.sender:
            if uint256(stor4[msg.sender]) != 1:
                revert with 0, 'Caller is neither owner nor accessor'
            if owner != msg.sender:
                if uint256(stor4[msg.sender]) != 1:
                    revert with 0, 'Caller is neither owner nor accessor'
        mem[228 len 96] = unknown_0xa9059cbb(?????), msg.sender, cd[36], mem[228 len 28]
        call address(cd[4]).mem[228 len 4] with:
             gas gas_remaining wei
            args mem[232 len 64]
        if not return_data.size:
            if not ext_call.success:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
            require not mem[96]
        mem[260 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            revert with 0, 'TransferHelper: TRANSFER_FAILED'
        if return_data.size:
            require return_data.size >= 32
            require mem[260] == bool(mem[260])
            if not mem[260]:
                revert with 0, 'TransferHelper: TRANSFER_FAILED'
    require unknown_0xfa3219d5(?????) == uint32(call.func_hash) >> 224
    require not msg.value
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[100] <= test266151307()
    require cd[100] + 35 < calldata.size
    require ('cd', 100).length <= test266151307()
    require cd[100] + (32 * ('cd', 100).length) + 36 <= calldata.size
    require cd[132] == address(cd[132])
    if msg.sender == owner:
        mem[128] = 0x4a25d94a00000000000000000000000000000000000000000000000000000000
        mem[132] = cd[36]
        mem[164] = cd[68]
        mem[196] = 160
        mem[292] = ('cd', 100).length
        idx = 0
        s = cd[100] + 36
        t = 324
        while idx < ('cd', 100).length:
            require cd[s] == address(cd[s])
            mem[t] = address(cd[s])
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        mem[228] = address(cd[132])
        mem[260] = cd[164]
        call address(cd[4]).swapTokensForExactETH(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
             gas gas_remaining wei
            args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = ceil32(return_data.size) + 128
        require return_data.size >= 32
        _719 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
        require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
        _833 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
            revert with 0, 65
        if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
            revert with 0, 65
        mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
        mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
        require (32 * _833) + _719 + 32 <= return_data.size
        mem[ceil32(return_data.size) + 160 len ceil32(32 * _833)] = mem[_719 + 160 len ceil32(32 * _833)]
        mem[mem[64]] = 32
        mem[mem[64] + 32] = _833
        mem[mem[64] + 64 len 32 * _833] = mem[ceil32(return_data.size) + 160 len 32 * _833]
        return Array(len=_833, data=mem[mem[64] + 64 len 32 * _833])
    mem[0] = msg.sender
    if uint256(stor4[msg.sender]) != 1:
        revert with 0, 'Caller is neither owner nor accessor'
    mem[128] = 0x4a25d94a00000000000000000000000000000000000000000000000000000000
    mem[132] = cd[36]
    mem[164] = cd[68]
    mem[196] = 160
    mem[292] = ('cd', 100).length
    idx = 0
    s = cd[100] + 36
    t = 324
    while idx < ('cd', 100).length:
        require cd[s] == address(cd[s])
        mem[t] = address(cd[s])
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    mem[228] = address(cd[132])
    mem[260] = cd[164]
    call address(cd[4]).swapTokensForExactETH(uint256 arg1, uint256 arg2, address[] arg3, address arg4, uint256 arg5) with:
         gas gas_remaining wei
        args cd[36], cd[68], Array(len=('cd', 100).length, data=mem[324 len 32 * ('cd', 100).length]), address(cd[132]), cd[164]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[128 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = ceil32(return_data.size) + 128
    require return_data.size >= 32
    _720 = mem[128 len 4], Mask(224, 32, cd[36]) >> 32
    require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 <= test266151307()
    require mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 159 < return_data.size + 128
    _834 = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
    if mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128] > test266151307():
        revert with 0, 65
    if ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129 > test266151307() or ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 1 < 0:
        revert with 0, 65
    mem[64] = ceil32(return_data.size) + ceil32(32 * mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]) + 129
    mem[ceil32(return_data.size) + 128] = mem[mem[128 len 4], Mask(224, 32, cd[36]) >> 32 + 128]
    require (32 * _834) + _720 + 32 <= return_data.size
    mem[ceil32(return_data.size) + 160 len ceil32(32 * _834)] = mem[_720 + 160 len ceil32(32 * _834)]
    mem[mem[64]] = 32
    mem[mem[64] + 32] = _834
    mem[mem[64] + 64 len 32 * _834] = mem[ceil32(return_data.size) + 160 len 32 * _834]
    return Array(len=_834, data=mem[mem[64] + 64 len 32 * _834])
}



}
