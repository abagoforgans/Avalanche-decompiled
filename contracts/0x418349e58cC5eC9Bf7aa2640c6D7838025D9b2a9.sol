contract main {




// =====================  Runtime code  =====================


#
#  - sub_df9aee68(?)
#
address stor0;
uint256 unlockTime;
address stor2;
address stor3;
address stor4;
uint256 stor4;
address stor5;
uint256 stor5;
address stor6;
address stor7;
uint256 stor8;
uint8 stor9;
uint256 stor9;

function unlockTime() {
    return unlockTime
}

function _fallback() payable {
    revert
}

function lockPool(uint256 arg1) {
    require calldata.size - 4 >= 32
}

function sub_cdd13f72(?) {
    require calldata.size - 4 >= 128
    stor2 = arg1
    stor3 = arg2
    uint256(stor9) = arg3 > 0 or Mask(248, 8, uint256(stor9))
    require ext_code.size(arg1)
    staticcall arg1.token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint256(stor4) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor4))
    require ext_code.size(arg1)
    staticcall arg1.token1() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint256(stor5) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor5))
    if uint8(stor9):
        stor6 = address(stor5)
        stor7 = address(stor4)
        stor8 = arg3
    else:
        stor6 = address(stor4)
        stor7 = address(stor5)
        stor8 = arg4
    require ext_code.size(arg1)
    call arg1.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
         gas gas_remaining wei
        args arg3, arg4, address(this.address), '1'
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(stor6)
    staticcall stor6.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor6)
    call stor6.0xa9059cbb with:
         gas gas_remaining wei
        args stor0, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor7)
    staticcall stor7.0x70a08231 with:
            gas gas_remaining wei
           args this.address
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(stor7)
    call stor7.0xa9059cbb with:
         gas gas_remaining wei
        args stor0, ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function elkCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if msg.sender == stor3:
        require ext_code.size(stor7)
        staticcall stor7.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < stor8:
            revert with 0, 'not enought token B to repay'
        require ext_code.size(stor7)
        call stor7.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, stor8
    else:
        require ext_code.size(stor3)
        staticcall stor3.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        if stor8 <= 0:
            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if not stor8:
            require ext_call.return_data[18 len 14]
            require ext_call.return_data[18 len 14]
            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                revert with 0, 'SafeMath: addition overflow'
            require 1000 * ext_call.return_data[18 len 14]
            require ext_code.size(stor2)
            staticcall stor2.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if uint8(stor9):
                if arg2 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg2:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg2
                    if 997 * arg2 / arg2 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg2:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 0 / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg2
                                if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        require 997 * arg2
                        if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
            else:
                if arg3 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg3:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg3
                    if 997 * arg3 / arg3 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg3:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 0 / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg3
                                if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                    else:
                        require 997 * arg3
                        if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
        else:
            require stor8
            if 997 * stor8 / stor8 != 997:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if not 997 * stor8:
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
            else:
                require 997 * stor8
                if 997 * stor8 * ext_call.return_data[50 len 14] / 997 * stor8 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function joeCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if msg.sender == stor3:
        require ext_code.size(stor7)
        staticcall stor7.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < stor8:
            revert with 0, 'not enought token B to repay'
        require ext_code.size(stor7)
        call stor7.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, stor8
    else:
        require ext_code.size(stor3)
        staticcall stor3.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        if stor8 <= 0:
            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if not stor8:
            require ext_call.return_data[18 len 14]
            require ext_call.return_data[18 len 14]
            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                revert with 0, 'SafeMath: addition overflow'
            require 1000 * ext_call.return_data[18 len 14]
            require ext_code.size(stor2)
            staticcall stor2.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if uint8(stor9):
                if arg2 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg2:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg2
                    if 997 * arg2 / arg2 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg2:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 0 / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg2
                                if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        require 997 * arg2
                        if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
            else:
                if arg3 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg3:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg3
                    if 997 * arg3 / arg3 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg3:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 0 / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg3
                                if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                    else:
                        require 997 * arg3
                        if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
        else:
            require stor8
            if 997 * stor8 / stor8 != 997:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if not 997 * stor8:
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
            else:
                require 997 * stor8
                if 997 * stor8 * ext_call.return_data[50 len 14] / 997 * stor8 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function lydiaCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if msg.sender == stor3:
        require ext_code.size(stor7)
        staticcall stor7.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < stor8:
            revert with 0, 'not enought token B to repay'
        require ext_code.size(stor7)
        call stor7.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, stor8
    else:
        require ext_code.size(stor3)
        staticcall stor3.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        if stor8 <= 0:
            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if not stor8:
            require ext_call.return_data[18 len 14]
            require ext_call.return_data[18 len 14]
            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                revert with 0, 'SafeMath: addition overflow'
            require 1000 * ext_call.return_data[18 len 14]
            require ext_code.size(stor2)
            staticcall stor2.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if uint8(stor9):
                if arg2 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg2:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg2
                    if 997 * arg2 / arg2 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg2:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 0 / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg2
                                if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        require 997 * arg2
                        if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
            else:
                if arg3 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg3:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg3
                    if 997 * arg3 / arg3 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg3:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 0 / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg3
                                if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                    else:
                        require 997 * arg3
                        if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
        else:
            require stor8
            if 997 * stor8 / stor8 != 997:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if not 997 * stor8:
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
            else:
                require 997 * stor8
                if 997 * stor8 * ext_call.return_data[50 len 14] / 997 * stor8 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function canaryCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if msg.sender == stor3:
        require ext_code.size(stor7)
        staticcall stor7.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < stor8:
            revert with 0, 'not enought token B to repay'
        require ext_code.size(stor7)
        call stor7.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, stor8
    else:
        require ext_code.size(stor3)
        staticcall stor3.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        if stor8 <= 0:
            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if not stor8:
            require ext_call.return_data[18 len 14]
            require ext_call.return_data[18 len 14]
            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                revert with 0, 'SafeMath: addition overflow'
            require 1000 * ext_call.return_data[18 len 14]
            require ext_code.size(stor2)
            staticcall stor2.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if uint8(stor9):
                if arg2 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg2:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg2
                    if 997 * arg2 / arg2 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg2:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 0 / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg2
                                if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        require 997 * arg2
                        if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
            else:
                if arg3 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg3:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg3
                    if 997 * arg3 / arg3 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg3:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 0 / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg3
                                if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                    else:
                        require 997 * arg3
                        if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
        else:
            require stor8
            if 997 * stor8 / stor8 != 997:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if not 997 * stor8:
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
            else:
                require 997 * stor8
                if 997 * stor8 * ext_call.return_data[50 len 14] / 997 * stor8 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}

function pangolinCall(address arg1, uint256 arg2, uint256 arg3, bytes arg4) {
    require calldata.size - 4 >= 128
    require arg4 <= 4294967296
    require arg4 + 36 <= calldata.size
    require arg4.length <= 4294967296 and arg4 + arg4.length + 36 <= calldata.size
    if msg.sender == stor3:
        require ext_code.size(stor7)
        staticcall stor7.0x70a08231 with:
                gas gas_remaining wei
               args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if ext_call.return_data[0] < stor8:
            revert with 0, 'not enought token B to repay'
        require ext_code.size(stor7)
        call stor7.0xa9059cbb with:
             gas gas_remaining wei
            args msg.sender, stor8
    else:
        require ext_code.size(stor3)
        staticcall stor3.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        if stor8 <= 0:
            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
        if ext_call.return_data[18 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if ext_call.return_data[50 len 14] <= 0:
            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
        if not stor8:
            require ext_call.return_data[18 len 14]
            require ext_call.return_data[18 len 14]
            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                revert with 0, 'SafeMath: addition overflow'
            require 1000 * ext_call.return_data[18 len 14]
            require ext_code.size(stor2)
            staticcall stor2.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            if uint8(stor9):
                if arg2 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg2:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg2
                    if 997 * arg2 / arg2 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg2:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 0 / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg2
                                if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        require 997 * arg2
                        if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg2 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg2
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                            if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
            else:
                if arg3 <= 0:
                    revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                if ext_call.return_data[18 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if ext_call.return_data[50 len 14] <= 0:
                    revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                if not arg3:
                    require ext_call.return_data[18 len 14]
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require 1000 * ext_call.return_data[18 len 14]
                    if not 0 / 1000 * ext_call.return_data[18 len 14]:
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 0:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 0
                    else:
                        require 0 / 1000 * ext_call.return_data[18 len 14]
                        if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        require ext_code.size(stor3)
                        if not uint8(stor9):
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                        else:
                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                 gas gas_remaining wei
                                args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(stor6)
                        staticcall stor6.0x70a08231 with:
                                gas gas_remaining wei
                               args this.address
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                            revert with 0, 'not enought token A to repay'
                        require ext_code.size(stor6)
                        call stor6.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                else:
                    require arg3
                    if 997 * arg3 / arg3 != 997:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if not 997 * arg3:
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 0 / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 997 * arg3
                                if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                    else:
                        require 997 * arg3
                        if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                        if not ext_call.return_data[18 len 14]:
                            if 997 * arg3 < 0:
                                revert with 0, 'SafeMath: addition overflow'
                            require 997 * arg3
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                        else:
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                            if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 1000 * Mask(112, 0, ext_call.return_data[0]), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
        else:
            require stor8
            if 997 * stor8 / stor8 != 997:
                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
            if not 997 * stor8:
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
            else:
                require 997 * stor8
                if 997 * stor8 * ext_call.return_data[50 len 14] / 997 * stor8 != ext_call.return_data[50 len 14]:
                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                if not ext_call.return_data[18 len 14]:
                    if 997 * stor8 < 0:
                        revert with 0, 'SafeMath: addition overflow'
                    require 997 * stor8
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / 997 * stor8, address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                else:
                    require ext_call.return_data[18 len 14]
                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                    if (1000 * ext_call.return_data[18 len 14]) + (997 * stor8) < 1000 * ext_call.return_data[18 len 14]:
                        revert with 0, 'SafeMath: addition overflow'
                    require (1000 * ext_call.return_data[18 len 14]) + (997 * stor8)
                    require ext_code.size(stor2)
                    staticcall stor2.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    if uint8(stor9):
                        if arg2 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg2:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg2
                            if 997 * arg2 / arg2 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg2:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 0 / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg2
                                        if 1003 * 0 / 997 * arg2 / 0 / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                            else:
                                require 997 * arg2
                                if 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg2 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg2
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 / 997 * arg2 * ext_call.return_data[50 len 14] / 997 * arg2 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg2 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                    if not 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2)
                                        if 1003 * 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) / 997 * arg2 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg2) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg2 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg2) / 1000
                    else:
                        if arg3 <= 0:
                            revert with 0, 32, 42, 0x7750616e676f6c696e4c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e, mem[302 len 22]
                        if ext_call.return_data[18 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if ext_call.return_data[50 len 14] <= 0:
                            revert with 0, 32, 39, 0x5450616e676f6c696e4c6962726172793a20494e53554646494349454e545f4c49515549444954, mem[299 len 25]
                        if not arg3:
                            require ext_call.return_data[18 len 14]
                            require ext_call.return_data[18 len 14]
                            if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if 1000 * ext_call.return_data[18 len 14] < 1000 * ext_call.return_data[18 len 14]:
                                revert with 0, 'SafeMath: addition overflow'
                            require 1000 * ext_call.return_data[18 len 14]
                            if not 0 / 1000 * ext_call.return_data[18 len 14]:
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 0:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 0
                            else:
                                require 0 / 1000 * ext_call.return_data[18 len 14]
                                if 1003 * 0 / 1000 * ext_call.return_data[18 len 14] / 0 / 1000 * ext_call.return_data[18 len 14] != 1003:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                require ext_code.size(stor3)
                                if not uint8(stor9):
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                else:
                                    call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                         gas gas_remaining wei
                                        args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require ext_code.size(stor6)
                                staticcall stor6.0x70a08231 with:
                                        gas gas_remaining wei
                                       args this.address
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if ext_call.return_data[0] < 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000:
                                    revert with 0, 'not enought token A to repay'
                                require ext_code.size(stor6)
                                call stor6.0xa9059cbb with:
                                     gas gas_remaining wei
                                    args msg.sender, 1003 * 0 / 1000 * Mask(112, 0, ext_call.return_data[0]) / 1000
                        else:
                            require arg3
                            if 997 * arg3 / arg3 != 997:
                                revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                            if not 997 * arg3:
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 0 / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / 997 * arg3
                                        if 1003 * 0 / 997 * arg3 / 0 / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 0 / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 0 / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
                            else:
                                require 997 * arg3
                                if 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != ext_call.return_data[50 len 14]:
                                    revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                if not ext_call.return_data[18 len 14]:
                                    if 997 * arg3 < 0:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require 997 * arg3
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3:
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 / 997 * arg3 * ext_call.return_data[50 len 14] / 997 * arg3 != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / 997 * arg3 / 1000
                                else:
                                    require ext_call.return_data[18 len 14]
                                    if 1000 * ext_call.return_data[18 len 14] / ext_call.return_data[18 len 14] != 1000:
                                        revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                    if (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) < 1000 * ext_call.return_data[18 len 14]:
                                        revert with 0, 'SafeMath: addition overflow'
                                    require (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                    if not 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3):
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 0:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 0
                                    else:
                                        require 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3)
                                        if 1003 * 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) / 997 * arg3 * ext_call.return_data[50 len 14] / (1000 * ext_call.return_data[18 len 14]) + (997 * arg3) != 1003:
                                            revert with 0, 32, 33, 0xfe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f, mem[293 len 31]
                                        require ext_code.size(stor3)
                                        if not uint8(stor9):
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), 0, address(this.address), 128, 1, uint8('1')
                                        else:
                                            call stor3.swap(uint256 arg1, uint256 arg2, address arg3, bytes arg4) with:
                                                 gas gas_remaining wei
                                                args 0, 997 * stor8 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * stor8), address(this.address), 128, 1, uint8('1')
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require ext_code.size(stor6)
                                        staticcall stor6.0x70a08231 with:
                                                gas gas_remaining wei
                                               args this.address
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        if ext_call.return_data[0] < 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000:
                                            revert with 0, 'not enought token A to repay'
                                        require ext_code.size(stor6)
                                        call stor6.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args msg.sender, 1003 * 997 * arg3 * Mask(112, 0, ext_call.return_data[32]) / (1000 * Mask(112, 0, ext_call.return_data[0])) + (997 * arg3) / 1000
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
}



}
