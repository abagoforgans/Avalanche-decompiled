contract main {




// =====================  Runtime code  =====================


#
#  - sub_470750ba(?)
#  - sub_709f1e8f(?)
#  - sub_a4ac380b(?)
#  - sub_afe701f6(?)
#  - sub_b4911d17(?)
#
uint8 stor0;
uint8 stor0; offset 8
uint16 stor0;
address owner;
address settingsAddress;
uint8 stor102; offset 160
uint8 stor102; offset 168
uint128 stor102; offset 168
uint128 stor102; offset 160
address sub_4b87af47Address;
uint256 sub_e808bee6;
uint256 sub_583d4cc6;
uint256 sub_adb2dff9;
uint256 sub_535aa3bb;
uint256 sub_ac55eac2;
uint256 sub_57a17d1d;
uint256 sub_bf0673d2;
uint256 sub_fbc097d4;
uint256 sub_9e8775cc;

function sub_19552df2(?) payable {
    return bool(uint8(stor102.field_168))
}

function sub_4b87af47(?) payable {
    return sub_4b87af47Address
}

function sub_535aa3bb(?) payable {
    return sub_535aa3bb
}

function sub_57a17d1d(?) payable {
    return sub_57a17d1d
}

function sub_583d4cc6(?) payable {
    return sub_583d4cc6
}

function owner() payable {
    return owner
}

function sub_9e8775cc(?) payable {
    return sub_9e8775cc
}

function sub_ac55eac2(?) payable {
    return sub_ac55eac2
}

function sub_adb2dff9(?) payable {
    return sub_adb2dff9
}

function sub_b43462fd(?) payable {
    return bool(uint8(stor102.field_160))
}

function sub_bf0673d2(?) payable {
    return sub_bf0673d2
}

function settings() payable {
    return settingsAddress
}

function sub_e808bee6(?) payable {
    return sub_e808bee6
}

function sub_fbc097d4(?) payable {
    return sub_fbc097d4
}

function _fallback() payable {
    revert
}

function renounceOwnership() payable {
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_4d9f58d3(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_adb2dff9 = arg1
}

function sub_804d1546(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_9e8775cc = arg1
}

function sub_a3bd24b2(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_535aa3bb = arg1
}

function sub_dee45c6d(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_ac55eac2 = arg1
}

function sub_e1a98022(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_e808bee6 = arg1
}

function sub_ed37d660(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_fbc097d4 = arg1
}

function sub_f6fc5516(?) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_57a17d1d = arg1
}

function setMinLiquidityRatio(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    sub_583d4cc6 = arg1
}

function setLPEnabled(bool arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    Mask(88, 0, stor102.field_168) = Mask(88, 0, arg1)
}

function sub_21ab9a72(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    Mask(96, 0, stor102.field_160) = Mask(96, 0, bool(arg1))
}

function transferOwnership(address arg1) payable {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 32, 32, 0xfe4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function initialize(address arg1, address arg2) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if uint8(stor0.field_8):
        if ext_code.size(this.address):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Initializable: contract is already initialized'
    else:
        if uint8(stor0.field_0):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Initializable: contract is already initialized'
    if not uint8(stor0.field_8):
        uint16(stor0.field_0) = 257
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Initializable: contract is not initializing'
    owner = msg.sender
    emit OwnershipTransferred(owner, msg.sender);
    settingsAddress = arg1
    sub_4b87af47Address = arg2
    sub_e808bee6 = 500
    sub_583d4cc6 = 100
    sub_adb2dff9 = 2000
    sub_535aa3bb = 2500
    sub_ac55eac2 = 100
    sub_57a17d1d = 1000
    sub_bf0673d2 = 100
}

function sub_8cefd3f5(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.dexRouter() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if 120 > !block.timestamp:
        revert with 0, 17
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).removeLiquidity(address arg1, address arg2, uint256 arg3, uint256 arg4, uint256 arg5, address arg6, uint256 arg7) with:
         gas gas_remaining wei
        args address(ext_call.return_data[0]), address(ext_call.return_data[0]), arg1, 0, 0, msg.sender, block.timestamp + 120
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 64
    return ext_call.return_data[0], ext_call.return_data[32]
}

function sub_99d47339(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        return Mask(112, 0, ext_call.return_data[32])
    return Mask(112, 0, ext_call.return_data[0])
}

function sub_4eaafa60(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        if Mask(112, 0, ext_call.return_data[32]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        if arg1 and ext_call.return_data[0] > -1 / arg1:
            revert with 0, 17
        if not 2 * Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 18
        return (arg1 * ext_call.return_data[0] / 2 * Mask(112, 0, ext_call.return_data[32]))
    if Mask(112, 0, ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    if arg1 and ext_call.return_data[0] > -1 / arg1:
        revert with 0, 17
    if not 2 * Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 18
    return (arg1 * ext_call.return_data[0] / 2 * Mask(112, 0, ext_call.return_data[0]))
}

function sub_03be6f4c(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x18160ddd with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if not 10^uint8(ext_call.return_data[0]):
            revert with 0, 18
        return (ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]))
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 0, 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = s * t
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if not s * t:
        revert with 0, 18
    return (ext_call.return_data[0] / s * t)
}

function sub_05b3973d(?) payable {
    require calldata.size - 4 >= 32
    mem[96] = 2
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[128] = ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[160] = ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.dexRouter() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(4 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[(4 * ceil32(return_data.size)) + 196] = arg1
    mem[(4 * ceil32(return_data.size)) + 228] = 64
    mem[(4 * ceil32(return_data.size)) + 260] = 2
    idx = 0
    s = 128
    t = (4 * ceil32(return_data.size)) + 292
    while idx < 2:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args arg1, Array(len=2, data=mem[(4 * ceil32(return_data.size)) + 292 len 64])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(4 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (6 * ceil32(return_data.size)) + 192
    require return_data.size >= 32
    _32 = mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32
    require mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 <= test266151307()
    require (4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 223 < (4 * ceil32(return_data.size)) + return_data.size + 192
    _33 = mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 192]
    if mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 192] > test266151307():
        revert with 0, 65
    if (6 * ceil32(return_data.size)) + ceil32(32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 192]) + 1 < 0:
        revert with 0, 65
    mem[64] = (6 * ceil32(return_data.size)) + ceil32(32 * mem[(4 * ceil32(return_data.size)) + mem[(4 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, arg1) >> 32 + 192]) + 193
    mem[(6 * ceil32(return_data.size)) + 192] = _33
    require return_data.size >= _32 + (32 * _33) + 32
    mem[(6 * ceil32(return_data.size)) + 224 len 32 * _33] = mem[(4 * ceil32(return_data.size)) + _32 + 224 len 32 * _33]
    if 0 >= _33:
        revert with 0, 50
    mem[mem[64]] = mem[(6 * ceil32(return_data.size)) + 224]
    return memory
      from mem[64]
       len 32
}

function sub_95afe299(?) payable {
    require calldata.size - 4 >= 32
    if arg1 <= 0:
        revert with 0, 'Amount must be above zero'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x6caae832 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 > ext_call.return_data[0]:
        revert with 0, 'Cant go above tx limit!'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x278e5bba with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 and ext_call.return_data[0] > -1 / arg1:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x9885fdfa with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[64] = (4 * ceil32(return_data.size)) + 96
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(4 * ceil32(return_data.size)) + 96] = 0x1e9a695000000000000000000000000000000000000000000000000000000000
    mem[(4 * ceil32(return_data.size)) + 100] = msg.sender
    mem[(4 * ceil32(return_data.size)) + 132] = arg1 * ext_call.return_data[0]
    require ext_code.size(address(ext_call.return_data[0]))
    call address(ext_call.return_data[0]).redeem(address arg1, uint256 arg2) with:
         gas gas_remaining wei
        args msg.sender, arg1 * ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    idx = 0
    while idx < arg1:
        _41 = mem[64]
        mem[64] = mem[64] + 32
        mem[_41] = 0
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xc84eb624 with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _44 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _45 = mem[_44]
        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = msg.sender
        mem[mem[64] + 36] = 64
        mem[mem[64] + 68] = 0
        s = 0
        while s < 0:
            mem[s + mem[64] + 100] = mem[s + _41 + 32]
            s = s + 32
            continue 
        require ext_code.size(sub_4b87af47Address)
        call sub_4b87af47Address.mint(address arg1, string arg2) with:
             gas gas_remaining wei
            args msg.sender, 64, 0
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xae82459f with:
                gas gas_remaining wei
        mem[mem[64]] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        _70 = mem[64]
        mem[64] = mem[64] + ceil32(return_data.size)
        require return_data.size >= 32
        _72 = mem[_70]
        require mem[_70] == mem[_70 + 12 len 20]
        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
        mem[mem[64] + 4] = msg.sender
        mem[mem[64] + 36] = _45
        require ext_code.size(address(_72))
        call address(_72).addReputation(address arg1, uint256 arg2) with:
             gas gas_remaining wei
            args msg.sender, _45
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
}

function sub_cf1d3228(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x18160ddd with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        if Mask(112, 0, ext_call.return_data[32]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
            revert with 0, 17
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.liquidityPair() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x313ce567 with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            if Mask(112, 0, ext_call.return_data[32]) and 1 > -1 / 2 * Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            return (2 * Mask(112, 0, ext_call.return_data[32]) / ext_call.return_data[0])
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            if Mask(112, 0, ext_call.return_data[32]) and 10^ext_call.return_data[31 len 1] > -1 / 2 * Mask(112, 0, ext_call.return_data[32]):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            return (2 * Mask(112, 0, ext_call.return_data[32]) * 10^ext_call.return_data[31 len 1] / ext_call.return_data[0])
        s = 10
        t = 1
        idx = ext_call.return_data[31 len 1]
        while idx > 1:
            if s > -1 / s:
                revert with 0, 17
            if not bool(idx):
                s = s * s
                t = t
                idx = uint255(idx) * 0.5
                continue 
            s = s * s
            t = s * t
            idx = uint255(idx) * 0.5
            continue 
        if t > -1 / s:
            revert with 0, 17
        if Mask(112, 0, ext_call.return_data[32]) and s * t > -1 / 2 * Mask(112, 0, ext_call.return_data[32]):
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        return (2 * Mask(112, 0, ext_call.return_data[32]) * s * t / ext_call.return_data[0])
    if Mask(112, 0, ext_call.return_data[0]) > 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        if Mask(112, 0, ext_call.return_data[0]) and 1 > -1 / 2 * Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        return (2 * Mask(112, 0, ext_call.return_data[0]) / ext_call.return_data[0])
    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
        if Mask(112, 0, ext_call.return_data[0]) and 10^ext_call.return_data[31 len 1] > -1 / 2 * Mask(112, 0, ext_call.return_data[0]):
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        return (2 * Mask(112, 0, ext_call.return_data[0]) * 10^ext_call.return_data[31 len 1] / ext_call.return_data[0])
    s = 10
    t = 1
    idx = ext_call.return_data[31 len 1]
    while idx > 1:
        if s > -1 / s:
            revert with 0, 17
        if not bool(idx):
            s = s * s
            t = t
            idx = uint255(idx) * 0.5
            continue 
        s = s * s
        t = s * t
        idx = uint255(idx) * 0.5
        continue 
    if t > -1 / s:
        revert with 0, 17
    if Mask(112, 0, ext_call.return_data[0]) and s * t > -1 / 2 * Mask(112, 0, ext_call.return_data[0]):
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    return (2 * Mask(112, 0, ext_call.return_data[0]) * s * t / ext_call.return_data[0])
}

function sub_4cdc1e2e(?) payable {
    mem[96] = 2
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[128] = ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[160] = ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.dexRouter() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        mem[(7 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[(7 * ceil32(return_data.size)) + 196] = 1
        mem[(7 * ceil32(return_data.size)) + 228] = 64
        mem[(7 * ceil32(return_data.size)) + 260] = 2
        idx = 0
        s = 128
        t = (7 * ceil32(return_data.size)) + 292
        while idx < 2:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 1, Array(len=2, data=mem[(7 * ceil32(return_data.size)) + 292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(7 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (8 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _72 = mem[(7 * ceil32(return_data.size)) + 192 len 4], 0
        require mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
        require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (7 * ceil32(return_data.size)) + return_data.size + 192
        _75 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
        if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
            revert with 0, 65
        if (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
            revert with 0, 65
        mem[64] = (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
        mem[(8 * ceil32(return_data.size)) + 192] = _75
        require return_data.size >= _72 + (32 * _75) + 32
        mem[(8 * ceil32(return_data.size)) + 224 len 32 * _75] = mem[(7 * ceil32(return_data.size)) + _72 + 224 len 32 * _75]
        if 0 >= _75:
            revert with 0, 50
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            mem[(7 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[(7 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
            mem[(7 * ceil32(return_data.size)) + 228] = 64
            mem[(7 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = 128
            t = (7 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^uint8(ext_call.return_data[0]), Array(len=2, data=mem[(7 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (8 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _71 = mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32
            require mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 223 < (7 * ceil32(return_data.size)) + return_data.size + 192
            _74 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192] > test266151307():
                revert with 0, 65
            if (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193
            mem[(8 * ceil32(return_data.size)) + 192] = _74
            require return_data.size >= _71 + (32 * _74) + 32
            mem[(8 * ceil32(return_data.size)) + 224 len 32 * _74] = mem[(7 * ceil32(return_data.size)) + _71 + 224 len 32 * _74]
            if 0 >= _74:
                revert with 0, 50
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            mem[(7 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[(7 * ceil32(return_data.size)) + 196] = s * t
            mem[(7 * ceil32(return_data.size)) + 228] = 64
            mem[(7 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            u = 128
            v = (7 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[v] = mem[u + 12 len 20]
                idx = idx + 1
                u = u + 32
                v = v + 32
                continue 
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args s * t, Array(len=2, data=mem[(7 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(7 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (8 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _111 = mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
            require mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
            require (7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (7 * ceil32(return_data.size)) + return_data.size + 192
            _112 = mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
            if mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                revert with 0, 65
            if (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (8 * ceil32(return_data.size)) + ceil32(32 * mem[(7 * ceil32(return_data.size)) + mem[(7 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
            mem[(8 * ceil32(return_data.size)) + 192] = _112
            require return_data.size >= _111 + (32 * _112) + 32
            mem[(8 * ceil32(return_data.size)) + 224 len 32 * _112] = mem[(7 * ceil32(return_data.size)) + _111 + 224 len 32 * _112]
            if 0 >= _112:
                revert with 0, 50
    mem[mem[64]] = mem[(8 * ceil32(return_data.size)) + 224]
    return memory
      from mem[64]
       len 32
}

function sub_b9a951f5(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        mem[(2 * ceil32(return_data.size)) + 96] = 2
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.usdc() with:
                gas gas_remaining wei
        mem[(2 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(2 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
        mem[(4 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
               args mem[(4 * ceil32(return_data.size)) + 196 len 5 * ceil32(return_data.size)]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(2 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
        mem[(4 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.dexRouter() with:
                gas gas_remaining wei
               args mem[(4 * ceil32(return_data.size)) + 196 len 7 * ceil32(return_data.size)]
        mem[(4 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(8 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
        mem[(8 * ceil32(return_data.size)) + 196] = 1
        mem[(8 * ceil32(return_data.size)) + 228] = 64
        mem[(8 * ceil32(return_data.size)) + 260] = 2
        idx = 0
        s = (2 * ceil32(return_data.size)) + 128
        t = (8 * ceil32(return_data.size)) + 292
        while idx < 2:
            mem[t] = mem[s + 12 len 20]
            idx = idx + 1
            s = s + 32
            t = t + 32
            continue 
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                gas gas_remaining wei
               args 1, Array(len=2, data=mem[(8 * ceil32(return_data.size)) + 292 len 64])
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        mem[(8 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
        mem[64] = (10 * ceil32(return_data.size)) + 192
        require return_data.size >= 32
        _103 = mem[(8 * ceil32(return_data.size)) + 192 len 4], 0
        require mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
        require (8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (8 * ceil32(return_data.size)) + return_data.size + 192
        _106 = mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
        if mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
            revert with 0, 65
        if (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
            revert with 0, 65
        mem[64] = (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
        mem[(10 * ceil32(return_data.size)) + 192] = _106
        require return_data.size >= _103 + (32 * _106) + 32
        mem[(10 * ceil32(return_data.size)) + 224 len 32 * _106] = mem[(8 * ceil32(return_data.size)) + _103 + 224 len 32 * _106]
        if 0 >= _106:
            revert with 0, 50
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.usdc() with:
                    gas gas_remaining wei
            mem[(2 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(2 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
            mem[(4 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
                   args mem[(4 * ceil32(return_data.size)) + 196 len 5 * ceil32(return_data.size)]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(2 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
            mem[(4 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.dexRouter() with:
                    gas gas_remaining wei
                   args mem[(4 * ceil32(return_data.size)) + 196 len 7 * ceil32(return_data.size)]
            mem[(4 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(8 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[(8 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
            mem[(8 * ceil32(return_data.size)) + 228] = 64
            mem[(8 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = (2 * ceil32(return_data.size)) + 128
            t = (8 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 10^uint8(ext_call.return_data[0]), Array(len=2, data=mem[(8 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(8 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (10 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _102 = mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32
            require mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 <= test266151307()
            require (8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 223 < (8 * ceil32(return_data.size)) + return_data.size + 192
            _105 = mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]
            if mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192] > test266151307():
                revert with 0, 65
            if (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193
            mem[(10 * ceil32(return_data.size)) + 192] = _105
            require return_data.size >= _102 + (32 * _105) + 32
            mem[(10 * ceil32(return_data.size)) + 224 len 32 * _105] = mem[(8 * ceil32(return_data.size)) + _102 + 224 len 32 * _105]
            if 0 >= _105:
                revert with 0, 50
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            mem[(2 * ceil32(return_data.size)) + 96] = 2
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.usdc() with:
                    gas gas_remaining wei
            mem[(2 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(2 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
            mem[(4 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
                   args mem[(4 * ceil32(return_data.size)) + 196 len 5 * ceil32(return_data.size)]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(2 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
            mem[(4 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.dexRouter() with:
                    gas gas_remaining wei
                   args mem[(4 * ceil32(return_data.size)) + 196 len 7 * ceil32(return_data.size)]
            mem[(4 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(8 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[(8 * ceil32(return_data.size)) + 196] = s * t
            mem[(8 * ceil32(return_data.size)) + 228] = 64
            mem[(8 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            u = (2 * ceil32(return_data.size)) + 128
            v = (8 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[v] = mem[u + 12 len 20]
                idx = idx + 1
                u = u + 32
                v = v + 32
                continue 
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args s * t, Array(len=2, data=mem[(8 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(8 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (10 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _156 = mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
            require mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
            require (8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (8 * ceil32(return_data.size)) + return_data.size + 192
            _157 = mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
            if mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                revert with 0, 65
            if (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (10 * ceil32(return_data.size)) + ceil32(32 * mem[(8 * ceil32(return_data.size)) + mem[(8 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
            mem[(10 * ceil32(return_data.size)) + 192] = _157
            require return_data.size >= _156 + (32 * _157) + 32
            mem[(10 * ceil32(return_data.size)) + 224 len 32 * _157] = mem[(8 * ceil32(return_data.size)) + _156 + 224 len 32 * _157]
            if 0 >= _157:
                revert with 0, 50
    mem[mem[64]] = mem[(10 * ceil32(return_data.size)) + 224]
    return memory
      from mem[64]
       len 32
}

function purchaseWithUSDC(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    if arg1 <= 0:
        revert with 0, 'Amount must be above zero'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x6caae832 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 > ext_call.return_data[0]:
        revert with 0, 'Cant go above tx limit!'
    if not uint8(stor102.field_160):
        revert with 0, 'USDC discount off'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.PRECISION() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.PRECISION() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < sub_e808bee6:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xcfe19c66 with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(6 * ceil32(return_data.size)) + 96] = 2
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(6 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(6 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
    mem[(9 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.dexRouter() with:
            gas gas_remaining wei
           args mem[(9 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
    mem[(9 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(11 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
    mem[(11 * ceil32(return_data.size)) + 196] = ext_call.return_data[0]
    mem[(11 * ceil32(return_data.size)) + 228] = 64
    mem[(11 * ceil32(return_data.size)) + 260] = 2
    idx = 0
    s = (6 * ceil32(return_data.size)) + 128
    t = (11 * ceil32(return_data.size)) + 292
    while idx < 2:
        mem[t] = mem[s + 12 len 20]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
            gas gas_remaining wei
           args ext_call.return_data[0], Array(len=2, data=mem[(11 * ceil32(return_data.size)) + 292 len 64])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(11 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (12 * ceil32(return_data.size)) + 192
    require return_data.size >= 32
    _297 = mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28]
    require mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] <= test266151307()
    require (11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 223 < (11 * ceil32(return_data.size)) + return_data.size + 192
    _298 = mem[(11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]
    if mem[(11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192] > test266151307():
        revert with 0, 65
    if (12 * ceil32(return_data.size)) + ceil32(32 * mem[(11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193 > test266151307() or ceil32(32 * mem[(11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 1 < 0:
        revert with 0, 65
    mem[64] = (12 * ceil32(return_data.size)) + ceil32(32 * mem[(11 * ceil32(return_data.size)) + mem[(11 * ceil32(return_data.size)) + 192 len 4], ext_call.return_data[0 len 28] + 192]) + 193
    mem[(12 * ceil32(return_data.size)) + 192] = _298
    require return_data.size >= _297 + (32 * _298) + 32
    mem[(12 * ceil32(return_data.size)) + 224 len 32 * _298] = mem[(11 * ceil32(return_data.size)) + _297 + 224 len 32 * _298]
    if 0 >= _298:
        revert with 0, 50
    _550 = mem[(12 * ceil32(return_data.size)) + 224]
    if arg1 and mem[(12 * ceil32(return_data.size)) + 224] > -1 / arg1:
        revert with 0, 17
    if arg1 * mem[(12 * ceil32(return_data.size)) + 224] and ext_call.return_data[0] - sub_e808bee6 > -1 / arg1 * mem[(12 * ceil32(return_data.size)) + 224]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x57cb6dd4 with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _553 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _554 = mem[_553]
    require mem[_553] == mem[_553 + 12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[mem[64]] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    _557 = mem[64]
    mem[64] = mem[64] + ceil32(return_data.size)
    require return_data.size >= 32
    _558 = mem[_557]
    require mem[_557] == mem[_557 + 12 len 20]
    _559 = mem[64]
    mem[mem[64] + 36] = msg.sender
    mem[mem[64] + 68] = address(_554)
    mem[mem[64] + 100] = (ext_call.return_data[0] * arg1 * _550) - (sub_e808bee6 * arg1 * _550) / ext_call.return_data[0]
    _560 = mem[64]
    mem[mem[64]] = 100
    mem[mem[64] + 32 len 4] = unknown_0x23b872dd(?????)
    mem[64] = mem[64] + 196
    mem[_559 + 132] = 32
    mem[_559 + 164] = 'SafeERC20: low-level call failed'
    if not ext_code.size(address(_558)):
        revert with 0, 'Address: call to non-contract'
    _565 = mem[_560]
    mem[_559 + 196 len ceil32(mem[_560])] = mem[_560 + 32 len ceil32(mem[_560])]
    if ceil32(_565) <= _565:
        call address(_558) with:
             gas gas_remaining wei
            args mem[_559 + 200 len _565 - 4]
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if not ext_call.return_data[0]:
                idx = 0
                while idx < arg1:
                    _1026 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1026] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1053 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1063 = mem[_1053]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1026 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1269 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1285 = mem[_1269]
                    require mem[_1269] == mem[_1269 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1063
                    require ext_code.size(address(_1285))
                    call address(_1285).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1063
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require ext_call.return_data[0] >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _1029 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1029] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1054 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1064 = mem[_1054]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1029 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1271 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1287 = mem[_1271]
                    require mem[_1271] == mem[_1271 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1064
                    require ext_code.size(address(_1287))
                    call address(_1287).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1064
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
        else:
            mem[64] = _559 + ceil32(return_data.size) + 197
            mem[_559 + 196] = return_data.size
            mem[_559 + 228 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if not return_data.size:
                idx = 0
                while idx < arg1:
                    _1033 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1033] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1055 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1067 = mem[_1055]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1033 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1273 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1289 = mem[_1273]
                    require mem[_1273] == mem[_1273 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1067
                    require ext_code.size(address(_1289))
                    call address(_1289).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1067
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require return_data.size >= 32
                require mem[_559 + 228] == bool(mem[_559 + 228])
                if not mem[_559 + 228]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _1036 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1036] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1056 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1068 = mem[_1056]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1036 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1275 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1291 = mem[_1275]
                    require mem[_1275] == mem[_1275 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1068
                    require ext_code.size(address(_1291))
                    call address(_1291).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1068
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
    else:
        mem[_565 + _559 + 196] = 0
        call address(_558) with:
             gas gas_remaining wei
            args mem[_559 + 200 len _565 - 4]
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if not ext_call.return_data[0]:
                idx = 0
                while idx < arg1:
                    _1040 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1040] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1057 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1071 = mem[_1057]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1040 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1277 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1293 = mem[_1277]
                    require mem[_1277] == mem[_1277 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1071
                    require ext_code.size(address(_1293))
                    call address(_1293).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1071
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require ext_call.return_data[0] >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _1043 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1043] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1058 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1072 = mem[_1058]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1043 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1279 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1295 = mem[_1279]
                    require mem[_1279] == mem[_1279 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1072
                    require ext_code.size(address(_1295))
                    call address(_1295).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1072
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
        else:
            mem[64] = _559 + ceil32(return_data.size) + 197
            mem[_559 + 196] = return_data.size
            mem[_559 + 228 len return_data.size] = ext_call.return_data[0 len return_data.size]
            if not ext_call.success:
                if return_data.size:
                    revert with ext_call.return_data[0 len return_data.size]
                revert with 0, 'SafeERC20: low-level call failed'
            if not return_data.size:
                idx = 0
                while idx < arg1:
                    _1047 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1047] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1059 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1075 = mem[_1059]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1047 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1281 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1297 = mem[_1281]
                    require mem[_1281] == mem[_1281 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1075
                    require ext_code.size(address(_1297))
                    call address(_1297).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1075
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require return_data.size >= 32
                require mem[_559 + 228] == bool(mem[_559 + 228])
                if not mem[_559 + 228]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _1050 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_1050] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0x4549a16e with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1060 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1076 = mem[_1060]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _1050 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1283 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1299 = mem[_1283]
                    require mem[_1283] == mem[_1283 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _1076
                    require ext_code.size(address(_1299))
                    call address(_1299).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _1076
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
}

function sub_61bba381(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if not ext_call.return_data[31 len 1]:
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x18160ddd with:
                gas gas_remaining wei
        mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(address(ext_call.return_data[0]))
        staticcall address(ext_call.return_data[0]).0x313ce567 with:
                gas gas_remaining wei
        mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[31 len 1]
        if not ext_call.return_data[31 len 1]:
            mem[(8 * ceil32(return_data.size)) + 96] = 2
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.usdc() with:
                    gas gas_remaining wei
            mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
            mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
                   args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
            mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
            mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.dexRouter() with:
                    gas gas_remaining wei
                   args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
            mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
            mem[(14 * ceil32(return_data.size)) + 196] = 1
            mem[(14 * ceil32(return_data.size)) + 228] = 64
            mem[(14 * ceil32(return_data.size)) + 260] = 2
            idx = 0
            s = (8 * ceil32(return_data.size)) + 128
            t = (14 * ceil32(return_data.size)) + 292
            while idx < 2:
                mem[t] = mem[s + 12 len 20]
                idx = idx + 1
                s = s + 32
                t = t + 32
                continue 
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                    gas gas_remaining wei
                   args 1, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
            mem[64] = (15 * ceil32(return_data.size)) + 192
            require return_data.size >= 32
            _333 = mem[(14 * ceil32(return_data.size)) + 192 len 4], 0
            require mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
            require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
            _340 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
            if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                revert with 0, 65
            if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                revert with 0, 65
            mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
            mem[(15 * ceil32(return_data.size)) + 192] = _340
            require return_data.size >= _333 + (32 * _340) + 32
            mem[(15 * ceil32(return_data.size)) + 224 len 32 * _340] = mem[(14 * ceil32(return_data.size)) + _333 + 224 len 32 * _340]
            if 0 >= _340:
                revert with 0, 50
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                mem[(8 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                       args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(14 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                mem[(14 * ceil32(return_data.size)) + 228] = 64
                mem[(14 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (8 * ceil32(return_data.size)) + 128
                t = (14 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 10^uint8(ext_call.return_data[0]), Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (15 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _332 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32
                require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 <= test266151307()
                require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                _339 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]
                if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193
                mem[(15 * ceil32(return_data.size)) + 192] = _339
                require return_data.size >= _332 + (32 * _339) + 32
                mem[(15 * ceil32(return_data.size)) + 224 len 32 * _339] = mem[(14 * ceil32(return_data.size)) + _332 + 224 len 32 * _339]
                if 0 >= _339:
                    revert with 0, 50
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                mem[(8 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                       args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(14 * ceil32(return_data.size)) + 196] = s * t
                mem[(14 * ceil32(return_data.size)) + 228] = 64
                mem[(14 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                u = (8 * ceil32(return_data.size)) + 128
                v = (14 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args s * t, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (15 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _539 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                _546 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                    revert with 0, 65
                if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                mem[(15 * ceil32(return_data.size)) + 192] = _546
                require return_data.size >= _539 + (32 * _546) + 32
                mem[(15 * ceil32(return_data.size)) + 224 len 32 * _546] = mem[(14 * ceil32(return_data.size)) + _539 + 224 len 32 * _546]
                if 0 >= _546:
                    revert with 0, 50
        if mem[(15 * ceil32(return_data.size)) + 224] and ext_call.return_data[0] > -1 / mem[(15 * ceil32(return_data.size)) + 224]:
            revert with 0, 17
        mem[mem[64]] = mem[(15 * ceil32(return_data.size)) + 224] * ext_call.return_data[0]
    else:
        if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not 10^uint8(ext_call.return_data[0]):
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(8 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                       args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(14 * ceil32(return_data.size)) + 196] = 1
                mem[(14 * ceil32(return_data.size)) + 228] = 64
                mem[(14 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (8 * ceil32(return_data.size)) + 128
                t = (14 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (15 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _331 = mem[(14 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                _338 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(15 * ceil32(return_data.size)) + 192] = _338
                require return_data.size >= _331 + (32 * _338) + 32
                mem[(15 * ceil32(return_data.size)) + 224 len 32 * _338] = mem[(14 * ceil32(return_data.size)) + _331 + 224 len 32 * _338]
                if 0 >= _338:
                    revert with 0, 50
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(8 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                           args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                    mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                    mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(14 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(14 * ceil32(return_data.size)) + 228] = 64
                    mem[(14 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (8 * ceil32(return_data.size)) + 128
                    t = (14 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^uint8(ext_call.return_data[0]), Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (15 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _330 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32
                    require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 <= test266151307()
                    require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                    _337 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]
                    if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193
                    mem[(15 * ceil32(return_data.size)) + 192] = _337
                    require return_data.size >= _330 + (32 * _337) + 32
                    mem[(15 * ceil32(return_data.size)) + 224 len 32 * _337] = mem[(14 * ceil32(return_data.size)) + _330 + 224 len 32 * _337]
                    if 0 >= _337:
                        revert with 0, 50
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(8 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                           args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                    mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                    mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(14 * ceil32(return_data.size)) + 196] = s * t
                    mem[(14 * ceil32(return_data.size)) + 228] = 64
                    mem[(14 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (8 * ceil32(return_data.size)) + 128
                    v = (14 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args s * t, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (15 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _538 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32
                    require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 <= test266151307()
                    require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                    _543 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]
                    if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, s * t) >> 32 + 192]) + 193
                    mem[(15 * ceil32(return_data.size)) + 192] = _543
                    require return_data.size >= _538 + (32 * _543) + 32
                    mem[(15 * ceil32(return_data.size)) + 224 len 32 * _543] = mem[(14 * ceil32(return_data.size)) + _538 + 224 len 32 * _543]
                    if 0 >= _543:
                        revert with 0, 50
            if mem[(15 * ceil32(return_data.size)) + 224] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[(15 * ceil32(return_data.size)) + 224]:
                revert with 0, 17
            mem[mem[64]] = mem[(15 * ceil32(return_data.size)) + 224] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
        else:
            s = 10
            t = 1
            idx = ext_call.return_data[31 len 1]
            while idx > 1:
                if s > -1 / s:
                    revert with 0, 17
                if not bool(idx):
                    s = s * s
                    t = t
                    idx = uint255(idx) * 0.5
                    continue 
                s = s * s
                t = s * t
                idx = uint255(idx) * 0.5
                continue 
            if t > -1 / s:
                revert with 0, 17
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if not s * t:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(8 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                       args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(14 * ceil32(return_data.size)) + 196] = 1
                mem[(14 * ceil32(return_data.size)) + 228] = 64
                mem[(14 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                u = (8 * ceil32(return_data.size)) + 128
                v = (14 * ceil32(return_data.size)) + 292
                while idx < 2:
                    mem[v] = mem[u + 12 len 20]
                    idx = idx + 1
                    u = u + 32
                    v = v + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                        gas gas_remaining wei
                       args 1, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = (15 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                _537 = mem[(14 * ceil32(return_data.size)) + 192 len 4], 0
                require mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 <= test266151307()
                require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                _542 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]
                if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192] > test266151307():
                    revert with 0, 65
                if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 1 < 0:
                    revert with 0, 65
                mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], 0 + 192]) + 193
                mem[(15 * ceil32(return_data.size)) + 192] = _542
                require return_data.size >= _537 + (32 * _542) + 32
                mem[(15 * ceil32(return_data.size)) + 224 len 32 * _542] = mem[(14 * ceil32(return_data.size)) + _537 + 224 len 32 * _542]
                if 0 >= _542:
                    revert with 0, 50
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(8 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                           args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                    mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                    mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(14 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(14 * ceil32(return_data.size)) + 228] = 64
                    mem[(14 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (8 * ceil32(return_data.size)) + 128
                    v = (14 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args 10^uint8(ext_call.return_data[0]), Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (15 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _536 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32
                    require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 <= test266151307()
                    require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                    _541 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]
                    if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, 10^uint8(ext_call.return_data[0])) >> 32 + 192]) + 193
                    mem[(15 * ceil32(return_data.size)) + 192] = _541
                    require return_data.size >= _536 + (32 * _541) + 32
                    mem[(15 * ceil32(return_data.size)) + 224 len 32 * _541] = mem[(14 * ceil32(return_data.size)) + _536 + 224 len 32 * _541]
                    if 0 >= _541:
                        revert with 0, 50
                else:
                    u = 10
                    v = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if u > -1 / u:
                            revert with 0, 17
                        if not bool(idx):
                            u = u * u
                            v = v
                            idx = uint255(idx) * 0.5
                            continue 
                        u = u * u
                        v = u * v
                        idx = uint255(idx) * 0.5
                        continue 
                    if v > -1 / u:
                        revert with 0, 17
                    mem[(8 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(8 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    mem[(10 * ceil32(return_data.size)) + 192] = 0xb8746e7300000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                           args mem[(10 * ceil32(return_data.size)) + 196 len 16 * ceil32(return_data.size)]
                    mem[(10 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(8 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(12 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(12 * ceil32(return_data.size)) + 196 len 20 * ceil32(return_data.size)]
                    mem[(12 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(14 * ceil32(return_data.size)) + 196] = u * v
                    mem[(14 * ceil32(return_data.size)) + 228] = 64
                    mem[(14 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    w = (8 * ceil32(return_data.size)) + 128
                    x = (14 * ceil32(return_data.size)) + 292
                    while idx < 2:
                        mem[x] = mem[w + 12 len 20]
                        idx = idx + 1
                        w = w + 32
                        x = x + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args u * v, Array(len=2, data=mem[(14 * ceil32(return_data.size)) + 292 len 64])
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[(14 * ceil32(return_data.size)) + 192 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = (15 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    _616 = mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32
                    require mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 <= test266151307()
                    require (14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 223 < (14 * ceil32(return_data.size)) + return_data.size + 192
                    _617 = mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 192]
                    if mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 192] > test266151307():
                        revert with 0, 65
                    if (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 192]) + 193 > test266151307() or ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 192]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = (15 * ceil32(return_data.size)) + ceil32(32 * mem[(14 * ceil32(return_data.size)) + mem[(14 * ceil32(return_data.size)) + 192 len 4], Mask(224, 32, u * v) >> 32 + 192]) + 193
                    mem[(15 * ceil32(return_data.size)) + 192] = _617
                    require return_data.size >= _616 + (32 * _617) + 32
                    mem[(15 * ceil32(return_data.size)) + 224 len 32 * _617] = mem[(14 * ceil32(return_data.size)) + _616 + 224 len 32 * _617]
                    if 0 >= _617:
                        revert with 0, 50
            if mem[(15 * ceil32(return_data.size)) + 224] and ext_call.return_data[0] / s * t > -1 / mem[(15 * ceil32(return_data.size)) + 224]:
                revert with 0, 17
            mem[mem[64]] = mem[(15 * ceil32(return_data.size)) + 224] * ext_call.return_data[0] / s * t
    return memory
      from mem[64]
       len 32
}

function sub_3bd611b1(?) payable {
    require calldata.size - 4 >= 32
    if arg1 <= 0:
        revert with 0, 'Amount must be above zero'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x6caae832 with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 > ext_call.return_data[0]:
        revert with 0, 'Cant go above tx limit!'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xcfe19c66 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 and ext_call.return_data[0] > -1 / arg1:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x57cb6dd4 with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.PRECISION() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.treasuryFee() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if arg1 * ext_call.return_data[0] and ext_call.return_data[0] > -1 / arg1 * ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(8 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(8 * ceil32(return_data.size)) + 164] = address(ext_call.return_data[0])
    mem[(8 * ceil32(return_data.size)) + 196] = arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
    mem[(8 * ceil32(return_data.size)) + 96] = 100
    mem[(8 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(8 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
    mem[(8 * ceil32(return_data.size)) + 228] = 32
    mem[(8 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
    if not ext_code.size(address(ext_call.return_data[0])):
        revert with 0, 'Address: call to non-contract'
    mem[(8 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0
    mem[(8 * ceil32(return_data.size)) + 392] = 0
    call address(ext_call.return_data[0]) with:
       funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) >> 224
         gas gas_remaining wei
        args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) << 544)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if not ext_call.return_data[0]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(8 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if arg1 * ext_call.return_data[0] and ext_call.return_data[0] > -1 / arg1 * ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(13 * ceil32(return_data.size)) + 328] = msg.sender
            mem[(13 * ceil32(return_data.size)) + 360] = address(ext_call.return_data[0])
            mem[(13 * ceil32(return_data.size)) + 392] = arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
            mem[(13 * ceil32(return_data.size)) + 292] = 100
            mem[(13 * ceil32(return_data.size)) + 324 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (13 * ceil32(return_data.size)) + 488
            mem[(13 * ceil32(return_data.size)) + 424] = 32
            mem[(13 * ceil32(return_data.size)) + 456] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(13 * ceil32(return_data.size)) + 488 len 128] = 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0
            mem[(13 * ceil32(return_data.size)) + 588] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < arg1:
                        _6162 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6162] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6295 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6397 = mem[_6295]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6162 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8059 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8187 = mem[_8059]
                        require mem[_8059] == mem[_8059 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6397
                        require ext_code.size(address(_8187))
                        call address(_8187).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6397
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require mem[128] == bool(mem[128])
                    if not mem[128]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < arg1:
                        _6165 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6165] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6296 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6398 = mem[_6296]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6165 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8061 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8189 = mem[_8061]
                        require mem[_8061] == mem[_8061 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6398
                        require ext_code.size(address(_8189))
                        call address(_8189).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6398
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
                mem[(13 * ceil32(return_data.size)) + 488] = return_data.size
                mem[(13 * ceil32(return_data.size)) + 520 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not return_data.size:
                    idx = 0
                    while idx < arg1:
                        _6169 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6169] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6297 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6401 = mem[_6297]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6169 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8063 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8191 = mem[_8063]
                        require mem[_8063] == mem[_8063 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6401
                        require ext_code.size(address(_8191))
                        call address(_8191).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6401
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(13 * ceil32(return_data.size)) + 520] == bool(mem[(13 * ceil32(return_data.size)) + 520])
                    if not mem[(13 * ceil32(return_data.size)) + 520]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < arg1:
                        _6172 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6172] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6298 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6402 = mem[_6298]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6172 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8065 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8193 = mem[_8065]
                        require mem[_8065] == mem[_8065 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6402
                        require ext_code.size(address(_8193))
                        call address(_8193).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6402
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
        else:
            require ext_call.return_data[0] >= 32
            require mem[128] == bool(mem[128])
            if not mem[128]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(8 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if arg1 * ext_call.return_data[0] and ext_call.return_data[0] > -1 / arg1 * ext_call.return_data[0]:
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(13 * ceil32(return_data.size)) + 328] = msg.sender
            mem[(13 * ceil32(return_data.size)) + 360] = address(ext_call.return_data[0])
            mem[(13 * ceil32(return_data.size)) + 392] = arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
            mem[(13 * ceil32(return_data.size)) + 292] = 100
            mem[(13 * ceil32(return_data.size)) + 324 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (13 * ceil32(return_data.size)) + 488
            mem[(13 * ceil32(return_data.size)) + 424] = 32
            mem[(13 * ceil32(return_data.size)) + 456] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(13 * ceil32(return_data.size)) + 488 len 128] = 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0
            mem[(13 * ceil32(return_data.size)) + 588] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < arg1:
                        _6190 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6190] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6303 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6413 = mem[_6303]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6190 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8075 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8203 = mem[_8075]
                        require mem[_8075] == mem[_8075 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6413
                        require ext_code.size(address(_8203))
                        call address(_8203).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6413
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require mem[128] == bool(mem[128])
                    if not mem[128]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < arg1:
                        _6193 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6193] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6304 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6414 = mem[_6304]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6193 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8077 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8205 = mem[_8077]
                        require mem[_8077] == mem[_8077 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6414
                        require ext_code.size(address(_8205))
                        call address(_8205).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6414
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
                mem[(13 * ceil32(return_data.size)) + 488] = return_data.size
                mem[(13 * ceil32(return_data.size)) + 520 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not return_data.size:
                    idx = 0
                    while idx < arg1:
                        _6197 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6197] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6305 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6417 = mem[_6305]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6197 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8079 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8207 = mem[_8079]
                        require mem[_8079] == mem[_8079 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6417
                        require ext_code.size(address(_8207))
                        call address(_8207).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6417
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(13 * ceil32(return_data.size)) + 520] == bool(mem[(13 * ceil32(return_data.size)) + 520])
                    if not mem[(13 * ceil32(return_data.size)) + 520]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < arg1:
                        _6200 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_6200] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6306 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6418 = mem[_6306]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _6200 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _8081 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _8209 = mem[_8081]
                        require mem[_8081] == mem[_8081 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _6418
                        require ext_code.size(address(_8209))
                        call address(_8209).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _6418
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
    mem[(8 * ceil32(return_data.size)) + 292] = return_data.size
    mem[(8 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
    if not ext_call.success:
        if return_data.size:
            revert with ext_call.return_data[0 len return_data.size]
        revert with 0, 'SafeERC20: low-level call failed'
    if not return_data.size:
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.rewardsPool() with:
                gas gas_remaining wei
        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.PRECISION() with:
                gas gas_remaining wei
        mem[(10 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.rewardPoolFee() with:
                gas gas_remaining wei
        mem[(11 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if arg1 * ext_call.return_data[0] and ext_call.return_data[0] > -1 / arg1 * ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        mem[(12 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 329] = msg.sender
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = address(ext_call.return_data[0])
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = 100
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 325 len 4] = unknown_0x23b872dd(?????)
        mem[64] = (13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 425] = 32
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 457] = 'SafeERC20: low-level call failed'
        if not ext_code.size(address(ext_call.return_data[0])):
            revert with 0, 'Address: call to non-contract'
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489 len 128] = 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 589] = 0
        call address(ext_call.return_data[0]) with:
           funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if not ext_call.return_data[0]:
                idx = 0
                while idx < arg1:
                    _6218 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_6218] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xc84eb624 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6311 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6429 = mem[_6311]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _6218 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8091 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8219 = mem[_8091]
                    require mem[_8091] == mem[_8091 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _6429
                    require ext_code.size(address(_8219))
                    call address(_8219).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _6429
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require ext_call.return_data[0] >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _6221 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_6221] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xc84eb624 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6312 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6430 = mem[_6312]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _6221 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8093 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8221 = mem[_8093]
                    require mem[_8093] == mem[_8093 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _6430
                    require ext_code.size(address(_8221))
                    call address(_8221).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _6430
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
        mem[64] = (16 * ceil32(return_data.size)) + 490
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489] = return_data.size
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(16 * ceil32(return_data.size)) + 490] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[(16 * ceil32(return_data.size)) + 494] = 32
            mem[(16 * ceil32(return_data.size)) + 526] = 32
            mem[(16 * ceil32(return_data.size)) + 558] = 'SafeERC20: low-level call failed'
            revert with memory
              from (16 * ceil32(return_data.size)) + 490
               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
        if not return_data.size:
            idx = 0
            while idx < arg1:
                _6225 = mem[64]
                mem[64] = mem[64] + 32
                mem[_6225] = 0
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xc84eb624 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6313 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6433 = mem[_6313]
                mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = 0
                s = 0
                while s < 0:
                    mem[s + mem[64] + 100] = mem[s + _6225 + 32]
                    s = s + 32
                    continue 
                require ext_code.size(sub_4b87af47Address)
                call sub_4b87af47Address.mint(address arg1, string arg2) with:
                     gas gas_remaining wei
                    args msg.sender, 64, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xae82459f with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8095 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8223 = mem[_8095]
                require mem[_8095] == mem[_8095 + 12 len 20]
                mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = _6433
                require ext_code.size(address(_8223))
                call address(_8223).addReputation(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, _6433
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        require return_data.size >= 32
        require mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521] == bool(mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521])
        if mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521]:
            idx = 0
            while idx < arg1:
                _6228 = mem[64]
                mem[64] = mem[64] + 32
                mem[_6228] = 0
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xc84eb624 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6314 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6434 = mem[_6314]
                mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = 0
                s = 0
                while s < 0:
                    mem[s + mem[64] + 100] = mem[s + _6228 + 32]
                    s = s + 32
                    continue 
                require ext_code.size(sub_4b87af47Address)
                call sub_4b87af47Address.mint(address arg1, string arg2) with:
                     gas gas_remaining wei
                    args msg.sender, 64, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xae82459f with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8097 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8225 = mem[_8097]
                require mem[_8097] == mem[_8097 + 12 len 20]
                mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = _6434
                require ext_code.size(address(_8225))
                call address(_8225).addReputation(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, _6434
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    else:
        require return_data.size >= 32
        require mem[(8 * ceil32(return_data.size)) + 324] == bool(mem[(8 * ceil32(return_data.size)) + 324])
        if not mem[(8 * ceil32(return_data.size)) + 324]:
            revert with 0, 'SafeERC20: ERC20 operation did not succeed'
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.rewardsPool() with:
                gas gas_remaining wei
        mem[(8 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.PRECISION() with:
                gas gas_remaining wei
        mem[(10 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.rewardPoolFee() with:
                gas gas_remaining wei
        mem[(11 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        if arg1 * ext_call.return_data[0] and ext_call.return_data[0] > -1 / arg1 * ext_call.return_data[0]:
            revert with 0, 17
        if not ext_call.return_data[0]:
            revert with 0, 18
        require ext_code.size(settingsAddress)
        staticcall settingsAddress.0xb8746e73 with:
                gas gas_remaining wei
        mem[(12 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 329] = msg.sender
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = address(ext_call.return_data[0])
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0]
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = 100
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 325 len 4] = unknown_0x23b872dd(?????)
        mem[64] = (13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 425] = 32
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 457] = 'SafeERC20: low-level call failed'
        if not ext_code.size(address(ext_call.return_data[0])):
            revert with 0, 'Address: call to non-contract'
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489 len 128] = 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 589] = 0
        call address(ext_call.return_data[0]) with:
           funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) >> 224
             gas gas_remaining wei
            args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), arg1 * ext_call.return_data[0] * ext_call.return_data[0] / ext_call.return_data[0], 0) << 544)
        if not return_data.size:
            if not ext_call.success:
                if ext_call.return_data[0]:
                    revert with memory
                      from 128
                       len ext_call.return_data[0]
                revert with 0, 'SafeERC20: low-level call failed'
            if not ext_call.return_data[0]:
                idx = 0
                while idx < arg1:
                    _6246 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_6246] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xc84eb624 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6319 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6445 = mem[_6319]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _6246 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8107 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8235 = mem[_8107]
                    require mem[_8107] == mem[_8107 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _6445
                    require ext_code.size(address(_8235))
                    call address(_8235).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _6445
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                require ext_call.return_data[0] >= 32
                require mem[128] == bool(mem[128])
                if not mem[128]:
                    revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                idx = 0
                while idx < arg1:
                    _6249 = mem[64]
                    mem[64] = mem[64] + 32
                    mem[_6249] = 0
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xc84eb624 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _6320 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _6446 = mem[_6320]
                    mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = 64
                    mem[mem[64] + 68] = 0
                    s = 0
                    while s < 0:
                        mem[s + mem[64] + 100] = mem[s + _6249 + 32]
                        s = s + 32
                        continue 
                    require ext_code.size(sub_4b87af47Address)
                    call sub_4b87af47Address.mint(address arg1, string arg2) with:
                         gas gas_remaining wei
                        args msg.sender, 64, 0
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xae82459f with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _8109 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _8237 = mem[_8109]
                    require mem[_8109] == mem[_8109 + 12 len 20]
                    mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                    mem[mem[64] + 4] = msg.sender
                    mem[mem[64] + 36] = _6446
                    require ext_code.size(address(_8237))
                    call address(_8237).addReputation(address arg1, uint256 arg2) with:
                         gas gas_remaining wei
                        args msg.sender, _6446
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
        mem[64] = (16 * ceil32(return_data.size)) + 490
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 489] = return_data.size
        mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            mem[(16 * ceil32(return_data.size)) + 490] = 0x8c379a000000000000000000000000000000000000000000000000000000000
            mem[(16 * ceil32(return_data.size)) + 494] = 32
            mem[(16 * ceil32(return_data.size)) + 526] = 32
            mem[(16 * ceil32(return_data.size)) + 558] = 'SafeERC20: low-level call failed'
            revert with memory
              from (16 * ceil32(return_data.size)) + 490
               len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 100
        if not return_data.size:
            idx = 0
            while idx < arg1:
                _6253 = mem[64]
                mem[64] = mem[64] + 32
                mem[_6253] = 0
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xc84eb624 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6321 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6449 = mem[_6321]
                mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = 0
                s = 0
                while s < 0:
                    mem[s + mem[64] + 100] = mem[s + _6253 + 32]
                    s = s + 32
                    continue 
                require ext_code.size(sub_4b87af47Address)
                call sub_4b87af47Address.mint(address arg1, string arg2) with:
                     gas gas_remaining wei
                    args msg.sender, 64, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xae82459f with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8111 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8239 = mem[_8111]
                require mem[_8111] == mem[_8111 + 12 len 20]
                mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = _6449
                require ext_code.size(address(_8239))
                call address(_8239).addReputation(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, _6449
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        require return_data.size >= 32
        require mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521] == bool(mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521])
        if mem[(13 * ceil32(return_data.size)) + ceil32(return_data.size) + 521]:
            idx = 0
            while idx < arg1:
                _6256 = mem[64]
                mem[64] = mem[64] + 32
                mem[_6256] = 0
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xc84eb624 with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _6322 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _6450 = mem[_6322]
                mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = 64
                mem[mem[64] + 68] = 0
                s = 0
                while s < 0:
                    mem[s + mem[64] + 100] = mem[s + _6256 + 32]
                    s = s + 32
                    continue 
                require ext_code.size(sub_4b87af47Address)
                call sub_4b87af47Address.mint(address arg1, string arg2) with:
                     gas gas_remaining wei
                    args msg.sender, 64, 0
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xae82459f with:
                        gas gas_remaining wei
                mem[mem[64]] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _8113 = mem[64]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _8241 = mem[_8113]
                require mem[_8113] == mem[_8113 + 12 len 20]
                mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                mem[mem[64] + 4] = msg.sender
                mem[mem[64] + 36] = _6450
                require ext_code.size(address(_8241))
                call address(_8241).addReputation(address arg1, uint256 arg2) with:
                     gas gas_remaining wei
                    args msg.sender, _6450
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    ('iszero', ('mem', ('range', ('add', 521, ('mul', 13, ('mask_shl', 251, 5, 0, ('add', 31, 'returndatasize'))), ('mask_shl', 256, 5, 0, ('add', 31, 'returndatasize'))), 32)))
    mem[(16 * ceil32(return_data.size)) + 490] = 0x8c379a000000000000000000000000000000000000000000000000000000000
    mem[(16 * ceil32(return_data.size)) + 494] = 32
    mem[(16 * ceil32(return_data.size)) + 526] = 42
    mem[(16 * ceil32(return_data.size)) + 558] = 'SafeERC20: ERC20 operation did n'
    mem[(16 * ceil32(return_data.size)) + 590] = 0x6f74207375636365656400000000000000000000000000000000000000000000
    revert with memory
      from (16 * ceil32(return_data.size)) + 490
       len (4 * ceil32(return_data.size)) + (-2 * ceil32(return_data.size)) + 132
}

function sub_ef572476(?) payable {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    mem[100] = msg.sender
    require ext_code.size(address(arg1))
    staticcall address(arg1).0x31d7a262 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xcfe19c66 with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] and sub_fbc097d4 > -1 / ext_call.return_data[0]:
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xcfe19c66 with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < ext_call.return_data[0] * sub_fbc097d4 / 10000:
        revert with 0, 17
    if ext_call.return_data[0] < ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
        revert with 0, 'Not enough rewards to compound'
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(6 * ceil32(return_data.size)) + 100] = msg.sender
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[(7 * ceil32(return_data.size)) + 100] = msg.sender
    require ext_code.size(address(arg1))
    call address(arg1).harvest(address arg1) with:
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(8 * ceil32(return_data.size)) + 100] = msg.sender
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if ext_call.return_data[0] < ext_call.return_data[0]:
        revert with 0, 17
    if not ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
        revert with 0, 18
    if 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) <= 0:
        revert with 0, 'Not enough rewards to compound'
    if 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) and ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) > -1 / 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
        revert with 0, 17
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0x57cb6dd4 with:
            gas gas_remaining wei
    mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.PRECISION() with:
            gas gas_remaining wei
    mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.treasuryFee() with:
            gas gas_remaining wei
    mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    if (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) and ext_call.return_data[0] > -1 / (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)):
        revert with 0, 17
    if not ext_call.return_data[0]:
        revert with 0, 18
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    mem[(14 * ceil32(return_data.size)) + 132] = msg.sender
    mem[(14 * ceil32(return_data.size)) + 164] = address(ext_call.return_data[0])
    mem[(14 * ceil32(return_data.size)) + 196] = (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0]
    mem[(14 * ceil32(return_data.size)) + 96] = 100
    mem[(14 * ceil32(return_data.size)) + 132 len 28] = Mask(224, 32, msg.sender) >> 32
    mem[(14 * ceil32(return_data.size)) + 128 len 4] = unknown_0x23b872dd(?????)
    mem[(14 * ceil32(return_data.size)) + 228] = 32
    mem[(14 * ceil32(return_data.size)) + 260] = 'SafeERC20: low-level call failed'
    if not ext_code.size(address(ext_call.return_data[0])):
        revert with 0, 'Address: call to non-contract'
    mem[(14 * ceil32(return_data.size)) + 292 len 128] = unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0
    mem[(14 * ceil32(return_data.size)) + 392] = 0
    call address(ext_call.return_data[0]) with:
       funct Mask(32, 224, unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) >> 224
         gas gas_remaining wei
        args (Mask(768, -544, unknown_0x23b872dd(?????), msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) << 544)
    if not return_data.size:
        if not ext_call.success:
            if ext_call.return_data[0]:
                revert with memory
                  from 128
                   len ext_call.return_data[0]
            revert with 0, 'SafeERC20: low-level call failed'
        if not ext_call.return_data[0]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(14 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(15 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(16 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) and ext_call.return_data[0] > -1 / (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(18 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(19 * ceil32(return_data.size)) + 328] = msg.sender
            mem[(19 * ceil32(return_data.size)) + 360] = address(ext_call.return_data[0])
            mem[(19 * ceil32(return_data.size)) + 392] = (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0]
            mem[(19 * ceil32(return_data.size)) + 292] = 100
            mem[(19 * ceil32(return_data.size)) + 324 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (19 * ceil32(return_data.size)) + 488
            mem[(19 * ceil32(return_data.size)) + 424] = 32
            mem[(19 * ceil32(return_data.size)) + 456] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(19 * ceil32(return_data.size)) + 488 len 128] = 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0
            mem[(19 * ceil32(return_data.size)) + 588] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5416 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5416] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5549 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5651 = mem[_5549]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5416 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7313 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7441 = mem[_7313]
                        require mem[_7313] == mem[_7313 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5651
                        require ext_code.size(address(_7441))
                        call address(_7441).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5651
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require uint32(msg.sender), mem[132 len 28] == bool(uint32(msg.sender), mem[132 len 28])
                    if not uint32(msg.sender), mem[132 len 28]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5419 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5419] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5550 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5652 = mem[_5550]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5419 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7315 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7443 = mem[_7315]
                        require mem[_7315] == mem[_7315 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5652
                        require ext_code.size(address(_7443))
                        call address(_7443).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5652
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
                mem[(19 * ceil32(return_data.size)) + 488] = return_data.size
                mem[(19 * ceil32(return_data.size)) + 520 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not return_data.size:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5423 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5423] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5551 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5655 = mem[_5551]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5423 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7317 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7445 = mem[_7317]
                        require mem[_7317] == mem[_7317 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5655
                        require ext_code.size(address(_7445))
                        call address(_7445).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5655
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(19 * ceil32(return_data.size)) + 520] == bool(mem[(19 * ceil32(return_data.size)) + 520])
                    if not mem[(19 * ceil32(return_data.size)) + 520]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5426 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5426] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5552 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5656 = mem[_5552]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5426 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7319 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7447 = mem[_7319]
                        require mem[_7319] == mem[_7319 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5656
                        require ext_code.size(address(_7447))
                        call address(_7447).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5656
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
        else:
            require ext_call.return_data[0] >= 32
            require uint32(msg.sender), mem[132 len 28] == bool(uint32(msg.sender), mem[132 len 28])
            if not uint32(msg.sender), mem[132 len 28]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(14 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(15 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(16 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) and ext_call.return_data[0] > -1 / (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(18 * ceil32(return_data.size)) + 292] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(19 * ceil32(return_data.size)) + 328] = msg.sender
            mem[(19 * ceil32(return_data.size)) + 360] = address(ext_call.return_data[0])
            mem[(19 * ceil32(return_data.size)) + 392] = (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0]
            mem[(19 * ceil32(return_data.size)) + 292] = 100
            mem[(19 * ceil32(return_data.size)) + 324 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (19 * ceil32(return_data.size)) + 488
            mem[(19 * ceil32(return_data.size)) + 424] = 32
            mem[(19 * ceil32(return_data.size)) + 456] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(19 * ceil32(return_data.size)) + 488 len 128] = 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0
            mem[(19 * ceil32(return_data.size)) + 588] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5444 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5444] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5557 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5667 = mem[_5557]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5444 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7329 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7457 = mem[_7329]
                        require mem[_7329] == mem[_7329 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5667
                        require ext_code.size(address(_7457))
                        call address(_7457).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5667
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require uint32(msg.sender), mem[132 len 28] == bool(uint32(msg.sender), mem[132 len 28])
                    if not uint32(msg.sender), mem[132 len 28]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5447 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5447] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5558 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5668 = mem[_5558]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5447 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7331 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7459 = mem[_7331]
                        require mem[_7331] == mem[_7331 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5668
                        require ext_code.size(address(_7459))
                        call address(_7459).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5668
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
                mem[(19 * ceil32(return_data.size)) + 488] = return_data.size
                mem[(19 * ceil32(return_data.size)) + 520 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not return_data.size:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5451 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5451] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5559 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5671 = mem[_5559]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5451 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7333 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7461 = mem[_7333]
                        require mem[_7333] == mem[_7333 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5671
                        require ext_code.size(address(_7461))
                        call address(_7461).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5671
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(19 * ceil32(return_data.size)) + 520] == bool(mem[(19 * ceil32(return_data.size)) + 520])
                    if not mem[(19 * ceil32(return_data.size)) + 520]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5454 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5454] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5560 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5672 = mem[_5560]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5454 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7335 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7463 = mem[_7335]
                        require mem[_7335] == mem[_7335 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5672
                        require ext_code.size(address(_7463))
                        call address(_7463).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5672
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
    else:
        mem[(14 * ceil32(return_data.size)) + 292] = return_data.size
        mem[(14 * ceil32(return_data.size)) + 324 len return_data.size] = ext_call.return_data[0 len return_data.size]
        if not ext_call.success:
            if return_data.size:
                revert with ext_call.return_data[0 len return_data.size]
            revert with 0, 'SafeERC20: low-level call failed'
        if not return_data.size:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(14 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(15 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(16 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) and ext_call.return_data[0] > -1 / (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(18 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 329] = msg.sender
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = address(ext_call.return_data[0])
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0]
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = 100
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 325 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 425] = 32
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 457] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489 len 128] = 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 589] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5472 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5472] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5565 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5683 = mem[_5565]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5472 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7345 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7473 = mem[_7345]
                        require mem[_7345] == mem[_7345 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5683
                        require ext_code.size(address(_7473))
                        call address(_7473).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5683
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require uint32(msg.sender), mem[132 len 28] == bool(uint32(msg.sender), mem[132 len 28])
                    if not uint32(msg.sender), mem[132 len 28]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5475 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5475] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5566 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5684 = mem[_5566]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5475 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7347 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7475 = mem[_7347]
                        require mem[_7347] == mem[_7347 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5684
                        require ext_code.size(address(_7475))
                        call address(_7475).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5684
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (22 * ceil32(return_data.size)) + 490
                mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489] = return_data.size
                mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 
                                'SafeERC20: low-level call failed',
                                mem[(22 * ceil32(return_data.size)) + 590 len (3 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not return_data.size:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5479 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5479] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5567 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5687 = mem[_5567]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5479 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7349 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7477 = mem[_7349]
                        require mem[_7349] == mem[_7349 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5687
                        require ext_code.size(address(_7477))
                        call address(_7477).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5687
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521] == bool(mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521])
                    if not mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521]:
                        revert with 0, 
                                    'SafeERC20: ERC20 operation did not succeed',
                                    mem[(22 * ceil32(return_data.size)) + 622 len (3 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5482 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5482] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5568 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5688 = mem[_5568]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5482 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7351 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7479 = mem[_7351]
                        require mem[_7351] == mem[_7351 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5688
                        require ext_code.size(address(_7479))
                        call address(_7479).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5688
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
        else:
            require return_data.size >= 32
            require mem[(14 * ceil32(return_data.size)) + 324] == bool(mem[(14 * ceil32(return_data.size)) + 324])
            if not mem[(14 * ceil32(return_data.size)) + 324]:
                revert with 0, 'SafeERC20: ERC20 operation did not succeed'
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardsPool() with:
                    gas gas_remaining wei
            mem[(14 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.PRECISION() with:
                    gas gas_remaining wei
            mem[(15 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.rewardPoolFee() with:
                    gas gas_remaining wei
            mem[(16 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            if (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) and ext_call.return_data[0] > -1 / (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000)):
                revert with 0, 17
            if not ext_call.return_data[0]:
                revert with 0, 18
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(18 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 329] = msg.sender
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 361] = address(ext_call.return_data[0])
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 393] = (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0]
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 293] = 100
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 325 len 4] = unknown_0x23b872dd(?????)
            mem[64] = (19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 425] = 32
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 457] = 'SafeERC20: low-level call failed'
            if not ext_code.size(address(ext_call.return_data[0])):
                revert with 0, 'Address: call to non-contract'
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489 len 128] = 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0
            mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 589] = 0
            call address(ext_call.return_data[0]) with:
               funct Mask(32, 224, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) >> 224
                 gas gas_remaining wei
                args (Mask(768, -544, 0, msg.sender, address(ext_call.return_data[0]), (ext_call.return_data[0] * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) - (ext_call.return_data[0] * sub_fbc097d4 / 10000 * 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000) * ext_call.return_data[0]) / ext_call.return_data[0], 0) << 544)
            if not return_data.size:
                if not ext_call.success:
                    if ext_call.return_data[0]:
                        revert with memory
                          from 128
                           len ext_call.return_data[0]
                    revert with 0, 'SafeERC20: low-level call failed'
                if not ext_call.return_data[0]:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5500 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5500] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5573 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5699 = mem[_5573]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5500 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7361 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7489 = mem[_7361]
                        require mem[_7361] == mem[_7361 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5699
                        require ext_code.size(address(_7489))
                        call address(_7489).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5699
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require ext_call.return_data[0] >= 32
                    require uint32(msg.sender), mem[132 len 28] == bool(uint32(msg.sender), mem[132 len 28])
                    if not uint32(msg.sender), mem[132 len 28]:
                        revert with 0, 'SafeERC20: ERC20 operation did not succeed'
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5503 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5503] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5574 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5700 = mem[_5574]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5503 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7363 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7491 = mem[_7363]
                        require mem[_7363] == mem[_7363 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5700
                        require ext_code.size(address(_7491))
                        call address(_7491).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5700
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
            else:
                mem[64] = (22 * ceil32(return_data.size)) + 490
                mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 489] = return_data.size
                mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521 len return_data.size] = ext_call.return_data[0 len return_data.size]
                if not ext_call.success:
                    if return_data.size:
                        revert with ext_call.return_data[0 len return_data.size]
                    revert with 0, 
                                'SafeERC20: low-level call failed',
                                mem[(22 * ceil32(return_data.size)) + 590 len (3 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                if not return_data.size:
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5507 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5507] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5575 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5703 = mem[_5575]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5507 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7365 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7493 = mem[_7365]
                        require mem[_7365] == mem[_7365 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5703
                        require ext_code.size(address(_7493))
                        call address(_7493).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5703
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                else:
                    require return_data.size >= 32
                    require mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521] == bool(mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521])
                    if not mem[(19 * ceil32(return_data.size)) + ceil32(return_data.size) + 521]:
                        revert with 0, 
                                    'SafeERC20: ERC20 operation did not succeed',
                                    mem[(22 * ceil32(return_data.size)) + 622 len (3 * ceil32(return_data.size)) - (2 * ceil32(return_data.size))]
                    idx = 0
                    while idx < 0 / ext_call.return_data[0] - (ext_call.return_data[0] * sub_fbc097d4 / 10000):
                        _5510 = mem[64]
                        mem[64] = mem[64] + 32
                        mem[_5510] = 0
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xc84eb624 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5576 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5704 = mem[_5576]
                        mem[mem[64]] = 0xd0def52100000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = 64
                        mem[mem[64] + 68] = 0
                        s = 0
                        while s < 0:
                            mem[s + mem[64] + 100] = mem[s + _5510 + 32]
                            s = s + 32
                            continue 
                        require ext_code.size(sub_4b87af47Address)
                        call sub_4b87af47Address.mint(address arg1, string arg2) with:
                             gas gas_remaining wei
                            args msg.sender, 64, 0
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xae82459f with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _7367 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _7495 = mem[_7367]
                        require mem[_7367] == mem[_7367 + 12 len 20]
                        mem[mem[64]] = 0xe24f831300000000000000000000000000000000000000000000000000000000
                        mem[mem[64] + 4] = msg.sender
                        mem[mem[64] + 36] = _5704
                        require ext_code.size(address(_7495))
                        call address(_7495).addReputation(address arg1, uint256 arg2) with:
                             gas gas_remaining wei
                            args msg.sender, _5704
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
}

function sub_ebfc5b37(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _660 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _683 = mem[_660]
                require mem[_660] <= test266151307()
                require _660 + mem[_660] + 31 < _660 + return_data.size
                _697 = mem[_660 + mem[_660]]
                if mem[_660 + mem[_660]] > test266151307():
                    revert with 0, 65
                if _660 + ceil32(return_data.size) + ceil32(32 * mem[_660 + mem[_660]]) + 1 > test266151307() or ceil32(32 * mem[_660 + mem[_660]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _660 + ceil32(return_data.size) + ceil32(32 * mem[_660 + mem[_660]]) + 1
                mem[_660 + ceil32(return_data.size)] = _697
                require return_data.size >= _683 + (32 * _697) + 32
                mem[_660 + ceil32(return_data.size) + 32 len 32 * _697] = mem[_660 + _683 + 32 len 32 * _697]
                if 0 >= _697:
                    revert with 0, 50
                if mem[_660 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_660 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_660 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_660 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _659 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _682 = mem[_659]
                    require mem[_659] <= test266151307()
                    require _659 + mem[_659] + 31 < _659 + return_data.size
                    _696 = mem[_659 + mem[_659]]
                    if mem[_659 + mem[_659]] > test266151307():
                        revert with 0, 65
                    if _659 + ceil32(return_data.size) + ceil32(32 * mem[_659 + mem[_659]]) + 1 > test266151307() or ceil32(32 * mem[_659 + mem[_659]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _659 + ceil32(return_data.size) + ceil32(32 * mem[_659 + mem[_659]]) + 1
                    mem[_659 + ceil32(return_data.size)] = _696
                    require return_data.size >= _682 + (32 * _696) + 32
                    mem[_659 + ceil32(return_data.size) + 32 len 32 * _696] = mem[_659 + _682 + 32 len 32 * _696]
                    if 0 >= _696:
                        revert with 0, 50
                    if mem[_659 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_659 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_659 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_659 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1082 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1096 = mem[_1082]
                    require mem[_1082] <= test266151307()
                    require _1082 + mem[_1082] + 31 < _1082 + return_data.size
                    _1106 = mem[_1082 + mem[_1082]]
                    if mem[_1082 + mem[_1082]] > test266151307():
                        revert with 0, 65
                    if _1082 + ceil32(return_data.size) + ceil32(32 * mem[_1082 + mem[_1082]]) + 1 > test266151307() or ceil32(32 * mem[_1082 + mem[_1082]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1082 + ceil32(return_data.size) + ceil32(32 * mem[_1082 + mem[_1082]]) + 1
                    mem[_1082 + ceil32(return_data.size)] = _1106
                    require return_data.size >= _1096 + (32 * _1106) + 32
                    mem[_1082 + ceil32(return_data.size) + 32 len 32 * _1106] = mem[_1082 + _1096 + 32 len 32 * _1106]
                    if 0 >= _1106:
                        revert with 0, 50
                    if mem[_1082 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1082 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _658 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _681 = mem[_658]
                    require mem[_658] <= test266151307()
                    require _658 + mem[_658] + 31 < _658 + return_data.size
                    _695 = mem[_658 + mem[_658]]
                    if mem[_658 + mem[_658]] > test266151307():
                        revert with 0, 65
                    if _658 + ceil32(return_data.size) + ceil32(32 * mem[_658 + mem[_658]]) + 1 > test266151307() or ceil32(32 * mem[_658 + mem[_658]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _658 + ceil32(return_data.size) + ceil32(32 * mem[_658 + mem[_658]]) + 1
                    mem[_658 + ceil32(return_data.size)] = _695
                    require return_data.size >= _681 + (32 * _695) + 32
                    mem[_658 + ceil32(return_data.size) + 32 len 32 * _695] = mem[_658 + _681 + 32 len 32 * _695]
                    if 0 >= _695:
                        revert with 0, 50
                    if mem[_658 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_658 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_658 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_658 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _657 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _680 = mem[_657]
                        require mem[_657] <= test266151307()
                        require _657 + mem[_657] + 31 < _657 + return_data.size
                        _694 = mem[_657 + mem[_657]]
                        if mem[_657 + mem[_657]] > test266151307():
                            revert with 0, 65
                        if _657 + ceil32(return_data.size) + ceil32(32 * mem[_657 + mem[_657]]) + 1 > test266151307() or ceil32(32 * mem[_657 + mem[_657]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _657 + ceil32(return_data.size) + ceil32(32 * mem[_657 + mem[_657]]) + 1
                        mem[_657 + ceil32(return_data.size)] = _694
                        require return_data.size >= _680 + (32 * _694) + 32
                        mem[_657 + ceil32(return_data.size) + 32 len 32 * _694] = mem[_657 + _680 + 32 len 32 * _694]
                        if 0 >= _694:
                            revert with 0, 50
                        if mem[_657 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_657 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_657 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_657 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1081 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1095 = mem[_1081]
                        require mem[_1081] <= test266151307()
                        require _1081 + mem[_1081] + 31 < _1081 + return_data.size
                        _1105 = mem[_1081 + mem[_1081]]
                        if mem[_1081 + mem[_1081]] > test266151307():
                            revert with 0, 65
                        if _1081 + ceil32(return_data.size) + ceil32(32 * mem[_1081 + mem[_1081]]) + 1 > test266151307() or ceil32(32 * mem[_1081 + mem[_1081]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1081 + ceil32(return_data.size) + ceil32(32 * mem[_1081 + mem[_1081]]) + 1
                        mem[_1081 + ceil32(return_data.size)] = _1105
                        require return_data.size >= _1095 + (32 * _1105) + 32
                        mem[_1081 + ceil32(return_data.size) + 32 len 32 * _1105] = mem[_1081 + _1095 + 32 len 32 * _1105]
                        if 0 >= _1105:
                            revert with 0, 50
                        if mem[_1081 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1081 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1080 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1094 = mem[_1080]
                    require mem[_1080] <= test266151307()
                    require _1080 + mem[_1080] + 31 < _1080 + return_data.size
                    _1104 = mem[_1080 + mem[_1080]]
                    if mem[_1080 + mem[_1080]] > test266151307():
                        revert with 0, 65
                    if _1080 + ceil32(return_data.size) + ceil32(32 * mem[_1080 + mem[_1080]]) + 1 > test266151307() or ceil32(32 * mem[_1080 + mem[_1080]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1080 + ceil32(return_data.size) + ceil32(32 * mem[_1080 + mem[_1080]]) + 1
                    mem[_1080 + ceil32(return_data.size)] = _1104
                    require return_data.size >= _1094 + (32 * _1104) + 32
                    mem[_1080 + ceil32(return_data.size) + 32 len 32 * _1104] = mem[_1080 + _1094 + 32 len 32 * _1104]
                    if 0 >= _1104:
                        revert with 0, 50
                    if mem[_1080 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1080 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1079 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1093 = mem[_1079]
                        require mem[_1079] <= test266151307()
                        require _1079 + mem[_1079] + 31 < _1079 + return_data.size
                        _1103 = mem[_1079 + mem[_1079]]
                        if mem[_1079 + mem[_1079]] > test266151307():
                            revert with 0, 65
                        if _1079 + ceil32(return_data.size) + ceil32(32 * mem[_1079 + mem[_1079]]) + 1 > test266151307() or ceil32(32 * mem[_1079 + mem[_1079]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1079 + ceil32(return_data.size) + ceil32(32 * mem[_1079 + mem[_1079]]) + 1
                        mem[_1079 + ceil32(return_data.size)] = _1103
                        require return_data.size >= _1093 + (32 * _1103) + 32
                        mem[_1079 + ceil32(return_data.size) + 32 len 32 * _1103] = mem[_1079 + _1093 + 32 len 32 * _1103]
                        if 0 >= _1103:
                            revert with 0, 50
                        if mem[_1079 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1079 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1251 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1253 = mem[_1251]
                        require mem[_1251] <= test266151307()
                        require _1251 + mem[_1251] + 31 < _1251 + return_data.size
                        _1255 = mem[_1251 + mem[_1251]]
                        if mem[_1251 + mem[_1251]] > test266151307():
                            revert with 0, 65
                        if _1251 + ceil32(return_data.size) + ceil32(32 * mem[_1251 + mem[_1251]]) + 1 > test266151307() or ceil32(32 * mem[_1251 + mem[_1251]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1251 + ceil32(return_data.size) + ceil32(32 * mem[_1251 + mem[_1251]]) + 1
                        mem[_1251 + ceil32(return_data.size)] = _1255
                        require return_data.size >= _1253 + (32 * _1255) + 32
                        mem[_1251 + ceil32(return_data.size) + 32 len 32 * _1255] = mem[_1251 + _1253 + 32 len 32 * _1255]
                        if 0 >= _1255:
                            revert with 0, 50
                        if mem[_1251 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1251 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1251 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1251 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
    else:
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _666 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _688 = mem[_666]
                require mem[_666] <= test266151307()
                require _666 + mem[_666] + 31 < _666 + return_data.size
                _702 = mem[_666 + mem[_666]]
                if mem[_666 + mem[_666]] > test266151307():
                    revert with 0, 65
                if _666 + ceil32(return_data.size) + ceil32(32 * mem[_666 + mem[_666]]) + 1 > test266151307() or ceil32(32 * mem[_666 + mem[_666]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _666 + ceil32(return_data.size) + ceil32(32 * mem[_666 + mem[_666]]) + 1
                mem[_666 + ceil32(return_data.size)] = _702
                require return_data.size >= _688 + (32 * _702) + 32
                mem[_666 + ceil32(return_data.size) + 32 len 32 * _702] = mem[_666 + _688 + 32 len 32 * _702]
                if 0 >= _702:
                    revert with 0, 50
                if mem[_666 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_666 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_666 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_666 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _665 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _687 = mem[_665]
                    require mem[_665] <= test266151307()
                    require _665 + mem[_665] + 31 < _665 + return_data.size
                    _701 = mem[_665 + mem[_665]]
                    if mem[_665 + mem[_665]] > test266151307():
                        revert with 0, 65
                    if _665 + ceil32(return_data.size) + ceil32(32 * mem[_665 + mem[_665]]) + 1 > test266151307() or ceil32(32 * mem[_665 + mem[_665]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _665 + ceil32(return_data.size) + ceil32(32 * mem[_665 + mem[_665]]) + 1
                    mem[_665 + ceil32(return_data.size)] = _701
                    require return_data.size >= _687 + (32 * _701) + 32
                    mem[_665 + ceil32(return_data.size) + 32 len 32 * _701] = mem[_665 + _687 + 32 len 32 * _701]
                    if 0 >= _701:
                        revert with 0, 50
                    if mem[_665 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_665 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_665 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_665 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1086 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1100 = mem[_1086]
                    require mem[_1086] <= test266151307()
                    require _1086 + mem[_1086] + 31 < _1086 + return_data.size
                    _1110 = mem[_1086 + mem[_1086]]
                    if mem[_1086 + mem[_1086]] > test266151307():
                        revert with 0, 65
                    if _1086 + ceil32(return_data.size) + ceil32(32 * mem[_1086 + mem[_1086]]) + 1 > test266151307() or ceil32(32 * mem[_1086 + mem[_1086]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1086 + ceil32(return_data.size) + ceil32(32 * mem[_1086 + mem[_1086]]) + 1
                    mem[_1086 + ceil32(return_data.size)] = _1110
                    require return_data.size >= _1100 + (32 * _1110) + 32
                    mem[_1086 + ceil32(return_data.size) + 32 len 32 * _1110] = mem[_1086 + _1100 + 32 len 32 * _1110]
                    if 0 >= _1110:
                        revert with 0, 50
                    if mem[_1086 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1086 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0]
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _664 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _686 = mem[_664]
                    require mem[_664] <= test266151307()
                    require _664 + mem[_664] + 31 < _664 + return_data.size
                    _700 = mem[_664 + mem[_664]]
                    if mem[_664 + mem[_664]] > test266151307():
                        revert with 0, 65
                    if _664 + ceil32(return_data.size) + ceil32(32 * mem[_664 + mem[_664]]) + 1 > test266151307() or ceil32(32 * mem[_664 + mem[_664]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _664 + ceil32(return_data.size) + ceil32(32 * mem[_664 + mem[_664]]) + 1
                    mem[_664 + ceil32(return_data.size)] = _700
                    require return_data.size >= _686 + (32 * _700) + 32
                    mem[_664 + ceil32(return_data.size) + 32 len 32 * _700] = mem[_664 + _686 + 32 len 32 * _700]
                    if 0 >= _700:
                        revert with 0, 50
                    if mem[_664 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_664 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_664 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_664 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _663 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _685 = mem[_663]
                        require mem[_663] <= test266151307()
                        require _663 + mem[_663] + 31 < _663 + return_data.size
                        _699 = mem[_663 + mem[_663]]
                        if mem[_663 + mem[_663]] > test266151307():
                            revert with 0, 65
                        if _663 + ceil32(return_data.size) + ceil32(32 * mem[_663 + mem[_663]]) + 1 > test266151307() or ceil32(32 * mem[_663 + mem[_663]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _663 + ceil32(return_data.size) + ceil32(32 * mem[_663 + mem[_663]]) + 1
                        mem[_663 + ceil32(return_data.size)] = _699
                        require return_data.size >= _685 + (32 * _699) + 32
                        mem[_663 + ceil32(return_data.size) + 32 len 32 * _699] = mem[_663 + _685 + 32 len 32 * _699]
                        if 0 >= _699:
                            revert with 0, 50
                        if mem[_663 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_663 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_663 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_663 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1085 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1099 = mem[_1085]
                        require mem[_1085] <= test266151307()
                        require _1085 + mem[_1085] + 31 < _1085 + return_data.size
                        _1109 = mem[_1085 + mem[_1085]]
                        if mem[_1085 + mem[_1085]] > test266151307():
                            revert with 0, 65
                        if _1085 + ceil32(return_data.size) + ceil32(32 * mem[_1085 + mem[_1085]]) + 1 > test266151307() or ceil32(32 * mem[_1085 + mem[_1085]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1085 + ceil32(return_data.size) + ceil32(32 * mem[_1085 + mem[_1085]]) + 1
                        mem[_1085 + ceil32(return_data.size)] = _1109
                        require return_data.size >= _1099 + (32 * _1109) + 32
                        mem[_1085 + ceil32(return_data.size) + 32 len 32 * _1109] = mem[_1085 + _1099 + 32 len 32 * _1109]
                        if 0 >= _1109:
                            revert with 0, 50
                        if mem[_1085 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1085 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1084 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1098 = mem[_1084]
                    require mem[_1084] <= test266151307()
                    require _1084 + mem[_1084] + 31 < _1084 + return_data.size
                    _1108 = mem[_1084 + mem[_1084]]
                    if mem[_1084 + mem[_1084]] > test266151307():
                        revert with 0, 65
                    if _1084 + ceil32(return_data.size) + ceil32(32 * mem[_1084 + mem[_1084]]) + 1 > test266151307() or ceil32(32 * mem[_1084 + mem[_1084]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1084 + ceil32(return_data.size) + ceil32(32 * mem[_1084 + mem[_1084]]) + 1
                    mem[_1084 + ceil32(return_data.size)] = _1108
                    require return_data.size >= _1098 + (32 * _1108) + 32
                    mem[_1084 + ceil32(return_data.size) + 32 len 32 * _1108] = mem[_1084 + _1098 + 32 len 32 * _1108]
                    if 0 >= _1108:
                        revert with 0, 50
                    if mem[_1084 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1084 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1084 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1084 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1083 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1097 = mem[_1083]
                        require mem[_1083] <= test266151307()
                        require _1083 + mem[_1083] + 31 < _1083 + return_data.size
                        _1107 = mem[_1083 + mem[_1083]]
                        if mem[_1083 + mem[_1083]] > test266151307():
                            revert with 0, 65
                        if _1083 + ceil32(return_data.size) + ceil32(32 * mem[_1083 + mem[_1083]]) + 1 > test266151307() or ceil32(32 * mem[_1083 + mem[_1083]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1083 + ceil32(return_data.size) + ceil32(32 * mem[_1083 + mem[_1083]]) + 1
                        mem[_1083 + ceil32(return_data.size)] = _1107
                        require return_data.size >= _1097 + (32 * _1107) + 32
                        mem[_1083 + ceil32(return_data.size) + 32 len 32 * _1107] = mem[_1083 + _1097 + 32 len 32 * _1107]
                        if 0 >= _1107:
                            revert with 0, 50
                        if mem[_1083 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1083 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1083 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1083 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1252 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1254 = mem[_1252]
                        require mem[_1252] <= test266151307()
                        require _1252 + mem[_1252] + 31 < _1252 + return_data.size
                        _1256 = mem[_1252 + mem[_1252]]
                        if mem[_1252 + mem[_1252]] > test266151307():
                            revert with 0, 65
                        if _1252 + ceil32(return_data.size) + ceil32(32 * mem[_1252 + mem[_1252]]) + 1 > test266151307() or ceil32(32 * mem[_1252 + mem[_1252]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1252 + ceil32(return_data.size) + ceil32(32 * mem[_1252 + mem[_1252]]) + 1
                        mem[_1252 + ceil32(return_data.size)] = _1256
                        require return_data.size >= _1254 + (32 * _1256) + 32
                        mem[_1252 + ceil32(return_data.size) + 32 len 32 * _1256] = mem[_1252 + _1254 + 32 len 32 * _1256]
                        if 0 >= _1256:
                            revert with 0, 50
                        if mem[_1252 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1252 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1252 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        mem[mem[64]] = 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1252 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t
    return memory
      from mem[64]
       len 32
}

function sub_e435a949(?) payable {
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _712 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _735 = mem[_712]
                require mem[_712] <= test266151307()
                require _712 + mem[_712] + 31 < _712 + return_data.size
                _749 = mem[_712 + mem[_712]]
                if mem[_712 + mem[_712]] > test266151307():
                    revert with 0, 65
                if _712 + ceil32(return_data.size) + ceil32(32 * mem[_712 + mem[_712]]) + 1 > test266151307() or ceil32(32 * mem[_712 + mem[_712]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _712 + ceil32(return_data.size) + ceil32(32 * mem[_712 + mem[_712]]) + 1
                mem[_712 + ceil32(return_data.size)] = _749
                require return_data.size >= _735 + (32 * _749) + 32
                mem[_712 + ceil32(return_data.size) + 32 len 32 * _749] = mem[_712 + _735 + 32 len 32 * _749]
                if 0 >= _749:
                    revert with 0, 50
                if mem[_712 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_712 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    return sub_535aa3bb
                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                    return sub_ac55eac2
                if sub_adb2dff9 < sub_583d4cc6:
                    revert with 0, 17
                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                    revert with 0, 17
                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                    revert with 0, 17
                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 17
                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                    revert with 0, 17
                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                    revert with 0, 17
                if not sub_adb2dff9 - sub_583d4cc6:
                    revert with 0, 18
                mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_712 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _711 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _734 = mem[_711]
                    require mem[_711] <= test266151307()
                    require _711 + mem[_711] + 31 < _711 + return_data.size
                    _748 = mem[_711 + mem[_711]]
                    if mem[_711 + mem[_711]] > test266151307():
                        revert with 0, 65
                    if _711 + ceil32(return_data.size) + ceil32(32 * mem[_711 + mem[_711]]) + 1 > test266151307() or ceil32(32 * mem[_711 + mem[_711]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _711 + ceil32(return_data.size) + ceil32(32 * mem[_711 + mem[_711]]) + 1
                    mem[_711 + ceil32(return_data.size)] = _748
                    require return_data.size >= _734 + (32 * _748) + 32
                    mem[_711 + ceil32(return_data.size) + 32 len 32 * _748] = mem[_711 + _734 + 32 len 32 * _748]
                    if 0 >= _748:
                        revert with 0, 50
                    if mem[_711 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_711 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_711 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1206 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1220 = mem[_1206]
                    require mem[_1206] <= test266151307()
                    require _1206 + mem[_1206] + 31 < _1206 + return_data.size
                    _1230 = mem[_1206 + mem[_1206]]
                    if mem[_1206 + mem[_1206]] > test266151307():
                        revert with 0, 65
                    if _1206 + ceil32(return_data.size) + ceil32(32 * mem[_1206 + mem[_1206]]) + 1 > test266151307() or ceil32(32 * mem[_1206 + mem[_1206]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1206 + ceil32(return_data.size) + ceil32(32 * mem[_1206 + mem[_1206]]) + 1
                    mem[_1206 + ceil32(return_data.size)] = _1230
                    require return_data.size >= _1220 + (32 * _1230) + 32
                    mem[_1206 + ceil32(return_data.size) + 32 len 32 * _1230] = mem[_1206 + _1220 + 32 len 32 * _1230]
                    if 0 >= _1230:
                        revert with 0, 50
                    if mem[_1206 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1206 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1206 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _710 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _733 = mem[_710]
                    require mem[_710] <= test266151307()
                    require _710 + mem[_710] + 31 < _710 + return_data.size
                    _747 = mem[_710 + mem[_710]]
                    if mem[_710 + mem[_710]] > test266151307():
                        revert with 0, 65
                    if _710 + ceil32(return_data.size) + ceil32(32 * mem[_710 + mem[_710]]) + 1 > test266151307() or ceil32(32 * mem[_710 + mem[_710]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _710 + ceil32(return_data.size) + ceil32(32 * mem[_710 + mem[_710]]) + 1
                    mem[_710 + ceil32(return_data.size)] = _747
                    require return_data.size >= _733 + (32 * _747) + 32
                    mem[_710 + ceil32(return_data.size) + 32 len 32 * _747] = mem[_710 + _733 + 32 len 32 * _747]
                    if 0 >= _747:
                        revert with 0, 50
                    if mem[_710 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_710 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_710 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _709 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _732 = mem[_709]
                        require mem[_709] <= test266151307()
                        require _709 + mem[_709] + 31 < _709 + return_data.size
                        _746 = mem[_709 + mem[_709]]
                        if mem[_709 + mem[_709]] > test266151307():
                            revert with 0, 65
                        if _709 + ceil32(return_data.size) + ceil32(32 * mem[_709 + mem[_709]]) + 1 > test266151307() or ceil32(32 * mem[_709 + mem[_709]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _709 + ceil32(return_data.size) + ceil32(32 * mem[_709 + mem[_709]]) + 1
                        mem[_709 + ceil32(return_data.size)] = _746
                        require return_data.size >= _732 + (32 * _746) + 32
                        mem[_709 + ceil32(return_data.size) + 32 len 32 * _746] = mem[_709 + _732 + 32 len 32 * _746]
                        if 0 >= _746:
                            revert with 0, 50
                        if mem[_709 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_709 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_709 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1205 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1219 = mem[_1205]
                        require mem[_1205] <= test266151307()
                        require _1205 + mem[_1205] + 31 < _1205 + return_data.size
                        _1229 = mem[_1205 + mem[_1205]]
                        if mem[_1205 + mem[_1205]] > test266151307():
                            revert with 0, 65
                        if _1205 + ceil32(return_data.size) + ceil32(32 * mem[_1205 + mem[_1205]]) + 1 > test266151307() or ceil32(32 * mem[_1205 + mem[_1205]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1205 + ceil32(return_data.size) + ceil32(32 * mem[_1205 + mem[_1205]]) + 1
                        mem[_1205 + ceil32(return_data.size)] = _1229
                        require return_data.size >= _1219 + (32 * _1229) + 32
                        mem[_1205 + ceil32(return_data.size) + 32 len 32 * _1229] = mem[_1205 + _1219 + 32 len 32 * _1229]
                        if 0 >= _1229:
                            revert with 0, 50
                        if mem[_1205 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1205 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1205 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1204 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1218 = mem[_1204]
                    require mem[_1204] <= test266151307()
                    require _1204 + mem[_1204] + 31 < _1204 + return_data.size
                    _1228 = mem[_1204 + mem[_1204]]
                    if mem[_1204 + mem[_1204]] > test266151307():
                        revert with 0, 65
                    if _1204 + ceil32(return_data.size) + ceil32(32 * mem[_1204 + mem[_1204]]) + 1 > test266151307() or ceil32(32 * mem[_1204 + mem[_1204]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1204 + ceil32(return_data.size) + ceil32(32 * mem[_1204 + mem[_1204]]) + 1
                    mem[_1204 + ceil32(return_data.size)] = _1228
                    require return_data.size >= _1218 + (32 * _1228) + 32
                    mem[_1204 + ceil32(return_data.size) + 32 len 32 * _1228] = mem[_1204 + _1218 + 32 len 32 * _1228]
                    if 0 >= _1228:
                        revert with 0, 50
                    if mem[_1204 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1204 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1204 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1203 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1217 = mem[_1203]
                        require mem[_1203] <= test266151307()
                        require _1203 + mem[_1203] + 31 < _1203 + return_data.size
                        _1227 = mem[_1203 + mem[_1203]]
                        if mem[_1203 + mem[_1203]] > test266151307():
                            revert with 0, 65
                        if _1203 + ceil32(return_data.size) + ceil32(32 * mem[_1203 + mem[_1203]]) + 1 > test266151307() or ceil32(32 * mem[_1203 + mem[_1203]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1203 + ceil32(return_data.size) + ceil32(32 * mem[_1203 + mem[_1203]]) + 1
                        mem[_1203 + ceil32(return_data.size)] = _1227
                        require return_data.size >= _1217 + (32 * _1227) + 32
                        mem[_1203 + ceil32(return_data.size) + 32 len 32 * _1227] = mem[_1203 + _1217 + 32 len 32 * _1227]
                        if 0 >= _1227:
                            revert with 0, 50
                        if mem[_1203 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1203 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1203 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1447 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1449 = mem[_1447]
                        require mem[_1447] <= test266151307()
                        require _1447 + mem[_1447] + 31 < _1447 + return_data.size
                        _1451 = mem[_1447 + mem[_1447]]
                        if mem[_1447 + mem[_1447]] > test266151307():
                            revert with 0, 65
                        if _1447 + ceil32(return_data.size) + ceil32(32 * mem[_1447 + mem[_1447]]) + 1 > test266151307() or ceil32(32 * mem[_1447 + mem[_1447]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1447 + ceil32(return_data.size) + ceil32(32 * mem[_1447 + mem[_1447]]) + 1
                        mem[_1447 + ceil32(return_data.size)] = _1451
                        require return_data.size >= _1449 + (32 * _1451) + 32
                        mem[_1447 + ceil32(return_data.size) + 32 len 32 * _1451] = mem[_1447 + _1449 + 32 len 32 * _1451]
                        if 0 >= _1451:
                            revert with 0, 50
                        if mem[_1447 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1447 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1447 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
    else:
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _718 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _740 = mem[_718]
                require mem[_718] <= test266151307()
                require _718 + mem[_718] + 31 < _718 + return_data.size
                _754 = mem[_718 + mem[_718]]
                if mem[_718 + mem[_718]] > test266151307():
                    revert with 0, 65
                if _718 + ceil32(return_data.size) + ceil32(32 * mem[_718 + mem[_718]]) + 1 > test266151307() or ceil32(32 * mem[_718 + mem[_718]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _718 + ceil32(return_data.size) + ceil32(32 * mem[_718 + mem[_718]]) + 1
                mem[_718 + ceil32(return_data.size)] = _754
                require return_data.size >= _740 + (32 * _754) + 32
                mem[_718 + ceil32(return_data.size) + 32 len 32 * _754] = mem[_718 + _740 + 32 len 32 * _754]
                if 0 >= _754:
                    revert with 0, 50
                if mem[_718 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_718 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    return sub_535aa3bb
                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                    return sub_ac55eac2
                if sub_adb2dff9 < sub_583d4cc6:
                    revert with 0, 17
                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                    revert with 0, 17
                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                    revert with 0, 17
                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 17
                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                    revert with 0, 17
                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                    revert with 0, 17
                if not sub_adb2dff9 - sub_583d4cc6:
                    revert with 0, 18
                mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_718 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _717 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _739 = mem[_717]
                    require mem[_717] <= test266151307()
                    require _717 + mem[_717] + 31 < _717 + return_data.size
                    _753 = mem[_717 + mem[_717]]
                    if mem[_717 + mem[_717]] > test266151307():
                        revert with 0, 65
                    if _717 + ceil32(return_data.size) + ceil32(32 * mem[_717 + mem[_717]]) + 1 > test266151307() or ceil32(32 * mem[_717 + mem[_717]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _717 + ceil32(return_data.size) + ceil32(32 * mem[_717 + mem[_717]]) + 1
                    mem[_717 + ceil32(return_data.size)] = _753
                    require return_data.size >= _739 + (32 * _753) + 32
                    mem[_717 + ceil32(return_data.size) + 32 len 32 * _753] = mem[_717 + _739 + 32 len 32 * _753]
                    if 0 >= _753:
                        revert with 0, 50
                    if mem[_717 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_717 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_717 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1210 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1224 = mem[_1210]
                    require mem[_1210] <= test266151307()
                    require _1210 + mem[_1210] + 31 < _1210 + return_data.size
                    _1234 = mem[_1210 + mem[_1210]]
                    if mem[_1210 + mem[_1210]] > test266151307():
                        revert with 0, 65
                    if _1210 + ceil32(return_data.size) + ceil32(32 * mem[_1210 + mem[_1210]]) + 1 > test266151307() or ceil32(32 * mem[_1210 + mem[_1210]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1210 + ceil32(return_data.size) + ceil32(32 * mem[_1210 + mem[_1210]]) + 1
                    mem[_1210 + ceil32(return_data.size)] = _1234
                    require return_data.size >= _1224 + (32 * _1234) + 32
                    mem[_1210 + ceil32(return_data.size) + 32 len 32 * _1234] = mem[_1210 + _1224 + 32 len 32 * _1234]
                    if 0 >= _1234:
                        revert with 0, 50
                    if mem[_1210 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1210 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1210 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _716 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _738 = mem[_716]
                    require mem[_716] <= test266151307()
                    require _716 + mem[_716] + 31 < _716 + return_data.size
                    _752 = mem[_716 + mem[_716]]
                    if mem[_716 + mem[_716]] > test266151307():
                        revert with 0, 65
                    if _716 + ceil32(return_data.size) + ceil32(32 * mem[_716 + mem[_716]]) + 1 > test266151307() or ceil32(32 * mem[_716 + mem[_716]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _716 + ceil32(return_data.size) + ceil32(32 * mem[_716 + mem[_716]]) + 1
                    mem[_716 + ceil32(return_data.size)] = _752
                    require return_data.size >= _738 + (32 * _752) + 32
                    mem[_716 + ceil32(return_data.size) + 32 len 32 * _752] = mem[_716 + _738 + 32 len 32 * _752]
                    if 0 >= _752:
                        revert with 0, 50
                    if mem[_716 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_716 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_716 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _715 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _737 = mem[_715]
                        require mem[_715] <= test266151307()
                        require _715 + mem[_715] + 31 < _715 + return_data.size
                        _751 = mem[_715 + mem[_715]]
                        if mem[_715 + mem[_715]] > test266151307():
                            revert with 0, 65
                        if _715 + ceil32(return_data.size) + ceil32(32 * mem[_715 + mem[_715]]) + 1 > test266151307() or ceil32(32 * mem[_715 + mem[_715]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _715 + ceil32(return_data.size) + ceil32(32 * mem[_715 + mem[_715]]) + 1
                        mem[_715 + ceil32(return_data.size)] = _751
                        require return_data.size >= _737 + (32 * _751) + 32
                        mem[_715 + ceil32(return_data.size) + 32 len 32 * _751] = mem[_715 + _737 + 32 len 32 * _751]
                        if 0 >= _751:
                            revert with 0, 50
                        if mem[_715 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_715 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_715 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1209 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1223 = mem[_1209]
                        require mem[_1209] <= test266151307()
                        require _1209 + mem[_1209] + 31 < _1209 + return_data.size
                        _1233 = mem[_1209 + mem[_1209]]
                        if mem[_1209 + mem[_1209]] > test266151307():
                            revert with 0, 65
                        if _1209 + ceil32(return_data.size) + ceil32(32 * mem[_1209 + mem[_1209]]) + 1 > test266151307() or ceil32(32 * mem[_1209 + mem[_1209]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1209 + ceil32(return_data.size) + ceil32(32 * mem[_1209 + mem[_1209]]) + 1
                        mem[_1209 + ceil32(return_data.size)] = _1233
                        require return_data.size >= _1223 + (32 * _1233) + 32
                        mem[_1209 + ceil32(return_data.size) + 32 len 32 * _1233] = mem[_1209 + _1223 + 32 len 32 * _1233]
                        if 0 >= _1233:
                            revert with 0, 50
                        if mem[_1209 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1209 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1209 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1208 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1222 = mem[_1208]
                    require mem[_1208] <= test266151307()
                    require _1208 + mem[_1208] + 31 < _1208 + return_data.size
                    _1232 = mem[_1208 + mem[_1208]]
                    if mem[_1208 + mem[_1208]] > test266151307():
                        revert with 0, 65
                    if _1208 + ceil32(return_data.size) + ceil32(32 * mem[_1208 + mem[_1208]]) + 1 > test266151307() or ceil32(32 * mem[_1208 + mem[_1208]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1208 + ceil32(return_data.size) + ceil32(32 * mem[_1208 + mem[_1208]]) + 1
                    mem[_1208 + ceil32(return_data.size)] = _1232
                    require return_data.size >= _1222 + (32 * _1232) + 32
                    mem[_1208 + ceil32(return_data.size) + 32 len 32 * _1232] = mem[_1208 + _1222 + 32 len 32 * _1232]
                    if 0 >= _1232:
                        revert with 0, 50
                    if mem[_1208 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1208 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        return sub_535aa3bb
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                        return sub_ac55eac2
                    if sub_adb2dff9 < sub_583d4cc6:
                        revert with 0, 17
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                        revert with 0, 17
                    if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                        revert with 0, 17
                    if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 17
                    if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                        revert with 0, 17
                    if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                        revert with 0, 17
                    if not sub_adb2dff9 - sub_583d4cc6:
                        revert with 0, 18
                    mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1208 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1207 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1221 = mem[_1207]
                        require mem[_1207] <= test266151307()
                        require _1207 + mem[_1207] + 31 < _1207 + return_data.size
                        _1231 = mem[_1207 + mem[_1207]]
                        if mem[_1207 + mem[_1207]] > test266151307():
                            revert with 0, 65
                        if _1207 + ceil32(return_data.size) + ceil32(32 * mem[_1207 + mem[_1207]]) + 1 > test266151307() or ceil32(32 * mem[_1207 + mem[_1207]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1207 + ceil32(return_data.size) + ceil32(32 * mem[_1207 + mem[_1207]]) + 1
                        mem[_1207 + ceil32(return_data.size)] = _1231
                        require return_data.size >= _1221 + (32 * _1231) + 32
                        mem[_1207 + ceil32(return_data.size) + 32 len 32 * _1231] = mem[_1207 + _1221 + 32 len 32 * _1231]
                        if 0 >= _1231:
                            revert with 0, 50
                        if mem[_1207 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1207 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1207 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1448 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1450 = mem[_1448]
                        require mem[_1448] <= test266151307()
                        require _1448 + mem[_1448] + 31 < _1448 + return_data.size
                        _1452 = mem[_1448 + mem[_1448]]
                        if mem[_1448 + mem[_1448]] > test266151307():
                            revert with 0, 65
                        if _1448 + ceil32(return_data.size) + ceil32(32 * mem[_1448 + mem[_1448]]) + 1 > test266151307() or ceil32(32 * mem[_1448 + mem[_1448]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1448 + ceil32(return_data.size) + ceil32(32 * mem[_1448 + mem[_1448]]) + 1
                        mem[_1448 + ceil32(return_data.size)] = _1452
                        require return_data.size >= _1450 + (32 * _1452) + 32
                        mem[_1448 + ceil32(return_data.size) + 32 len 32 * _1452] = mem[_1448 + _1450 + 32 len 32 * _1452]
                        if 0 >= _1452:
                            revert with 0, 50
                        if mem[_1448 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_1448 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            return sub_535aa3bb
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            return sub_ac55eac2
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        mem[mem[64]] = (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1448 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6
    return memory
      from mem[64]
       len 32
}

function sub_fcd64074(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if ext_call.return_data[12 len 20] != address(ext_call.return_data[0]):
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1082 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1105 = mem[_1082]
                require mem[_1082] <= test266151307()
                require _1082 + mem[_1082] + 31 < _1082 + return_data.size
                _1119 = mem[_1082 + mem[_1082]]
                if mem[_1082 + mem[_1082]] > test266151307():
                    revert with 0, 65
                if _1082 + ceil32(return_data.size) + ceil32(32 * mem[_1082 + mem[_1082]]) + 1 > test266151307() or ceil32(32 * mem[_1082 + mem[_1082]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _1082 + ceil32(return_data.size) + ceil32(32 * mem[_1082 + mem[_1082]]) + 1
                mem[_1082 + ceil32(return_data.size)] = _1119
                require return_data.size >= _1105 + (32 * _1119) + 32
                mem[_1082 + ceil32(return_data.size) + 32 len 32 * _1119] = mem[_1082 + _1105 + 32 len 32 * _1119]
                if 0 >= _1119:
                    revert with 0, 50
                _3180 = mem[_1082 + ceil32(return_data.size) + 32]
                if mem[_1082 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1082 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xcfe19c66 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3300 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3316 = mem[_3300]
                    _3342 = mem[64]
                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[mem[64] + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 0 >= mem[_3342]:
                        revert with 0, 50
                    mem[_3342 + 32] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[_3342 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3342 + (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 1 >= mem[_3342]:
                        revert with 0, 50
                    mem[_3342 + 64] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                    mem[_3342 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3342 + (4 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[_3342 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[_3342 + (4 * ceil32(return_data.size)) + 100] = _3316
                    mem[_3342 + (4 * ceil32(return_data.size)) + 132] = 64
                    mem[_3342 + (4 * ceil32(return_data.size)) + 164] = mem[_3342]
                    idx = 0
                    s = _3342 + 32
                    t = _3342 + (4 * ceil32(return_data.size)) + 196
                    while idx < mem[_3342]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _3342 + (4 * ceil32(return_data.size)) + (32 * mem[_3342]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5113 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5139 = mem[_5113]
                    require mem[_5113] <= test266151307()
                    require _5113 + mem[_5113] + 31 < _5113 + return_data.size
                    _5165 = mem[_5113 + mem[_5113]]
                    if mem[_5113 + mem[_5113]] > test266151307():
                        revert with 0, 65
                    if _5113 + ceil32(return_data.size) + ceil32(32 * mem[_5113 + mem[_5113]]) + 1 > test266151307() or ceil32(32 * mem[_5113 + mem[_5113]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _5113 + ceil32(return_data.size) + ceil32(32 * mem[_5113 + mem[_5113]]) + 1
                    mem[_5113 + ceil32(return_data.size)] = _5165
                    require return_data.size >= _5139 + (32 * _5165) + 32
                    mem[_5113 + ceil32(return_data.size) + 32 len 32 * _5165] = mem[_5113 + _5139 + 32 len 32 * _5165]
                    if 0 >= _5165:
                        revert with 0, 50
                    if arg1 and mem[_5113 + ceil32(return_data.size) + 32] > -1 / arg1:
                        revert with 0, 17
                    if sub_535aa3bb < sub_bf0673d2:
                        revert with 0, 17
                    if arg1 * mem[_5113 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5113 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if arg1 * mem[_5113 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5113 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5113 + ceil32(return_data.size) + 32]) / 10000:
                        revert with 0, 17
                    mem[mem[64]] = (arg1 * mem[_5113 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5113 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5113 + ceil32(return_data.size) + 32]) / 10000)
                else:
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3308 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3325 = mem[_3308]
                        _3368 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3368]:
                            revert with 0, 50
                        mem[_3368 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3368 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3368 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3368]:
                            revert with 0, 50
                        mem[_3368 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3368 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3368 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3368 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3368 + (4 * ceil32(return_data.size)) + 100] = _3325
                        mem[_3368 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3368 + (4 * ceil32(return_data.size)) + 164] = mem[_3368]
                        idx = 0
                        s = _3368 + 32
                        t = _3368 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3368]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3325, 64, mem[_3368 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3368]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3368 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3368 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5138 = mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32
                        require mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 <= test266151307()
                        require _3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 127 < _3368 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5164 = mem[_3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 96]
                        if mem[_3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3368 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3368 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3368 + (4 * ceil32(return_data.size)) + mem[_3368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3325) >> 32 + 96]) + 97
                        mem[_3368 + (6 * ceil32(return_data.size)) + 96] = _5164
                        require return_data.size >= _5138 + (32 * _5164) + 32
                        mem[_3368 + (6 * ceil32(return_data.size)) + 128 len 32 * _5164] = mem[_3368 + (4 * ceil32(return_data.size)) + _5138 + 128 len 32 * _5164]
                        if 0 >= _5164:
                            revert with 0, 50
                        if arg1 and mem[_3368 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_ac55eac2 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3368 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1082 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3686 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3734 = mem[_3686]
                        _3787 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3787]:
                            revert with 0, 50
                        mem[_3787 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3787 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3787 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3787]:
                            revert with 0, 50
                        mem[_3787 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3787 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3787 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3787 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3787 + (4 * ceil32(return_data.size)) + 100] = _3734
                        mem[_3787 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3787 + (4 * ceil32(return_data.size)) + 164] = mem[_3787]
                        idx = 0
                        s = _3787 + 32
                        t = _3787 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3787]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3734, 64, mem[_3787 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3787]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3787 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3787 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5137 = mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32
                        require mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 <= test266151307()
                        require _3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 127 < _3787 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5163 = mem[_3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 96]
                        if mem[_3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3787 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3787 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3787 + (4 * ceil32(return_data.size)) + mem[_3787 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3734) >> 32 + 96]) + 97
                        mem[_3787 + (6 * ceil32(return_data.size)) + 96] = _5163
                        require return_data.size >= _5137 + (32 * _5163) + 32
                        mem[_3787 + (6 * ceil32(return_data.size)) + 128 len 32 * _5163] = mem[_3787 + (4 * ceil32(return_data.size)) + _5137 + 128 len 32 * _5163]
                        if 0 >= _5163:
                            revert with 0, 50
                        if arg1 and mem[_3787 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3180 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3787 + (6 * ceil32(return_data.size)) + 128]) / 10000)
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1081 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1104 = mem[_1081]
                    require mem[_1081] <= test266151307()
                    require _1081 + mem[_1081] + 31 < _1081 + return_data.size
                    _1118 = mem[_1081 + mem[_1081]]
                    if mem[_1081 + mem[_1081]] > test266151307():
                        revert with 0, 65
                    if _1081 + ceil32(return_data.size) + ceil32(32 * mem[_1081 + mem[_1081]]) + 1 > test266151307() or ceil32(32 * mem[_1081 + mem[_1081]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1081 + ceil32(return_data.size) + ceil32(32 * mem[_1081 + mem[_1081]]) + 1
                    mem[_1081 + ceil32(return_data.size)] = _1118
                    require return_data.size >= _1104 + (32 * _1118) + 32
                    mem[_1081 + ceil32(return_data.size) + 32 len 32 * _1118] = mem[_1081 + _1104 + 32 len 32 * _1118]
                    if 0 >= _1118:
                        revert with 0, 50
                    _3179 = mem[_1081 + ceil32(return_data.size) + 32]
                    if mem[_1081 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1081 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3299 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3315 = mem[_3299]
                        _3339 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3339]:
                            revert with 0, 50
                        mem[_3339 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3339 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3339 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3339]:
                            revert with 0, 50
                        mem[_3339 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3339 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3339 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3339 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3339 + (4 * ceil32(return_data.size)) + 100] = _3315
                        mem[_3339 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3339 + (4 * ceil32(return_data.size)) + 164] = mem[_3339]
                        idx = 0
                        s = _3339 + 32
                        t = _3339 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3339]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3339 + (4 * ceil32(return_data.size)) + (32 * mem[_3339]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5110 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5136 = mem[_5110]
                        require mem[_5110] <= test266151307()
                        require _5110 + mem[_5110] + 31 < _5110 + return_data.size
                        _5162 = mem[_5110 + mem[_5110]]
                        if mem[_5110 + mem[_5110]] > test266151307():
                            revert with 0, 65
                        if _5110 + ceil32(return_data.size) + ceil32(32 * mem[_5110 + mem[_5110]]) + 1 > test266151307() or ceil32(32 * mem[_5110 + mem[_5110]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5110 + ceil32(return_data.size) + ceil32(32 * mem[_5110 + mem[_5110]]) + 1
                        mem[_5110 + ceil32(return_data.size)] = _5162
                        require return_data.size >= _5136 + (32 * _5162) + 32
                        mem[_5110 + ceil32(return_data.size) + 32 len 32 * _5162] = mem[_5110 + _5136 + 32 len 32 * _5162]
                        if 0 >= _5162:
                            revert with 0, 50
                        if arg1 and mem[_5110 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5110 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5110 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5110 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5110 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5110 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5110 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5110 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5110 + ceil32(return_data.size) + 32]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3307 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3324 = mem[_3307]
                            _3365 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3365]:
                                revert with 0, 50
                            mem[_3365 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3365 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3365 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3365]:
                                revert with 0, 50
                            mem[_3365 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3365 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3365 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3365 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3365 + (4 * ceil32(return_data.size)) + 100] = _3324
                            mem[_3365 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3365 + (4 * ceil32(return_data.size)) + 164] = mem[_3365]
                            idx = 0
                            s = _3365 + 32
                            t = _3365 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3365]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3324, 64, mem[_3365 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3365]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3365 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3365 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5135 = mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32
                            require mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 <= test266151307()
                            require _3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 127 < _3365 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5161 = mem[_3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 96]
                            if mem[_3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3365 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3365 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3365 + (4 * ceil32(return_data.size)) + mem[_3365 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3324) >> 32 + 96]) + 97
                            mem[_3365 + (6 * ceil32(return_data.size)) + 96] = _5161
                            require return_data.size >= _5135 + (32 * _5161) + 32
                            mem[_3365 + (6 * ceil32(return_data.size)) + 128 len 32 * _5161] = mem[_3365 + (4 * ceil32(return_data.size)) + _5135 + 128 len 32 * _5161]
                            if 0 >= _5161:
                                revert with 0, 50
                            if arg1 and mem[_3365 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3365 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1081 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3682 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3732 = mem[_3682]
                            _3783 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3783]:
                                revert with 0, 50
                            mem[_3783 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3783 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3783 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3783]:
                                revert with 0, 50
                            mem[_3783 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3783 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3783 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3783 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3783 + (4 * ceil32(return_data.size)) + 100] = _3732
                            mem[_3783 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3783 + (4 * ceil32(return_data.size)) + 164] = mem[_3783]
                            idx = 0
                            s = _3783 + 32
                            t = _3783 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3783]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3732, 64, mem[_3783 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3783]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3783 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3783 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5134 = mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32
                            require mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 <= test266151307()
                            require _3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 127 < _3783 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5160 = mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96]
                            if mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3783 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3783 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96]) + 97
                            mem[_3783 + (6 * ceil32(return_data.size)) + 96] = mem[_3783 + (4 * ceil32(return_data.size)) + mem[_3783 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3732) >> 32 + 96]
                            require return_data.size >= _5134 + (32 * _5160) + 32
                            mem[_3783 + (6 * ceil32(return_data.size)) + 128 len 32 * _5160] = mem[_3783 + (4 * ceil32(return_data.size)) + _5134 + 128 len 32 * _5160]
                            if 0 >= _5160:
                                revert with 0, 50
                            if arg1 and mem[_3783 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3179 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3783 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3192 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3206 = mem[_3192]
                    require mem[_3192] <= test266151307()
                    require _3192 + mem[_3192] + 31 < _3192 + return_data.size
                    _3216 = mem[_3192 + mem[_3192]]
                    if mem[_3192 + mem[_3192]] > test266151307():
                        revert with 0, 65
                    if _3192 + ceil32(return_data.size) + ceil32(32 * mem[_3192 + mem[_3192]]) + 1 > test266151307() or ceil32(32 * mem[_3192 + mem[_3192]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3192 + ceil32(return_data.size) + ceil32(32 * mem[_3192 + mem[_3192]]) + 1
                    mem[_3192 + ceil32(return_data.size)] = _3216
                    require return_data.size >= _3206 + (32 * _3216) + 32
                    mem[_3192 + ceil32(return_data.size) + 32 len 32 * _3216] = mem[_3192 + _3206 + 32 len 32 * _3216]
                    if 0 >= _3216:
                        revert with 0, 50
                    _5077 = mem[_3192 + ceil32(return_data.size) + 32]
                    if mem[_3192 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_3192 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5318 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5334 = mem[_5318]
                        _5356 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5356]:
                            revert with 0, 50
                        mem[_5356 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5356 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5356 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5356]:
                            revert with 0, 50
                        mem[_5356 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5356 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5356 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5356 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5356 + (4 * ceil32(return_data.size)) + 100] = _5334
                        mem[_5356 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5356 + (4 * ceil32(return_data.size)) + 164] = mem[_5356]
                        idx = 0
                        s = _5356 + 32
                        t = _5356 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5356]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5356 + (4 * ceil32(return_data.size)) + (32 * mem[_5356]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6428 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6452 = mem[_6428]
                        require mem[_6428] <= test266151307()
                        require _6428 + mem[_6428] + 31 < _6428 + return_data.size
                        _6476 = mem[_6428 + mem[_6428]]
                        if mem[_6428 + mem[_6428]] > test266151307():
                            revert with 0, 65
                        if _6428 + ceil32(return_data.size) + ceil32(32 * mem[_6428 + mem[_6428]]) + 1 > test266151307() or ceil32(32 * mem[_6428 + mem[_6428]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _6428 + ceil32(return_data.size) + ceil32(32 * mem[_6428 + mem[_6428]]) + 1
                        mem[_6428 + ceil32(return_data.size)] = _6476
                        require return_data.size >= _6452 + (32 * _6476) + 32
                        mem[_6428 + ceil32(return_data.size) + 32 len 32 * _6476] = mem[_6428 + _6452 + 32 len 32 * _6476]
                        if 0 >= _6476:
                            revert with 0, 50
                        if arg1 and mem[_6428 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_6428 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6428 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_6428 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6428 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6428 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_6428 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6428 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6428 + ceil32(return_data.size) + 32]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5326 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5342 = mem[_5326]
                            _5380 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5380]:
                                revert with 0, 50
                            mem[_5380 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5380 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5380 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5380]:
                                revert with 0, 50
                            mem[_5380 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5380 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5380 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5380 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5380 + (4 * ceil32(return_data.size)) + 100] = _5342
                            mem[_5380 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5380 + (4 * ceil32(return_data.size)) + 164] = mem[_5380]
                            idx = 0
                            s = _5380 + 32
                            t = _5380 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5380]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5380 + (4 * ceil32(return_data.size)) + (32 * mem[_5380]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6427 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6451 = mem[_6427]
                            require mem[_6427] <= test266151307()
                            require _6427 + mem[_6427] + 31 < _6427 + return_data.size
                            _6475 = mem[_6427 + mem[_6427]]
                            if mem[_6427 + mem[_6427]] > test266151307():
                                revert with 0, 65
                            if _6427 + ceil32(return_data.size) + ceil32(32 * mem[_6427 + mem[_6427]]) + 1 > test266151307() or ceil32(32 * mem[_6427 + mem[_6427]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6427 + ceil32(return_data.size) + ceil32(32 * mem[_6427 + mem[_6427]]) + 1
                            mem[_6427 + ceil32(return_data.size)] = _6475
                            require return_data.size >= _6451 + (32 * _6475) + 32
                            mem[_6427 + ceil32(return_data.size) + 32 len 32 * _6475] = mem[_6427 + _6451 + 32 len 32 * _6475]
                            if 0 >= _6475:
                                revert with 0, 50
                            if arg1 and mem[_6427 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6427 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6427 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6427 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6427 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6427 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6427 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6427 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6427 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3192 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5626 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5669 = mem[_5626]
                            _5704 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5704]:
                                revert with 0, 50
                            mem[_5704 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5704 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5704 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5704]:
                                revert with 0, 50
                            mem[_5704 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5704 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5704 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5704 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5704 + (4 * ceil32(return_data.size)) + 100] = _5669
                            mem[_5704 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5704 + (4 * ceil32(return_data.size)) + 164] = mem[_5704]
                            idx = 0
                            s = _5704 + 32
                            t = _5704 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5704]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5669, 64, mem[_5704 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5704]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5704 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5704 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6450 = mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32
                            require mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 <= test266151307()
                            require _5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 127 < _5704 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6474 = mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96]
                            if mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5704 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5704 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96]) + 97
                            mem[_5704 + (6 * ceil32(return_data.size)) + 96] = mem[_5704 + (4 * ceil32(return_data.size)) + mem[_5704 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5669) >> 32 + 96]
                            require return_data.size >= _6450 + (32 * _6474) + 32
                            mem[_5704 + (6 * ceil32(return_data.size)) + 128 len 32 * _6474] = mem[_5704 + (4 * ceil32(return_data.size)) + _6450 + 128 len 32 * _6474]
                            if 0 >= _6474:
                                revert with 0, 50
                            if arg1 and mem[_5704 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5077 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5704 + (6 * ceil32(return_data.size)) + 128]) / 10000)
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1080 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1103 = mem[_1080]
                    require mem[_1080] <= test266151307()
                    require _1080 + mem[_1080] + 31 < _1080 + return_data.size
                    _1117 = mem[_1080 + mem[_1080]]
                    if mem[_1080 + mem[_1080]] > test266151307():
                        revert with 0, 65
                    if _1080 + ceil32(return_data.size) + ceil32(32 * mem[_1080 + mem[_1080]]) + 1 > test266151307() or ceil32(32 * mem[_1080 + mem[_1080]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1080 + ceil32(return_data.size) + ceil32(32 * mem[_1080 + mem[_1080]]) + 1
                    mem[_1080 + ceil32(return_data.size)] = _1117
                    require return_data.size >= _1103 + (32 * _1117) + 32
                    mem[_1080 + ceil32(return_data.size) + 32 len 32 * _1117] = mem[_1080 + _1103 + 32 len 32 * _1117]
                    if 0 >= _1117:
                        revert with 0, 50
                    _3177 = mem[_1080 + ceil32(return_data.size) + 32]
                    if mem[_1080 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1080 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3298 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3314 = mem[_3298]
                        _3336 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3336]:
                            revert with 0, 50
                        mem[_3336 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3336 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3336 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3336]:
                            revert with 0, 50
                        mem[_3336 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3336 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3336 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3336 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3336 + (4 * ceil32(return_data.size)) + 100] = _3314
                        mem[_3336 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3336 + (4 * ceil32(return_data.size)) + 164] = mem[_3336]
                        idx = 0
                        s = _3336 + 32
                        t = _3336 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3336]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3314, 64, mem[_3336 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3336]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3336 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3336 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5133 = mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32
                        require mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 <= test266151307()
                        require _3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 127 < _3336 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5159 = mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 96]
                        if mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3336 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3336 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3314) >> 32 + 96]) + 97
                        mem[_3336 + (6 * ceil32(return_data.size)) + 96] = _5159
                        require return_data.size >= _5133 + (32 * _5159) + 32
                        mem[_3336 + (6 * ceil32(return_data.size)) + 128 len 32 * _5159] = mem[_3336 + (4 * ceil32(return_data.size)) + _5133 + 128 len 32 * _5159]
                        if 0 >= _5159:
                            revert with 0, 50
                        if arg1 and mem[_3336 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3306 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3323 = mem[_3306]
                            _3362 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3362]:
                                revert with 0, 50
                            mem[_3362 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3362 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3362 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3362]:
                                revert with 0, 50
                            mem[_3362 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3362 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3362 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3362 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3362 + (4 * ceil32(return_data.size)) + 100] = _3323
                            mem[_3362 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3362 + (4 * ceil32(return_data.size)) + 164] = mem[_3362]
                            idx = 0
                            s = _3362 + 32
                            t = _3362 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3362]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3362 + (4 * ceil32(return_data.size)) + (32 * mem[_3362]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5106 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5132 = mem[_5106]
                            require mem[_5106] <= test266151307()
                            require _5106 + mem[_5106] + 31 < _5106 + return_data.size
                            _5158 = mem[_5106 + mem[_5106]]
                            if mem[_5106 + mem[_5106]] > test266151307():
                                revert with 0, 65
                            if _5106 + ceil32(return_data.size) + ceil32(32 * mem[_5106 + mem[_5106]]) + 1 > test266151307() or ceil32(32 * mem[_5106 + mem[_5106]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5106 + ceil32(return_data.size) + ceil32(32 * mem[_5106 + mem[_5106]]) + 1
                            mem[_5106 + ceil32(return_data.size)] = _5158
                            require return_data.size >= _5132 + (32 * _5158) + 32
                            mem[_5106 + ceil32(return_data.size) + 32 len 32 * _5158] = mem[_5106 + _5132 + 32 len 32 * _5158]
                            if 0 >= _5158:
                                revert with 0, 50
                            if arg1 and mem[_5106 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5106 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5106 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5106 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5106 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5106 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5106 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5106 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5106 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1080 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3677 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3730 = mem[_3677]
                            _3776 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3776]:
                                revert with 0, 50
                            mem[_3776 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3776 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3776 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3776]:
                                revert with 0, 50
                            mem[_3776 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3776 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3776 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3776 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3776 + (4 * ceil32(return_data.size)) + 100] = _3730
                            mem[_3776 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3776 + (4 * ceil32(return_data.size)) + 164] = mem[_3776]
                            idx = 0
                            s = _3776 + 32
                            t = _3776 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3776]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3730, 64, mem[_3776 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3776]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3776 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3776 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5131 = mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32
                            require mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 <= test266151307()
                            require _3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 127 < _3776 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5157 = mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96]
                            if mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3776 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3776 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96]) + 97
                            mem[_3776 + (6 * ceil32(return_data.size)) + 96] = mem[_3776 + (4 * ceil32(return_data.size)) + mem[_3776 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3730) >> 32 + 96]
                            require return_data.size >= _5131 + (32 * _5157) + 32
                            mem[_3776 + (6 * ceil32(return_data.size)) + 128 len 32 * _5157] = mem[_3776 + (4 * ceil32(return_data.size)) + _5131 + 128 len 32 * _5157]
                            if 0 >= _5157:
                                revert with 0, 50
                            if arg1 and mem[_3776 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3177 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3776 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1079 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1102 = mem[_1079]
                        require mem[_1079] <= test266151307()
                        require _1079 + mem[_1079] + 31 < _1079 + return_data.size
                        _1116 = mem[_1079 + mem[_1079]]
                        if mem[_1079 + mem[_1079]] > test266151307():
                            revert with 0, 65
                        if _1079 + ceil32(return_data.size) + ceil32(32 * mem[_1079 + mem[_1079]]) + 1 > test266151307() or ceil32(32 * mem[_1079 + mem[_1079]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1079 + ceil32(return_data.size) + ceil32(32 * mem[_1079 + mem[_1079]]) + 1
                        mem[_1079 + ceil32(return_data.size)] = _1116
                        require return_data.size >= _1102 + (32 * _1116) + 32
                        mem[_1079 + ceil32(return_data.size) + 32 len 32 * _1116] = mem[_1079 + _1102 + 32 len 32 * _1116]
                        if 0 >= _1116:
                            revert with 0, 50
                        _3176 = mem[_1079 + ceil32(return_data.size) + 32]
                        if mem[_1079 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1079 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3297 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3313 = mem[_3297]
                            _3333 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3333]:
                                revert with 0, 50
                            mem[_3333 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3333 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3333 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3333]:
                                revert with 0, 50
                            mem[_3333 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3333 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3333 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3333 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3333 + (4 * ceil32(return_data.size)) + 100] = _3313
                            mem[_3333 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3333 + (4 * ceil32(return_data.size)) + 164] = mem[_3333]
                            idx = 0
                            s = _3333 + 32
                            t = _3333 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3333]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3313, 64, mem[_3333 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3333]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3333 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3333 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5130 = mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32
                            require mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 <= test266151307()
                            require _3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 127 < _3333 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5156 = mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 96]
                            if mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3313) >> 32 + 96]) + 97
                            mem[_3333 + (6 * ceil32(return_data.size)) + 96] = _5156
                            require return_data.size >= _5130 + (32 * _5156) + 32
                            mem[_3333 + (6 * ceil32(return_data.size)) + 128 len 32 * _5156] = mem[_3333 + (4 * ceil32(return_data.size)) + _5130 + 128 len 32 * _5156]
                            if 0 >= _5156:
                                revert with 0, 50
                            if arg1 and mem[_3333 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3305 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3322 = mem[_3305]
                                _3359 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3359]:
                                    revert with 0, 50
                                mem[_3359 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3359 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3359 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3359]:
                                    revert with 0, 50
                                mem[_3359 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3359 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3359 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3359 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3359 + (4 * ceil32(return_data.size)) + 100] = _3322
                                mem[_3359 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3359 + (4 * ceil32(return_data.size)) + 164] = mem[_3359]
                                idx = 0
                                s = _3359 + 32
                                t = _3359 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3359]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _3359 + (4 * ceil32(return_data.size)) + (32 * mem[_3359]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5103 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5129 = mem[_5103]
                                require mem[_5103] <= test266151307()
                                require _5103 + mem[_5103] + 31 < _5103 + return_data.size
                                _5155 = mem[_5103 + mem[_5103]]
                                if mem[_5103 + mem[_5103]] > test266151307():
                                    revert with 0, 65
                                if _5103 + ceil32(return_data.size) + ceil32(32 * mem[_5103 + mem[_5103]]) + 1 > test266151307() or ceil32(32 * mem[_5103 + mem[_5103]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5103 + ceil32(return_data.size) + ceil32(32 * mem[_5103 + mem[_5103]]) + 1
                                mem[_5103 + ceil32(return_data.size)] = _5155
                                require return_data.size >= _5129 + (32 * _5155) + 32
                                mem[_5103 + ceil32(return_data.size) + 32 len 32 * _5155] = mem[_5103 + _5129 + 32 len 32 * _5155]
                                if 0 >= _5155:
                                    revert with 0, 50
                                if arg1 and mem[_5103 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5103 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5103 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_5103 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5103 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5103 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5103 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5103 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5103 + ceil32(return_data.size) + 32]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1079 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3673 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3728 = mem[_3673]
                                _3772 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3772]:
                                    revert with 0, 50
                                mem[_3772 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3772 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3772 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3772]:
                                    revert with 0, 50
                                mem[_3772 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3772 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3772 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3772 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3772 + (4 * ceil32(return_data.size)) + 100] = _3728
                                mem[_3772 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3772 + (4 * ceil32(return_data.size)) + 164] = mem[_3772]
                                idx = 0
                                s = _3772 + 32
                                t = _3772 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3772]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3728, 64, mem[_3772 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3772]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3772 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3772 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5128 = mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32
                                require mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 <= test266151307()
                                require _3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 127 < _3772 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5154 = mem[_3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 96]
                                if mem[_3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3772 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3772 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3772 + (4 * ceil32(return_data.size)) + mem[_3772 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3728) >> 32 + 96]) + 97
                                mem[_3772 + (6 * ceil32(return_data.size)) + 96] = _5154
                                require return_data.size >= _5128 + (32 * _5154) + 32
                                mem[_3772 + (6 * ceil32(return_data.size)) + 128 len 32 * _5154] = mem[_3772 + (4 * ceil32(return_data.size)) + _5128 + 128 len 32 * _5154]
                                if 0 >= _5154:
                                    revert with 0, 50
                                if arg1 and mem[_3772 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3176 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3772 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3191 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3205 = mem[_3191]
                        require mem[_3191] <= test266151307()
                        require _3191 + mem[_3191] + 31 < _3191 + return_data.size
                        _3215 = mem[_3191 + mem[_3191]]
                        if mem[_3191 + mem[_3191]] > test266151307():
                            revert with 0, 65
                        if _3191 + ceil32(return_data.size) + ceil32(32 * mem[_3191 + mem[_3191]]) + 1 > test266151307() or ceil32(32 * mem[_3191 + mem[_3191]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3191 + ceil32(return_data.size) + ceil32(32 * mem[_3191 + mem[_3191]]) + 1
                        mem[_3191 + ceil32(return_data.size)] = _3215
                        require return_data.size >= _3205 + (32 * _3215) + 32
                        mem[_3191 + ceil32(return_data.size) + 32 len 32 * _3215] = mem[_3191 + _3205 + 32 len 32 * _3215]
                        if 0 >= _3215:
                            revert with 0, 50
                        _5070 = mem[_3191 + ceil32(return_data.size) + 32]
                        if mem[_3191 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_3191 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5317 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5333 = mem[_5317]
                            _5353 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5353]:
                                revert with 0, 50
                            mem[_5353 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5353 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5353 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5353]:
                                revert with 0, 50
                            mem[_5353 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5353 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5353 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5353 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5353 + (4 * ceil32(return_data.size)) + 100] = _5333
                            mem[_5353 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5353 + (4 * ceil32(return_data.size)) + 164] = mem[_5353]
                            idx = 0
                            s = _5353 + 32
                            t = _5353 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5353]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5333, 64, mem[_5353 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5353]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5353 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5353 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6449 = mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32
                            require mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 <= test266151307()
                            require _5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 127 < _5353 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6473 = mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96]
                            if mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5353 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5353 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96]) + 97
                            mem[_5353 + (6 * ceil32(return_data.size)) + 96] = mem[_5353 + (4 * ceil32(return_data.size)) + mem[_5353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5333) >> 32 + 96]
                            require return_data.size >= _6449 + (32 * _6473) + 32
                            mem[_5353 + (6 * ceil32(return_data.size)) + 128 len 32 * _6473] = mem[_5353 + (4 * ceil32(return_data.size)) + _6449 + 128 len 32 * _6473]
                            if 0 >= _6473:
                                revert with 0, 50
                            if arg1 and mem[_5353 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5353 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5325 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5341 = mem[_5325]
                                _5377 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5377]:
                                    revert with 0, 50
                                mem[_5377 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5377 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5377 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5377]:
                                    revert with 0, 50
                                mem[_5377 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5377 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5377 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5377 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5377 + (4 * ceil32(return_data.size)) + 100] = _5341
                                mem[_5377 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5377 + (4 * ceil32(return_data.size)) + 164] = mem[_5377]
                                idx = 0
                                s = _5377 + 32
                                t = _5377 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5377]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5341, 64, mem[_5377 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5377]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5377 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5377 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6448 = mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32
                                require mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 <= test266151307()
                                require _5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 127 < _5377 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6472 = mem[_5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 96]
                                if mem[_5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5377 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5377 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5377 + (4 * ceil32(return_data.size)) + mem[_5377 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5341) >> 32 + 96]) + 97
                                mem[_5377 + (6 * ceil32(return_data.size)) + 96] = _6472
                                require return_data.size >= _6448 + (32 * _6472) + 32
                                mem[_5377 + (6 * ceil32(return_data.size)) + 128 len 32 * _6472] = mem[_5377 + (4 * ceil32(return_data.size)) + _6448 + 128 len 32 * _6472]
                                if 0 >= _6472:
                                    revert with 0, 50
                                if arg1 and mem[_5377 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5377 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3191 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5622 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5667 = mem[_5622]
                                _5700 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5700]:
                                    revert with 0, 50
                                mem[_5700 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5700 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5700 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5700]:
                                    revert with 0, 50
                                mem[_5700 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5700 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5700 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5700 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5700 + (4 * ceil32(return_data.size)) + 100] = _5667
                                mem[_5700 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5700 + (4 * ceil32(return_data.size)) + 164] = mem[_5700]
                                idx = 0
                                s = _5700 + 32
                                t = _5700 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5700]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5700 + (4 * ceil32(return_data.size)) + (32 * mem[_5700]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6423 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6447 = mem[_6423]
                                require mem[_6423] <= test266151307()
                                require _6423 + mem[_6423] + 31 < _6423 + return_data.size
                                _6471 = mem[_6423 + mem[_6423]]
                                if mem[_6423 + mem[_6423]] > test266151307():
                                    revert with 0, 65
                                if _6423 + ceil32(return_data.size) + ceil32(32 * mem[_6423 + mem[_6423]]) + 1 > test266151307() or ceil32(32 * mem[_6423 + mem[_6423]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6423 + ceil32(return_data.size) + ceil32(32 * mem[_6423 + mem[_6423]]) + 1
                                mem[_6423 + ceil32(return_data.size)] = _6471
                                require return_data.size >= _6447 + (32 * _6471) + 32
                                mem[_6423 + ceil32(return_data.size) + 32 len 32 * _6471] = mem[_6423 + _6447 + 32 len 32 * _6471]
                                if 0 >= _6471:
                                    revert with 0, 50
                                if arg1 and mem[_6423 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6423 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6423 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6423 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6423 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6423 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6423 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5070 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6423 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6423 + ceil32(return_data.size) + 32]) / 10000)
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3190 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3204 = mem[_3190]
                    require mem[_3190] <= test266151307()
                    require _3190 + mem[_3190] + 31 < _3190 + return_data.size
                    _3214 = mem[_3190 + mem[_3190]]
                    if mem[_3190 + mem[_3190]] > test266151307():
                        revert with 0, 65
                    if _3190 + ceil32(return_data.size) + ceil32(32 * mem[_3190 + mem[_3190]]) + 1 > test266151307() or ceil32(32 * mem[_3190 + mem[_3190]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3190 + ceil32(return_data.size) + ceil32(32 * mem[_3190 + mem[_3190]]) + 1
                    mem[_3190 + ceil32(return_data.size)] = _3214
                    require return_data.size >= _3204 + (32 * _3214) + 32
                    mem[_3190 + ceil32(return_data.size) + 32 len 32 * _3214] = mem[_3190 + _3204 + 32 len 32 * _3214]
                    if 0 >= _3214:
                        revert with 0, 50
                    _5069 = mem[_3190 + ceil32(return_data.size) + 32]
                    if mem[_3190 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3190 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5316 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5332 = mem[_5316]
                        _5350 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5350]:
                            revert with 0, 50
                        mem[_5350 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5350 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5350 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5350]:
                            revert with 0, 50
                        mem[_5350 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5350 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5350 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5350 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5350 + (4 * ceil32(return_data.size)) + 100] = _5332
                        mem[_5350 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5350 + (4 * ceil32(return_data.size)) + 164] = mem[_5350]
                        idx = 0
                        s = _5350 + 32
                        t = _5350 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5350]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _5332, 64, mem[_5350 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5350]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5350 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5350 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6446 = mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32
                        require mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 <= test266151307()
                        require _5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 127 < _5350 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _6470 = mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96]
                        if mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _5350 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5350 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96]) + 97
                        mem[_5350 + (6 * ceil32(return_data.size)) + 96] = mem[_5350 + (4 * ceil32(return_data.size)) + mem[_5350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5332) >> 32 + 96]
                        require return_data.size >= _6446 + (32 * _6470) + 32
                        mem[_5350 + (6 * ceil32(return_data.size)) + 128 len 32 * _6470] = mem[_5350 + (4 * ceil32(return_data.size)) + _6446 + 128 len 32 * _6470]
                        if 0 >= _6470:
                            revert with 0, 50
                        if arg1 and mem[_5350 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5350 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5324 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5340 = mem[_5324]
                            _5374 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5374]:
                                revert with 0, 50
                            mem[_5374 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5374 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5374 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5374]:
                                revert with 0, 50
                            mem[_5374 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5374 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5374 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5374 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5374 + (4 * ceil32(return_data.size)) + 100] = _5340
                            mem[_5374 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5374 + (4 * ceil32(return_data.size)) + 164] = mem[_5374]
                            idx = 0
                            s = _5374 + 32
                            t = _5374 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5374]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5340, 64, mem[_5374 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5374]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5374 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5374 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6445 = mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32
                            require mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 <= test266151307()
                            require _5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 127 < _5374 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6469 = mem[_5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 96]
                            if mem[_5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5374 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5374 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5374 + (4 * ceil32(return_data.size)) + mem[_5374 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5340) >> 32 + 96]) + 97
                            mem[_5374 + (6 * ceil32(return_data.size)) + 96] = _6469
                            require return_data.size >= _6445 + (32 * _6469) + 32
                            mem[_5374 + (6 * ceil32(return_data.size)) + 128 len 32 * _6469] = mem[_5374 + (4 * ceil32(return_data.size)) + _6445 + 128 len 32 * _6469]
                            if 0 >= _6469:
                                revert with 0, 50
                            if arg1 and mem[_5374 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5374 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3190 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5618 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5665 = mem[_5618]
                            _5696 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5696]:
                                revert with 0, 50
                            mem[_5696 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5696 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5696 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5696]:
                                revert with 0, 50
                            mem[_5696 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5696 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5696 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5696 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5696 + (4 * ceil32(return_data.size)) + 100] = _5665
                            mem[_5696 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5696 + (4 * ceil32(return_data.size)) + 164] = mem[_5696]
                            idx = 0
                            u = _5696 + 32
                            v = _5696 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5696]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5665, 64, mem[_5696 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5696]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5696 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5696 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6444 = mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32
                            require mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 <= test266151307()
                            require _5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 127 < _5696 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6468 = mem[_5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 96]
                            if mem[_5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5696 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5696 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5696 + (4 * ceil32(return_data.size)) + mem[_5696 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5665) >> 32 + 96]) + 97
                            mem[_5696 + (6 * ceil32(return_data.size)) + 96] = _6468
                            require return_data.size >= _6444 + (32 * _6468) + 32
                            mem[_5696 + (6 * ceil32(return_data.size)) + 128 len 32 * _6468] = mem[_5696 + (4 * ceil32(return_data.size)) + _6444 + 128 len 32 * _6468]
                            if 0 >= _6468:
                                revert with 0, 50
                            if arg1 and mem[_5696 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5069 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5696 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3189 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3203 = mem[_3189]
                        require mem[_3189] <= test266151307()
                        require _3189 + mem[_3189] + 31 < _3189 + return_data.size
                        _3213 = mem[_3189 + mem[_3189]]
                        if mem[_3189 + mem[_3189]] > test266151307():
                            revert with 0, 65
                        if _3189 + ceil32(return_data.size) + ceil32(32 * mem[_3189 + mem[_3189]]) + 1 > test266151307() or ceil32(32 * mem[_3189 + mem[_3189]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3189 + ceil32(return_data.size) + ceil32(32 * mem[_3189 + mem[_3189]]) + 1
                        mem[_3189 + ceil32(return_data.size)] = _3213
                        require return_data.size >= _3203 + (32 * _3213) + 32
                        mem[_3189 + ceil32(return_data.size) + 32 len 32 * _3213] = mem[_3189 + _3203 + 32 len 32 * _3213]
                        if 0 >= _3213:
                            revert with 0, 50
                        _5068 = mem[_3189 + ceil32(return_data.size) + 32]
                        if mem[_3189 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3189 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5315 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5331 = mem[_5315]
                            _5347 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5347]:
                                revert with 0, 50
                            mem[_5347 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5347 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5347 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5347]:
                                revert with 0, 50
                            mem[_5347 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5347 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5347 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5347 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5347 + (4 * ceil32(return_data.size)) + 100] = _5331
                            mem[_5347 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5347 + (4 * ceil32(return_data.size)) + 164] = mem[_5347]
                            idx = 0
                            s = _5347 + 32
                            t = _5347 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5347]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5331, 64, mem[_5347 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5347]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5347 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5347 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6443 = mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32
                            require mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 <= test266151307()
                            require _5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 127 < _5347 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6467 = mem[_5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 96]
                            if mem[_5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5347 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5347 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5347 + (4 * ceil32(return_data.size)) + mem[_5347 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5331) >> 32 + 96]) + 97
                            mem[_5347 + (6 * ceil32(return_data.size)) + 96] = _6467
                            require return_data.size >= _6443 + (32 * _6467) + 32
                            mem[_5347 + (6 * ceil32(return_data.size)) + 128 len 32 * _6467] = mem[_5347 + (4 * ceil32(return_data.size)) + _6443 + 128 len 32 * _6467]
                            if 0 >= _6467:
                                revert with 0, 50
                            if arg1 and mem[_5347 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5347 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5323 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5339 = mem[_5323]
                                _5371 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5371]:
                                    revert with 0, 50
                                mem[_5371 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5371 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5371 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5371]:
                                    revert with 0, 50
                                mem[_5371 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5371 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5371 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5371 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5371 + (4 * ceil32(return_data.size)) + 100] = _5339
                                mem[_5371 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5371 + (4 * ceil32(return_data.size)) + 164] = mem[_5371]
                                idx = 0
                                s = _5371 + 32
                                t = _5371 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5371]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5371 + (4 * ceil32(return_data.size)) + (32 * mem[_5371]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6418 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6442 = mem[_6418]
                                require mem[_6418] <= test266151307()
                                require _6418 + mem[_6418] + 31 < _6418 + return_data.size
                                _6466 = mem[_6418 + mem[_6418]]
                                if mem[_6418 + mem[_6418]] > test266151307():
                                    revert with 0, 65
                                if _6418 + ceil32(return_data.size) + ceil32(32 * mem[_6418 + mem[_6418]]) + 1 > test266151307() or ceil32(32 * mem[_6418 + mem[_6418]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6418 + ceil32(return_data.size) + ceil32(32 * mem[_6418 + mem[_6418]]) + 1
                                mem[_6418 + ceil32(return_data.size)] = _6466
                                require return_data.size >= _6442 + (32 * _6466) + 32
                                mem[_6418 + ceil32(return_data.size) + 32 len 32 * _6466] = mem[_6418 + _6442 + 32 len 32 * _6466]
                                if 0 >= _6466:
                                    revert with 0, 50
                                if arg1 and mem[_6418 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6418 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6418 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6418 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6418 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6418 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6418 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6418 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6418 + ceil32(return_data.size) + 32]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3189 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5614 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5663 = mem[_5614]
                                _5692 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5692]:
                                    revert with 0, 50
                                mem[_5692 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5692 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5692 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5692]:
                                    revert with 0, 50
                                mem[_5692 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5692 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5692 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5692 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5692 + (4 * ceil32(return_data.size)) + 100] = _5663
                                mem[_5692 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5692 + (4 * ceil32(return_data.size)) + 164] = mem[_5692]
                                idx = 0
                                u = _5692 + 32
                                v = _5692 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5692]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5663, 64, mem[_5692 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5692]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5692 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5692 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6441 = mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32
                                require mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 <= test266151307()
                                require _5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 127 < _5692 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6465 = mem[_5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 96]
                                if mem[_5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5692 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5692 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5692 + (4 * ceil32(return_data.size)) + mem[_5692 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5663) >> 32 + 96]) + 97
                                mem[_5692 + (6 * ceil32(return_data.size)) + 96] = _6465
                                require return_data.size >= _6441 + (32 * _6465) + 32
                                mem[_5692 + (6 * ceil32(return_data.size)) + 128 len 32 * _6465] = mem[_5692 + (4 * ceil32(return_data.size)) + _6441 + 128 len 32 * _6465]
                                if 0 >= _6465:
                                    revert with 0, 50
                                if arg1 and mem[_5692 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5068 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5692 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5101 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5127 = mem[_5101]
                        require mem[_5101] <= test266151307()
                        require _5101 + mem[_5101] + 31 < _5101 + return_data.size
                        _5153 = mem[_5101 + mem[_5101]]
                        if mem[_5101 + mem[_5101]] > test266151307():
                            revert with 0, 65
                        if _5101 + ceil32(return_data.size) + ceil32(32 * mem[_5101 + mem[_5101]]) + 1 > test266151307() or ceil32(32 * mem[_5101 + mem[_5101]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5101 + ceil32(return_data.size) + ceil32(32 * mem[_5101 + mem[_5101]]) + 1
                        mem[_5101 + ceil32(return_data.size)] = _5153
                        require return_data.size >= _5127 + (32 * _5153) + 32
                        mem[_5101 + ceil32(return_data.size) + 32 len 32 * _5153] = mem[_5101 + _5127 + 32 len 32 * _5153]
                        if 0 >= _5153:
                            revert with 0, 50
                        _6367 = mem[_5101 + ceil32(return_data.size) + 32]
                        if mem[_5101 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_5101 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6593 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6645 = mem[_6593]
                            _6649 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_6649]:
                                revert with 0, 50
                            mem[_6649 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_6649 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6649 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_6649]:
                                revert with 0, 50
                            mem[_6649 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_6649 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6649 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_6649 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_6649 + (4 * ceil32(return_data.size)) + 100] = _6645
                            mem[_6649 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_6649 + (4 * ceil32(return_data.size)) + 164] = mem[_6649]
                            idx = 0
                            s = _6649 + 32
                            t = _6649 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_6649]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _6649 + (4 * ceil32(return_data.size)) + (32 * mem[_6649]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6959 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6965 = mem[_6959]
                            require mem[_6959] <= test266151307()
                            require _6959 + mem[_6959] + 31 < _6959 + return_data.size
                            _6971 = mem[_6959 + mem[_6959]]
                            if mem[_6959 + mem[_6959]] > test266151307():
                                revert with 0, 65
                            if _6959 + ceil32(return_data.size) + ceil32(32 * mem[_6959 + mem[_6959]]) + 1 > test266151307() or ceil32(32 * mem[_6959 + mem[_6959]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6959 + ceil32(return_data.size) + ceil32(32 * mem[_6959 + mem[_6959]]) + 1
                            mem[_6959 + ceil32(return_data.size)] = _6971
                            require return_data.size >= _6965 + (32 * _6971) + 32
                            mem[_6959 + ceil32(return_data.size) + 32 len 32 * _6971] = mem[_6959 + _6965 + 32 len 32 * _6971]
                            if 0 >= _6971:
                                revert with 0, 50
                            if arg1 and mem[_6959 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6959 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6959 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6959 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6959 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6959 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6959 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6959 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6959 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6619 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6647 = mem[_6619]
                                _6655 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6655]:
                                    revert with 0, 50
                                mem[_6655 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6655 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6655 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6655]:
                                    revert with 0, 50
                                mem[_6655 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6655 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6655 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6655 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6655 + (4 * ceil32(return_data.size)) + 100] = _6647
                                mem[_6655 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6655 + (4 * ceil32(return_data.size)) + 164] = mem[_6655]
                                idx = 0
                                s = _6655 + 32
                                t = _6655 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6655]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _6655 + (4 * ceil32(return_data.size)) + (32 * mem[_6655]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6958 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6964 = mem[_6958]
                                require mem[_6958] <= test266151307()
                                require _6958 + mem[_6958] + 31 < _6958 + return_data.size
                                _6970 = mem[_6958 + mem[_6958]]
                                if mem[_6958 + mem[_6958]] > test266151307():
                                    revert with 0, 65
                                if _6958 + ceil32(return_data.size) + ceil32(32 * mem[_6958 + mem[_6958]]) + 1 > test266151307() or ceil32(32 * mem[_6958 + mem[_6958]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6958 + ceil32(return_data.size) + ceil32(32 * mem[_6958 + mem[_6958]]) + 1
                                mem[_6958 + ceil32(return_data.size)] = _6970
                                require return_data.size >= _6964 + (32 * _6970) + 32
                                mem[_6958 + ceil32(return_data.size) + 32 len 32 * _6970] = mem[_6958 + _6964 + 32 len 32 * _6970]
                                if 0 >= _6970:
                                    revert with 0, 50
                                if arg1 and mem[_6958 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6958 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6958 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6958 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6958 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6958 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6958 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6958 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6958 + ceil32(return_data.size) + 32]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5101 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6743 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6755 = mem[_6743]
                                _6761 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6761]:
                                    revert with 0, 50
                                mem[_6761 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6761 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6761 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6761]:
                                    revert with 0, 50
                                mem[_6761 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6761 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6761 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6761 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6761 + (4 * ceil32(return_data.size)) + 100] = _6755
                                mem[_6761 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6761 + (4 * ceil32(return_data.size)) + 164] = mem[_6761]
                                idx = 0
                                u = _6761 + 32
                                v = _6761 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6761]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _6755, 64, mem[_6761 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6761]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_6761 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _6761 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6963 = mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32
                                require mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 <= test266151307()
                                require _6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 127 < _6761 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6969 = mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96]
                                if mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _6761 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6761 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96]) + 97
                                mem[_6761 + (6 * ceil32(return_data.size)) + 96] = mem[_6761 + (4 * ceil32(return_data.size)) + mem[_6761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6755) >> 32 + 96]
                                require return_data.size >= _6963 + (32 * _6969) + 32
                                mem[_6761 + (6 * ceil32(return_data.size)) + 128 len 32 * _6969] = mem[_6761 + (4 * ceil32(return_data.size)) + _6963 + 128 len 32 * _6969]
                                if 0 >= _6969:
                                    revert with 0, 50
                                if arg1 and mem[_6761 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6367 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6761 + (6 * ceil32(return_data.size)) + 128]) / 10000)
    else:
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1088 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1110 = mem[_1088]
                require mem[_1088] <= test266151307()
                require _1088 + mem[_1088] + 31 < _1088 + return_data.size
                _1124 = mem[_1088 + mem[_1088]]
                if mem[_1088 + mem[_1088]] > test266151307():
                    revert with 0, 65
                if _1088 + ceil32(return_data.size) + ceil32(32 * mem[_1088 + mem[_1088]]) + 1 > test266151307() or ceil32(32 * mem[_1088 + mem[_1088]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _1088 + ceil32(return_data.size) + ceil32(32 * mem[_1088 + mem[_1088]]) + 1
                mem[_1088 + ceil32(return_data.size)] = _1124
                require return_data.size >= _1110 + (32 * _1124) + 32
                mem[_1088 + ceil32(return_data.size) + 32 len 32 * _1124] = mem[_1088 + _1110 + 32 len 32 * _1124]
                if 0 >= _1124:
                    revert with 0, 50
                _3188 = mem[_1088 + ceil32(return_data.size) + 32]
                if mem[_1088 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1088 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xcfe19c66 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3304 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3320 = mem[_3304]
                    _3356 = mem[64]
                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[mem[64] + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 0 >= mem[_3356]:
                        revert with 0, 50
                    mem[_3356 + 32] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[_3356 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3356 + (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 1 >= mem[_3356]:
                        revert with 0, 50
                    mem[_3356 + 64] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                    mem[_3356 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3356 + (4 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[_3356 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[_3356 + (4 * ceil32(return_data.size)) + 100] = _3320
                    mem[_3356 + (4 * ceil32(return_data.size)) + 132] = 64
                    mem[_3356 + (4 * ceil32(return_data.size)) + 164] = mem[_3356]
                    idx = 0
                    s = _3356 + 32
                    t = _3356 + (4 * ceil32(return_data.size)) + 196
                    while idx < mem[_3356]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _3356 + (4 * ceil32(return_data.size)) + (32 * mem[_3356]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5126 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5152 = mem[_5126]
                    require mem[_5126] <= test266151307()
                    require _5126 + mem[_5126] + 31 < _5126 + return_data.size
                    _5178 = mem[_5126 + mem[_5126]]
                    if mem[_5126 + mem[_5126]] > test266151307():
                        revert with 0, 65
                    if _5126 + ceil32(return_data.size) + ceil32(32 * mem[_5126 + mem[_5126]]) + 1 > test266151307() or ceil32(32 * mem[_5126 + mem[_5126]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _5126 + ceil32(return_data.size) + ceil32(32 * mem[_5126 + mem[_5126]]) + 1
                    mem[_5126 + ceil32(return_data.size)] = _5178
                    require return_data.size >= _5152 + (32 * _5178) + 32
                    mem[_5126 + ceil32(return_data.size) + 32 len 32 * _5178] = mem[_5126 + _5152 + 32 len 32 * _5178]
                    if 0 >= _5178:
                        revert with 0, 50
                    if arg1 and mem[_5126 + ceil32(return_data.size) + 32] > -1 / arg1:
                        revert with 0, 17
                    if sub_535aa3bb < sub_bf0673d2:
                        revert with 0, 17
                    if arg1 * mem[_5126 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5126 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if arg1 * mem[_5126 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5126 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5126 + ceil32(return_data.size) + 32]) / 10000:
                        revert with 0, 17
                    mem[mem[64]] = (arg1 * mem[_5126 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5126 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5126 + ceil32(return_data.size) + 32]) / 10000)
                else:
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3312 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3330 = mem[_3312]
                        _3380 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3380]:
                            revert with 0, 50
                        mem[_3380 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3380 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3380 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3380]:
                            revert with 0, 50
                        mem[_3380 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3380 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3380 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3380 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3380 + (4 * ceil32(return_data.size)) + 100] = _3330
                        mem[_3380 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3380 + (4 * ceil32(return_data.size)) + 164] = mem[_3380]
                        idx = 0
                        s = _3380 + 32
                        t = _3380 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3380]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3380 + (4 * ceil32(return_data.size)) + (32 * mem[_3380]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5125 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5151 = mem[_5125]
                        require mem[_5125] <= test266151307()
                        require _5125 + mem[_5125] + 31 < _5125 + return_data.size
                        _5177 = mem[_5125 + mem[_5125]]
                        if mem[_5125 + mem[_5125]] > test266151307():
                            revert with 0, 65
                        if _5125 + ceil32(return_data.size) + ceil32(32 * mem[_5125 + mem[_5125]]) + 1 > test266151307() or ceil32(32 * mem[_5125 + mem[_5125]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5125 + ceil32(return_data.size) + ceil32(32 * mem[_5125 + mem[_5125]]) + 1
                        mem[_5125 + ceil32(return_data.size)] = _5177
                        require return_data.size >= _5151 + (32 * _5177) + 32
                        mem[_5125 + ceil32(return_data.size) + 32 len 32 * _5177] = mem[_5125 + _5151 + 32 len 32 * _5177]
                        if 0 >= _5177:
                            revert with 0, 50
                        if arg1 and mem[_5125 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_ac55eac2 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5125 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5125 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5125 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5125 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5125 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5125 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5125 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5125 + ceil32(return_data.size) + 32]) / 10000)
                    else:
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3707 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3743 = mem[_3707]
                        _3815 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3815]:
                            revert with 0, 50
                        mem[_3815 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3815 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3815 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3815]:
                            revert with 0, 50
                        mem[_3815 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3815 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3815 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3815 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3815 + (4 * ceil32(return_data.size)) + 100] = _3743
                        mem[_3815 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3815 + (4 * ceil32(return_data.size)) + 164] = mem[_3815]
                        idx = 0
                        s = _3815 + 32
                        t = _3815 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3815]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3815 + (4 * ceil32(return_data.size)) + (32 * mem[_3815]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5124 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5150 = mem[_5124]
                        require mem[_5124] <= test266151307()
                        require _5124 + mem[_5124] + 31 < _5124 + return_data.size
                        _5176 = mem[_5124 + mem[_5124]]
                        if mem[_5124 + mem[_5124]] > test266151307():
                            revert with 0, 65
                        if _5124 + ceil32(return_data.size) + ceil32(32 * mem[_5124 + mem[_5124]]) + 1 > test266151307() or ceil32(32 * mem[_5124 + mem[_5124]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5124 + ceil32(return_data.size) + ceil32(32 * mem[_5124 + mem[_5124]]) + 1
                        mem[_5124 + ceil32(return_data.size)] = _5176
                        require return_data.size >= _5150 + (32 * _5176) + 32
                        mem[_5124 + ceil32(return_data.size) + 32 len 32 * _5176] = mem[_5124 + _5150 + 32 len 32 * _5176]
                        if 0 >= _5176:
                            revert with 0, 50
                        if arg1 and mem[_5124 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5124 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5124 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5124 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5124 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5124 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5124 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3188 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5124 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5124 + ceil32(return_data.size) + 32]) / 10000)
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1087 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1109 = mem[_1087]
                    require mem[_1087] <= test266151307()
                    require _1087 + mem[_1087] + 31 < _1087 + return_data.size
                    _1123 = mem[_1087 + mem[_1087]]
                    if mem[_1087 + mem[_1087]] > test266151307():
                        revert with 0, 65
                    if _1087 + ceil32(return_data.size) + ceil32(32 * mem[_1087 + mem[_1087]]) + 1 > test266151307() or ceil32(32 * mem[_1087 + mem[_1087]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1087 + ceil32(return_data.size) + ceil32(32 * mem[_1087 + mem[_1087]]) + 1
                    mem[_1087 + ceil32(return_data.size)] = _1123
                    require return_data.size >= _1109 + (32 * _1123) + 32
                    mem[_1087 + ceil32(return_data.size) + 32 len 32 * _1123] = mem[_1087 + _1109 + 32 len 32 * _1123]
                    if 0 >= _1123:
                        revert with 0, 50
                    _3187 = mem[_1087 + ceil32(return_data.size) + 32]
                    if mem[_1087 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1087 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3303 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3319 = mem[_3303]
                        _3353 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3353]:
                            revert with 0, 50
                        mem[_3353 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3353 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3353 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3353]:
                            revert with 0, 50
                        mem[_3353 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3353 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3353 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3353 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3353 + (4 * ceil32(return_data.size)) + 100] = _3319
                        mem[_3353 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3353 + (4 * ceil32(return_data.size)) + 164] = mem[_3353]
                        idx = 0
                        s = _3353 + 32
                        t = _3353 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3353]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3319, 64, mem[_3353 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3353]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3353 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3353 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5149 = mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32
                        require mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 <= test266151307()
                        require _3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 127 < _3353 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5175 = mem[_3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 96]
                        if mem[_3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3353 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3353 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3353 + (4 * ceil32(return_data.size)) + mem[_3353 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3319) >> 32 + 96]) + 97
                        mem[_3353 + (6 * ceil32(return_data.size)) + 96] = _5175
                        require return_data.size >= _5149 + (32 * _5175) + 32
                        mem[_3353 + (6 * ceil32(return_data.size)) + 128 len 32 * _5175] = mem[_3353 + (4 * ceil32(return_data.size)) + _5149 + 128 len 32 * _5175]
                        if 0 >= _5175:
                            revert with 0, 50
                        if arg1 and mem[_3353 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3353 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3311 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3329 = mem[_3311]
                            _3377 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3377]:
                                revert with 0, 50
                            mem[_3377 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3377 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3377 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3377]:
                                revert with 0, 50
                            mem[_3377 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3377 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3377 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3377 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3377 + (4 * ceil32(return_data.size)) + 100] = _3329
                            mem[_3377 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3377 + (4 * ceil32(return_data.size)) + 164] = mem[_3377]
                            idx = 0
                            s = _3377 + 32
                            t = _3377 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3377]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3377 + (4 * ceil32(return_data.size)) + (32 * mem[_3377]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5122 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5148 = mem[_5122]
                            require mem[_5122] <= test266151307()
                            require _5122 + mem[_5122] + 31 < _5122 + return_data.size
                            _5174 = mem[_5122 + mem[_5122]]
                            if mem[_5122 + mem[_5122]] > test266151307():
                                revert with 0, 65
                            if _5122 + ceil32(return_data.size) + ceil32(32 * mem[_5122 + mem[_5122]]) + 1 > test266151307() or ceil32(32 * mem[_5122 + mem[_5122]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5122 + ceil32(return_data.size) + ceil32(32 * mem[_5122 + mem[_5122]]) + 1
                            mem[_5122 + ceil32(return_data.size)] = _5174
                            require return_data.size >= _5148 + (32 * _5174) + 32
                            mem[_5122 + ceil32(return_data.size) + 32 len 32 * _5174] = mem[_5122 + _5148 + 32 len 32 * _5174]
                            if 0 >= _5174:
                                revert with 0, 50
                            if arg1 and mem[_5122 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5122 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5122 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5122 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5122 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5122 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5122 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5122 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5122 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1087 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3703 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3741 = mem[_3703]
                            _3811 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3811]:
                                revert with 0, 50
                            mem[_3811 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3811 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3811 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3811]:
                                revert with 0, 50
                            mem[_3811 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3811 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3811 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3811 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3811 + (4 * ceil32(return_data.size)) + 100] = _3741
                            mem[_3811 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3811 + (4 * ceil32(return_data.size)) + 164] = mem[_3811]
                            idx = 0
                            s = _3811 + 32
                            t = _3811 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3811]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3811 + (4 * ceil32(return_data.size)) + (32 * mem[_3811]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5121 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5147 = mem[_5121]
                            require mem[_5121] <= test266151307()
                            require _5121 + mem[_5121] + 31 < _5121 + return_data.size
                            _5173 = mem[_5121 + mem[_5121]]
                            if mem[_5121 + mem[_5121]] > test266151307():
                                revert with 0, 65
                            if _5121 + ceil32(return_data.size) + ceil32(32 * mem[_5121 + mem[_5121]]) + 1 > test266151307() or ceil32(32 * mem[_5121 + mem[_5121]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5121 + ceil32(return_data.size) + ceil32(32 * mem[_5121 + mem[_5121]]) + 1
                            mem[_5121 + ceil32(return_data.size)] = _5173
                            require return_data.size >= _5147 + (32 * _5173) + 32
                            mem[_5121 + ceil32(return_data.size) + 32 len 32 * _5173] = mem[_5121 + _5147 + 32 len 32 * _5173]
                            if 0 >= _5173:
                                revert with 0, 50
                            if arg1 and mem[_5121 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5121 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5121 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5121 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5121 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5121 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5121 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3187 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5121 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5121 + ceil32(return_data.size) + 32]) / 10000)
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3196 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3210 = mem[_3196]
                    require mem[_3196] <= test266151307()
                    require _3196 + mem[_3196] + 31 < _3196 + return_data.size
                    _3220 = mem[_3196 + mem[_3196]]
                    if mem[_3196 + mem[_3196]] > test266151307():
                        revert with 0, 65
                    if _3196 + ceil32(return_data.size) + ceil32(32 * mem[_3196 + mem[_3196]]) + 1 > test266151307() or ceil32(32 * mem[_3196 + mem[_3196]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3196 + ceil32(return_data.size) + ceil32(32 * mem[_3196 + mem[_3196]]) + 1
                    mem[_3196 + ceil32(return_data.size)] = _3220
                    require return_data.size >= _3210 + (32 * _3220) + 32
                    mem[_3196 + ceil32(return_data.size) + 32 len 32 * _3220] = mem[_3196 + _3210 + 32 len 32 * _3220]
                    if 0 >= _3220:
                        revert with 0, 50
                    _5094 = mem[_3196 + ceil32(return_data.size) + 32]
                    if mem[_3196 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_3196 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5322 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5338 = mem[_5322]
                        _5368 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5368]:
                            revert with 0, 50
                        mem[_5368 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5368 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5368 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5368]:
                            revert with 0, 50
                        mem[_5368 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5368 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5368 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5368 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5368 + (4 * ceil32(return_data.size)) + 100] = _5338
                        mem[_5368 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5368 + (4 * ceil32(return_data.size)) + 164] = mem[_5368]
                        idx = 0
                        s = _5368 + 32
                        t = _5368 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5368]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _5338, 64, mem[_5368 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5368]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5368 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5368 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6464 = mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32
                        require mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 <= test266151307()
                        require _5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 127 < _5368 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _6488 = mem[_5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 96]
                        if mem[_5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _5368 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5368 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5368 + (4 * ceil32(return_data.size)) + mem[_5368 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5338) >> 32 + 96]) + 97
                        mem[_5368 + (6 * ceil32(return_data.size)) + 96] = _6488
                        require return_data.size >= _6464 + (32 * _6488) + 32
                        mem[_5368 + (6 * ceil32(return_data.size)) + 128 len 32 * _6488] = mem[_5368 + (4 * ceil32(return_data.size)) + _6464 + 128 len 32 * _6488]
                        if 0 >= _6488:
                            revert with 0, 50
                        if arg1 and mem[_5368 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5368 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5330 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5346 = mem[_5330]
                            _5392 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5392]:
                                revert with 0, 50
                            mem[_5392 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5392 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5392 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5392]:
                                revert with 0, 50
                            mem[_5392 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5392 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5392 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5392 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5392 + (4 * ceil32(return_data.size)) + 100] = _5346
                            mem[_5392 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5392 + (4 * ceil32(return_data.size)) + 164] = mem[_5392]
                            idx = 0
                            s = _5392 + 32
                            t = _5392 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5392]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5392 + (4 * ceil32(return_data.size)) + (32 * mem[_5392]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6439 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6463 = mem[_6439]
                            require mem[_6439] <= test266151307()
                            require _6439 + mem[_6439] + 31 < _6439 + return_data.size
                            _6487 = mem[_6439 + mem[_6439]]
                            if mem[_6439 + mem[_6439]] > test266151307():
                                revert with 0, 65
                            if _6439 + ceil32(return_data.size) + ceil32(32 * mem[_6439 + mem[_6439]]) + 1 > test266151307() or ceil32(32 * mem[_6439 + mem[_6439]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6439 + ceil32(return_data.size) + ceil32(32 * mem[_6439 + mem[_6439]]) + 1
                            mem[_6439 + ceil32(return_data.size)] = _6487
                            require return_data.size >= _6463 + (32 * _6487) + 32
                            mem[_6439 + ceil32(return_data.size) + 32 len 32 * _6487] = mem[_6439 + _6463 + 32 len 32 * _6487]
                            if 0 >= _6487:
                                revert with 0, 50
                            if arg1 and mem[_6439 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6439 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6439 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6439 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6439 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6439 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6439 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6439 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6439 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3196 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5643 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5677 = mem[_5643]
                            _5723 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5723]:
                                revert with 0, 50
                            mem[_5723 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5723 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5723 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5723]:
                                revert with 0, 50
                            mem[_5723 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5723 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5723 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5723 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5723 + (4 * ceil32(return_data.size)) + 100] = _5677
                            mem[_5723 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5723 + (4 * ceil32(return_data.size)) + 164] = mem[_5723]
                            idx = 0
                            s = _5723 + 32
                            t = _5723 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5723]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5723 + (4 * ceil32(return_data.size)) + (32 * mem[_5723]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6438 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6462 = mem[_6438]
                            require mem[_6438] <= test266151307()
                            require _6438 + mem[_6438] + 31 < _6438 + return_data.size
                            _6486 = mem[_6438 + mem[_6438]]
                            if mem[_6438 + mem[_6438]] > test266151307():
                                revert with 0, 65
                            if _6438 + ceil32(return_data.size) + ceil32(32 * mem[_6438 + mem[_6438]]) + 1 > test266151307() or ceil32(32 * mem[_6438 + mem[_6438]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6438 + ceil32(return_data.size) + ceil32(32 * mem[_6438 + mem[_6438]]) + 1
                            mem[_6438 + ceil32(return_data.size)] = _6486
                            require return_data.size >= _6462 + (32 * _6486) + 32
                            mem[_6438 + ceil32(return_data.size) + 32 len 32 * _6486] = mem[_6438 + _6462 + 32 len 32 * _6486]
                            if 0 >= _6486:
                                revert with 0, 50
                            if arg1 and mem[_6438 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6438 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6438 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6438 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6438 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6438 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6438 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5094 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6438 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6438 + ceil32(return_data.size) + 32]) / 10000)
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1086 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1108 = mem[_1086]
                    require mem[_1086] <= test266151307()
                    require _1086 + mem[_1086] + 31 < _1086 + return_data.size
                    _1122 = mem[_1086 + mem[_1086]]
                    if mem[_1086 + mem[_1086]] > test266151307():
                        revert with 0, 65
                    if _1086 + ceil32(return_data.size) + ceil32(32 * mem[_1086 + mem[_1086]]) + 1 > test266151307() or ceil32(32 * mem[_1086 + mem[_1086]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1086 + ceil32(return_data.size) + ceil32(32 * mem[_1086 + mem[_1086]]) + 1
                    mem[_1086 + ceil32(return_data.size)] = _1122
                    require return_data.size >= _1108 + (32 * _1122) + 32
                    mem[_1086 + ceil32(return_data.size) + 32 len 32 * _1122] = mem[_1086 + _1108 + 32 len 32 * _1122]
                    if 0 >= _1122:
                        revert with 0, 50
                    _3185 = mem[_1086 + ceil32(return_data.size) + 32]
                    if mem[_1086 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1086 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3302 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3318 = mem[_3302]
                        _3350 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3350]:
                            revert with 0, 50
                        mem[_3350 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3350 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3350 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3350]:
                            revert with 0, 50
                        mem[_3350 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3350 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3350 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3350 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3350 + (4 * ceil32(return_data.size)) + 100] = _3318
                        mem[_3350 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3350 + (4 * ceil32(return_data.size)) + 164] = mem[_3350]
                        idx = 0
                        s = _3350 + 32
                        t = _3350 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3350]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3318, 64, mem[_3350 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3350]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3350 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3350 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5146 = mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32
                        require mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 <= test266151307()
                        require _3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 127 < _3350 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5172 = mem[_3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 96]
                        if mem[_3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3350 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3350 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3350 + (4 * ceil32(return_data.size)) + mem[_3350 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3318) >> 32 + 96]) + 97
                        mem[_3350 + (6 * ceil32(return_data.size)) + 96] = _5172
                        require return_data.size >= _5146 + (32 * _5172) + 32
                        mem[_3350 + (6 * ceil32(return_data.size)) + 128 len 32 * _5172] = mem[_3350 + (4 * ceil32(return_data.size)) + _5146 + 128 len 32 * _5172]
                        if 0 >= _5172:
                            revert with 0, 50
                        if arg1 and mem[_3350 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3350 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3310 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3328 = mem[_3310]
                            _3374 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3374]:
                                revert with 0, 50
                            mem[_3374 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3374 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3374 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3374]:
                                revert with 0, 50
                            mem[_3374 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3374 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3374 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3374 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3374 + (4 * ceil32(return_data.size)) + 100] = _3328
                            mem[_3374 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3374 + (4 * ceil32(return_data.size)) + 164] = mem[_3374]
                            idx = 0
                            s = _3374 + 32
                            t = _3374 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3374]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3374 + (4 * ceil32(return_data.size)) + (32 * mem[_3374]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5119 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5145 = mem[_5119]
                            require mem[_5119] <= test266151307()
                            require _5119 + mem[_5119] + 31 < _5119 + return_data.size
                            _5171 = mem[_5119 + mem[_5119]]
                            if mem[_5119 + mem[_5119]] > test266151307():
                                revert with 0, 65
                            if _5119 + ceil32(return_data.size) + ceil32(32 * mem[_5119 + mem[_5119]]) + 1 > test266151307() or ceil32(32 * mem[_5119 + mem[_5119]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5119 + ceil32(return_data.size) + ceil32(32 * mem[_5119 + mem[_5119]]) + 1
                            mem[_5119 + ceil32(return_data.size)] = _5171
                            require return_data.size >= _5145 + (32 * _5171) + 32
                            mem[_5119 + ceil32(return_data.size) + 32 len 32 * _5171] = mem[_5119 + _5145 + 32 len 32 * _5171]
                            if 0 >= _5171:
                                revert with 0, 50
                            if arg1 and mem[_5119 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5119 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5119 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5119 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5119 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5119 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5119 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5119 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5119 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1086 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3698 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3739 = mem[_3698]
                            _3804 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3804]:
                                revert with 0, 50
                            mem[_3804 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3804 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3804 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3804]:
                                revert with 0, 50
                            mem[_3804 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3804 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3804 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3804 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3804 + (4 * ceil32(return_data.size)) + 100] = _3739
                            mem[_3804 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3804 + (4 * ceil32(return_data.size)) + 164] = mem[_3804]
                            idx = 0
                            s = _3804 + 32
                            t = _3804 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3804]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3804 + (4 * ceil32(return_data.size)) + (32 * mem[_3804]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5118 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5144 = mem[_5118]
                            require mem[_5118] <= test266151307()
                            require _5118 + mem[_5118] + 31 < _5118 + return_data.size
                            _5170 = mem[_5118 + mem[_5118]]
                            if mem[_5118 + mem[_5118]] > test266151307():
                                revert with 0, 65
                            if _5118 + ceil32(return_data.size) + ceil32(32 * mem[_5118 + mem[_5118]]) + 1 > test266151307() or ceil32(32 * mem[_5118 + mem[_5118]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5118 + ceil32(return_data.size) + ceil32(32 * mem[_5118 + mem[_5118]]) + 1
                            mem[_5118 + ceil32(return_data.size)] = _5170
                            require return_data.size >= _5144 + (32 * _5170) + 32
                            mem[_5118 + ceil32(return_data.size) + 32 len 32 * _5170] = mem[_5118 + _5144 + 32 len 32 * _5170]
                            if 0 >= _5170:
                                revert with 0, 50
                            if arg1 and mem[_5118 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5118 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5118 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5118 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5118 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5118 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5118 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3185 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5118 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5118 + ceil32(return_data.size) + 32]) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1085 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1107 = mem[_1085]
                        require mem[_1085] <= test266151307()
                        require _1085 + mem[_1085] + 31 < _1085 + return_data.size
                        _1121 = mem[_1085 + mem[_1085]]
                        if mem[_1085 + mem[_1085]] > test266151307():
                            revert with 0, 65
                        if _1085 + ceil32(return_data.size) + ceil32(32 * mem[_1085 + mem[_1085]]) + 1 > test266151307() or ceil32(32 * mem[_1085 + mem[_1085]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1085 + ceil32(return_data.size) + ceil32(32 * mem[_1085 + mem[_1085]]) + 1
                        mem[_1085 + ceil32(return_data.size)] = _1121
                        require return_data.size >= _1107 + (32 * _1121) + 32
                        mem[_1085 + ceil32(return_data.size) + 32 len 32 * _1121] = mem[_1085 + _1107 + 32 len 32 * _1121]
                        if 0 >= _1121:
                            revert with 0, 50
                        _3184 = mem[_1085 + ceil32(return_data.size) + 32]
                        if mem[_1085 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1085 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3301 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3317 = mem[_3301]
                            _3347 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3347]:
                                revert with 0, 50
                            mem[_3347 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3347 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3347 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3347]:
                                revert with 0, 50
                            mem[_3347 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3347 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3347 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3347 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3347 + (4 * ceil32(return_data.size)) + 100] = _3317
                            mem[_3347 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3347 + (4 * ceil32(return_data.size)) + 164] = mem[_3347]
                            idx = 0
                            s = _3347 + 32
                            t = _3347 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3347]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3347 + (4 * ceil32(return_data.size)) + (32 * mem[_3347]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5117 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5143 = mem[_5117]
                            require mem[_5117] <= test266151307()
                            require _5117 + mem[_5117] + 31 < _5117 + return_data.size
                            _5169 = mem[_5117 + mem[_5117]]
                            if mem[_5117 + mem[_5117]] > test266151307():
                                revert with 0, 65
                            if _5117 + ceil32(return_data.size) + ceil32(32 * mem[_5117 + mem[_5117]]) + 1 > test266151307() or ceil32(32 * mem[_5117 + mem[_5117]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5117 + ceil32(return_data.size) + ceil32(32 * mem[_5117 + mem[_5117]]) + 1
                            mem[_5117 + ceil32(return_data.size)] = _5169
                            require return_data.size >= _5143 + (32 * _5169) + 32
                            mem[_5117 + ceil32(return_data.size) + 32 len 32 * _5169] = mem[_5117 + _5143 + 32 len 32 * _5169]
                            if 0 >= _5169:
                                revert with 0, 50
                            if arg1 and mem[_5117 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5117 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5117 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5117 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5117 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5117 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5117 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5117 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5117 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3309 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3327 = mem[_3309]
                                _3371 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3371]:
                                    revert with 0, 50
                                mem[_3371 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3371 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3371 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3371]:
                                    revert with 0, 50
                                mem[_3371 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3371 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3371 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3371 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3371 + (4 * ceil32(return_data.size)) + 100] = _3327
                                mem[_3371 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3371 + (4 * ceil32(return_data.size)) + 164] = mem[_3371]
                                idx = 0
                                s = _3371 + 32
                                t = _3371 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3371]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3327, 64, mem[_3371 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3371]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3371 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3371 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5142 = mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32
                                require mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 <= test266151307()
                                require _3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 127 < _3371 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5168 = mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96]
                                if mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3371 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3371 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96]) + 97
                                mem[_3371 + (6 * ceil32(return_data.size)) + 96] = mem[_3371 + (4 * ceil32(return_data.size)) + mem[_3371 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3327) >> 32 + 96]
                                require return_data.size >= _5142 + (32 * _5168) + 32
                                mem[_3371 + (6 * ceil32(return_data.size)) + 128 len 32 * _5168] = mem[_3371 + (4 * ceil32(return_data.size)) + _5142 + 128 len 32 * _5168]
                                if 0 >= _5168:
                                    revert with 0, 50
                                if arg1 and mem[_3371 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3371 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1085 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3694 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3737 = mem[_3694]
                                _3800 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3800]:
                                    revert with 0, 50
                                mem[_3800 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3800 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3800 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3800]:
                                    revert with 0, 50
                                mem[_3800 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3800 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3800 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3800 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3800 + (4 * ceil32(return_data.size)) + 100] = _3737
                                mem[_3800 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3800 + (4 * ceil32(return_data.size)) + 164] = mem[_3800]
                                idx = 0
                                s = _3800 + 32
                                t = _3800 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3800]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _3800 + (4 * ceil32(return_data.size)) + (32 * mem[_3800]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5115 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5141 = mem[_5115]
                                require mem[_5115] <= test266151307()
                                require _5115 + mem[_5115] + 31 < _5115 + return_data.size
                                _5167 = mem[_5115 + mem[_5115]]
                                if mem[_5115 + mem[_5115]] > test266151307():
                                    revert with 0, 65
                                if _5115 + ceil32(return_data.size) + ceil32(32 * mem[_5115 + mem[_5115]]) + 1 > test266151307() or ceil32(32 * mem[_5115 + mem[_5115]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5115 + ceil32(return_data.size) + ceil32(32 * mem[_5115 + mem[_5115]]) + 1
                                mem[_5115 + ceil32(return_data.size)] = _5167
                                require return_data.size >= _5141 + (32 * _5167) + 32
                                mem[_5115 + ceil32(return_data.size) + 32 len 32 * _5167] = mem[_5115 + _5141 + 32 len 32 * _5167]
                                if 0 >= _5167:
                                    revert with 0, 50
                                if arg1 and mem[_5115 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5115 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5115 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_5115 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5115 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5115 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5115 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3184 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5115 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5115 + ceil32(return_data.size) + 32]) / 10000)
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3195 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3209 = mem[_3195]
                        require mem[_3195] <= test266151307()
                        require _3195 + mem[_3195] + 31 < _3195 + return_data.size
                        _3219 = mem[_3195 + mem[_3195]]
                        if mem[_3195 + mem[_3195]] > test266151307():
                            revert with 0, 65
                        if _3195 + ceil32(return_data.size) + ceil32(32 * mem[_3195 + mem[_3195]]) + 1 > test266151307() or ceil32(32 * mem[_3195 + mem[_3195]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3195 + ceil32(return_data.size) + ceil32(32 * mem[_3195 + mem[_3195]]) + 1
                        mem[_3195 + ceil32(return_data.size)] = _3219
                        require return_data.size >= _3209 + (32 * _3219) + 32
                        mem[_3195 + ceil32(return_data.size) + 32 len 32 * _3219] = mem[_3195 + _3209 + 32 len 32 * _3219]
                        if 0 >= _3219:
                            revert with 0, 50
                        _5087 = mem[_3195 + ceil32(return_data.size) + 32]
                        if mem[_3195 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_3195 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5321 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5337 = mem[_5321]
                            _5365 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5365]:
                                revert with 0, 50
                            mem[_5365 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5365 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5365 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5365]:
                                revert with 0, 50
                            mem[_5365 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5365 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5365 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5365 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5365 + (4 * ceil32(return_data.size)) + 100] = _5337
                            mem[_5365 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5365 + (4 * ceil32(return_data.size)) + 164] = mem[_5365]
                            idx = 0
                            s = _5365 + 32
                            t = _5365 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5365]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5365 + (4 * ceil32(return_data.size)) + (32 * mem[_5365]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6437 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6461 = mem[_6437]
                            require mem[_6437] <= test266151307()
                            require _6437 + mem[_6437] + 31 < _6437 + return_data.size
                            _6485 = mem[_6437 + mem[_6437]]
                            if mem[_6437 + mem[_6437]] > test266151307():
                                revert with 0, 65
                            if _6437 + ceil32(return_data.size) + ceil32(32 * mem[_6437 + mem[_6437]]) + 1 > test266151307() or ceil32(32 * mem[_6437 + mem[_6437]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6437 + ceil32(return_data.size) + ceil32(32 * mem[_6437 + mem[_6437]]) + 1
                            mem[_6437 + ceil32(return_data.size)] = _6485
                            require return_data.size >= _6461 + (32 * _6485) + 32
                            mem[_6437 + ceil32(return_data.size) + 32 len 32 * _6485] = mem[_6437 + _6461 + 32 len 32 * _6485]
                            if 0 >= _6485:
                                revert with 0, 50
                            if arg1 and mem[_6437 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6437 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6437 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6437 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6437 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6437 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6437 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6437 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6437 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5329 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5345 = mem[_5329]
                                _5389 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5389]:
                                    revert with 0, 50
                                mem[_5389 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5389 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5389 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5389]:
                                    revert with 0, 50
                                mem[_5389 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5389 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5389 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5389 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5389 + (4 * ceil32(return_data.size)) + 100] = _5345
                                mem[_5389 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5389 + (4 * ceil32(return_data.size)) + 164] = mem[_5389]
                                idx = 0
                                s = _5389 + 32
                                t = _5389 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5389]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5345, 64, mem[_5389 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5389]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5389 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5389 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6460 = mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32
                                require mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 <= test266151307()
                                require _5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 127 < _5389 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6484 = mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96]
                                if mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5389 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5389 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96]) + 97
                                mem[_5389 + (6 * ceil32(return_data.size)) + 96] = mem[_5389 + (4 * ceil32(return_data.size)) + mem[_5389 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5345) >> 32 + 96]
                                require return_data.size >= _6460 + (32 * _6484) + 32
                                mem[_5389 + (6 * ceil32(return_data.size)) + 128 len 32 * _6484] = mem[_5389 + (4 * ceil32(return_data.size)) + _6460 + 128 len 32 * _6484]
                                if 0 >= _6484:
                                    revert with 0, 50
                                if arg1 and mem[_5389 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5389 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3195 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5639 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5675 = mem[_5639]
                                _5719 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5719]:
                                    revert with 0, 50
                                mem[_5719 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5719 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5719 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5719]:
                                    revert with 0, 50
                                mem[_5719 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5719 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5719 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5719 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5719 + (4 * ceil32(return_data.size)) + 100] = _5675
                                mem[_5719 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5719 + (4 * ceil32(return_data.size)) + 164] = mem[_5719]
                                idx = 0
                                s = _5719 + 32
                                t = _5719 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5719]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5719 + (4 * ceil32(return_data.size)) + (32 * mem[_5719]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6435 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6459 = mem[_6435]
                                require mem[_6435] <= test266151307()
                                require _6435 + mem[_6435] + 31 < _6435 + return_data.size
                                _6483 = mem[_6435 + mem[_6435]]
                                if mem[_6435 + mem[_6435]] > test266151307():
                                    revert with 0, 65
                                if _6435 + ceil32(return_data.size) + ceil32(32 * mem[_6435 + mem[_6435]]) + 1 > test266151307() or ceil32(32 * mem[_6435 + mem[_6435]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6435 + ceil32(return_data.size) + ceil32(32 * mem[_6435 + mem[_6435]]) + 1
                                mem[_6435 + ceil32(return_data.size)] = _6483
                                require return_data.size >= _6459 + (32 * _6483) + 32
                                mem[_6435 + ceil32(return_data.size) + 32 len 32 * _6483] = mem[_6435 + _6459 + 32 len 32 * _6483]
                                if 0 >= _6483:
                                    revert with 0, 50
                                if arg1 and mem[_6435 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6435 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6435 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6435 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6435 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6435 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6435 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5087 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6435 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6435 + ceil32(return_data.size) + 32]) / 10000)
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3194 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3208 = mem[_3194]
                    require mem[_3194] <= test266151307()
                    require _3194 + mem[_3194] + 31 < _3194 + return_data.size
                    _3218 = mem[_3194 + mem[_3194]]
                    if mem[_3194 + mem[_3194]] > test266151307():
                        revert with 0, 65
                    if _3194 + ceil32(return_data.size) + ceil32(32 * mem[_3194 + mem[_3194]]) + 1 > test266151307() or ceil32(32 * mem[_3194 + mem[_3194]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3194 + ceil32(return_data.size) + ceil32(32 * mem[_3194 + mem[_3194]]) + 1
                    mem[_3194 + ceil32(return_data.size)] = _3218
                    require return_data.size >= _3208 + (32 * _3218) + 32
                    mem[_3194 + ceil32(return_data.size) + 32 len 32 * _3218] = mem[_3194 + _3208 + 32 len 32 * _3218]
                    if 0 >= _3218:
                        revert with 0, 50
                    _5086 = mem[_3194 + ceil32(return_data.size) + 32]
                    if mem[_3194 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3194 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5320 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5336 = mem[_5320]
                        _5362 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5362]:
                            revert with 0, 50
                        mem[_5362 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5362 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5362 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5362]:
                            revert with 0, 50
                        mem[_5362 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5362 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5362 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5362 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5362 + (4 * ceil32(return_data.size)) + 100] = _5336
                        mem[_5362 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5362 + (4 * ceil32(return_data.size)) + 164] = mem[_5362]
                        idx = 0
                        s = _5362 + 32
                        t = _5362 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5362]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5362 + (4 * ceil32(return_data.size)) + (32 * mem[_5362]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6434 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6458 = mem[_6434]
                        require mem[_6434] <= test266151307()
                        require _6434 + mem[_6434] + 31 < _6434 + return_data.size
                        _6482 = mem[_6434 + mem[_6434]]
                        if mem[_6434 + mem[_6434]] > test266151307():
                            revert with 0, 65
                        if _6434 + ceil32(return_data.size) + ceil32(32 * mem[_6434 + mem[_6434]]) + 1 > test266151307() or ceil32(32 * mem[_6434 + mem[_6434]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _6434 + ceil32(return_data.size) + ceil32(32 * mem[_6434 + mem[_6434]]) + 1
                        mem[_6434 + ceil32(return_data.size)] = _6482
                        require return_data.size >= _6458 + (32 * _6482) + 32
                        mem[_6434 + ceil32(return_data.size) + 32 len 32 * _6482] = mem[_6434 + _6458 + 32 len 32 * _6482]
                        if 0 >= _6482:
                            revert with 0, 50
                        if arg1 and mem[_6434 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_6434 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6434 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_6434 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6434 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6434 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_6434 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6434 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6434 + ceil32(return_data.size) + 32]) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5328 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5344 = mem[_5328]
                            _5386 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5386]:
                                revert with 0, 50
                            mem[_5386 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5386 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5386 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5386]:
                                revert with 0, 50
                            mem[_5386 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5386 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5386 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5386 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5386 + (4 * ceil32(return_data.size)) + 100] = _5344
                            mem[_5386 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5386 + (4 * ceil32(return_data.size)) + 164] = mem[_5386]
                            idx = 0
                            s = _5386 + 32
                            t = _5386 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5386]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5386 + (4 * ceil32(return_data.size)) + (32 * mem[_5386]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6433 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6457 = mem[_6433]
                            require mem[_6433] <= test266151307()
                            require _6433 + mem[_6433] + 31 < _6433 + return_data.size
                            _6481 = mem[_6433 + mem[_6433]]
                            if mem[_6433 + mem[_6433]] > test266151307():
                                revert with 0, 65
                            if _6433 + ceil32(return_data.size) + ceil32(32 * mem[_6433 + mem[_6433]]) + 1 > test266151307() or ceil32(32 * mem[_6433 + mem[_6433]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6433 + ceil32(return_data.size) + ceil32(32 * mem[_6433 + mem[_6433]]) + 1
                            mem[_6433 + ceil32(return_data.size)] = _6481
                            require return_data.size >= _6457 + (32 * _6481) + 32
                            mem[_6433 + ceil32(return_data.size) + 32 len 32 * _6481] = mem[_6433 + _6457 + 32 len 32 * _6481]
                            if 0 >= _6481:
                                revert with 0, 50
                            if arg1 and mem[_6433 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6433 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6433 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6433 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6433 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6433 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6433 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6433 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6433 + ceil32(return_data.size) + 32]) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3194 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5635 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5673 = mem[_5635]
                            _5715 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5715]:
                                revert with 0, 50
                            mem[_5715 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5715 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5715 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5715]:
                                revert with 0, 50
                            mem[_5715 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5715 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5715 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5715 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5715 + (4 * ceil32(return_data.size)) + 100] = _5673
                            mem[_5715 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5715 + (4 * ceil32(return_data.size)) + 164] = mem[_5715]
                            idx = 0
                            u = _5715 + 32
                            v = _5715 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5715]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5673, 64, mem[_5715 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5715]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5715 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5715 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6456 = mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32
                            require mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 <= test266151307()
                            require _5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 127 < _5715 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6480 = mem[_5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 96]
                            if mem[_5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5715 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5715 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5715 + (4 * ceil32(return_data.size)) + mem[_5715 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5673) >> 32 + 96]) + 97
                            mem[_5715 + (6 * ceil32(return_data.size)) + 96] = _6480
                            require return_data.size >= _6456 + (32 * _6480) + 32
                            mem[_5715 + (6 * ceil32(return_data.size)) + 128 len 32 * _6480] = mem[_5715 + (4 * ceil32(return_data.size)) + _6456 + 128 len 32 * _6480]
                            if 0 >= _6480:
                                revert with 0, 50
                            if arg1 and mem[_5715 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5086 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5715 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3193 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3207 = mem[_3193]
                        require mem[_3193] <= test266151307()
                        require _3193 + mem[_3193] + 31 < _3193 + return_data.size
                        _3217 = mem[_3193 + mem[_3193]]
                        if mem[_3193 + mem[_3193]] > test266151307():
                            revert with 0, 65
                        if _3193 + ceil32(return_data.size) + ceil32(32 * mem[_3193 + mem[_3193]]) + 1 > test266151307() or ceil32(32 * mem[_3193 + mem[_3193]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3193 + ceil32(return_data.size) + ceil32(32 * mem[_3193 + mem[_3193]]) + 1
                        mem[_3193 + ceil32(return_data.size)] = _3217
                        require return_data.size >= _3207 + (32 * _3217) + 32
                        mem[_3193 + ceil32(return_data.size) + 32 len 32 * _3217] = mem[_3193 + _3207 + 32 len 32 * _3217]
                        if 0 >= _3217:
                            revert with 0, 50
                        _5085 = mem[_3193 + ceil32(return_data.size) + 32]
                        if mem[_3193 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3193 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5319 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5335 = mem[_5319]
                            _5359 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5359]:
                                revert with 0, 50
                            mem[_5359 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5359 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5359 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5359]:
                                revert with 0, 50
                            mem[_5359 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5359 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5359 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5359 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5359 + (4 * ceil32(return_data.size)) + 100] = _5335
                            mem[_5359 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5359 + (4 * ceil32(return_data.size)) + 164] = mem[_5359]
                            idx = 0
                            s = _5359 + 32
                            t = _5359 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5359]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5335, 64, mem[_5359 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5359]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5359 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5359 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6455 = mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32
                            require mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 <= test266151307()
                            require _5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 127 < _5359 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6479 = mem[_5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 96]
                            if mem[_5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5359 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5359 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5359 + (4 * ceil32(return_data.size)) + mem[_5359 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5335) >> 32 + 96]) + 97
                            mem[_5359 + (6 * ceil32(return_data.size)) + 96] = _6479
                            require return_data.size >= _6455 + (32 * _6479) + 32
                            mem[_5359 + (6 * ceil32(return_data.size)) + 128 len 32 * _6479] = mem[_5359 + (4 * ceil32(return_data.size)) + _6455 + 128 len 32 * _6479]
                            if 0 >= _6479:
                                revert with 0, 50
                            if arg1 and mem[_5359 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5359 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5327 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5343 = mem[_5327]
                                _5383 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5383]:
                                    revert with 0, 50
                                mem[_5383 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5383 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5383 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5383]:
                                    revert with 0, 50
                                mem[_5383 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5383 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5383 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5383 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5383 + (4 * ceil32(return_data.size)) + 100] = _5343
                                mem[_5383 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5383 + (4 * ceil32(return_data.size)) + 164] = mem[_5383]
                                idx = 0
                                s = _5383 + 32
                                t = _5383 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5383]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5343, 64, mem[_5383 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5383]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5383 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5383 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6454 = mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32
                                require mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 <= test266151307()
                                require _5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 127 < _5383 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6478 = mem[_5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 96]
                                if mem[_5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5383 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5383 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5383 + (4 * ceil32(return_data.size)) + mem[_5383 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5343) >> 32 + 96]) + 97
                                mem[_5383 + (6 * ceil32(return_data.size)) + 96] = _6478
                                require return_data.size >= _6454 + (32 * _6478) + 32
                                mem[_5383 + (6 * ceil32(return_data.size)) + 128 len 32 * _6478] = mem[_5383 + (4 * ceil32(return_data.size)) + _6454 + 128 len 32 * _6478]
                                if 0 >= _6478:
                                    revert with 0, 50
                                if arg1 and mem[_5383 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5383 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3193 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5631 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5671 = mem[_5631]
                                _5711 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5711]:
                                    revert with 0, 50
                                mem[_5711 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5711 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5711 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5711]:
                                    revert with 0, 50
                                mem[_5711 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5711 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5711 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5711 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5711 + (4 * ceil32(return_data.size)) + 100] = _5671
                                mem[_5711 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5711 + (4 * ceil32(return_data.size)) + 164] = mem[_5711]
                                idx = 0
                                u = _5711 + 32
                                v = _5711 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5711]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5671, 64, mem[_5711 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5711]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5711 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5711 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6453 = mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32
                                require mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 <= test266151307()
                                require _5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 127 < _5711 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6477 = mem[_5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 96]
                                if mem[_5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5711 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5711 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5711 + (4 * ceil32(return_data.size)) + mem[_5711 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5671) >> 32 + 96]) + 97
                                mem[_5711 + (6 * ceil32(return_data.size)) + 96] = _6477
                                require return_data.size >= _6453 + (32 * _6477) + 32
                                mem[_5711 + (6 * ceil32(return_data.size)) + 128 len 32 * _6477] = mem[_5711 + (4 * ceil32(return_data.size)) + _6453 + 128 len 32 * _6477]
                                if 0 >= _6477:
                                    revert with 0, 50
                                if arg1 and mem[_5711 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5085 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5711 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5114 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5140 = mem[_5114]
                        require mem[_5114] <= test266151307()
                        require _5114 + mem[_5114] + 31 < _5114 + return_data.size
                        _5166 = mem[_5114 + mem[_5114]]
                        if mem[_5114 + mem[_5114]] > test266151307():
                            revert with 0, 65
                        if _5114 + ceil32(return_data.size) + ceil32(32 * mem[_5114 + mem[_5114]]) + 1 > test266151307() or ceil32(32 * mem[_5114 + mem[_5114]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5114 + ceil32(return_data.size) + ceil32(32 * mem[_5114 + mem[_5114]]) + 1
                        mem[_5114 + ceil32(return_data.size)] = _5166
                        require return_data.size >= _5140 + (32 * _5166) + 32
                        mem[_5114 + ceil32(return_data.size) + 32 len 32 * _5166] = mem[_5114 + _5140 + 32 len 32 * _5166]
                        if 0 >= _5166:
                            revert with 0, 50
                        _6392 = mem[_5114 + ceil32(return_data.size) + 32]
                        if mem[_5114 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_5114 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6606 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6646 = mem[_6606]
                            _6652 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_6652]:
                                revert with 0, 50
                            mem[_6652 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_6652 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6652 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_6652]:
                                revert with 0, 50
                            mem[_6652 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_6652 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6652 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_6652 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_6652 + (4 * ceil32(return_data.size)) + 100] = _6646
                            mem[_6652 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_6652 + (4 * ceil32(return_data.size)) + 164] = mem[_6652]
                            idx = 0
                            s = _6652 + 32
                            t = _6652 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_6652]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _6646, 64, mem[_6652 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6652]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_6652 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _6652 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6968 = mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32
                            require mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 <= test266151307()
                            require _6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 127 < _6652 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6974 = mem[_6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 96]
                            if mem[_6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _6652 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6652 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6652 + (4 * ceil32(return_data.size)) + mem[_6652 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6646) >> 32 + 96]) + 97
                            mem[_6652 + (6 * ceil32(return_data.size)) + 96] = _6974
                            require return_data.size >= _6968 + (32 * _6974) + 32
                            mem[_6652 + (6 * ceil32(return_data.size)) + 128 len 32 * _6974] = mem[_6652 + (4 * ceil32(return_data.size)) + _6968 + 128 len 32 * _6974]
                            if 0 >= _6974:
                                revert with 0, 50
                            if arg1 and mem[_6652 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6652 + (6 * ceil32(return_data.size)) + 128]) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6632 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6648 = mem[_6632]
                                _6658 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6658]:
                                    revert with 0, 50
                                mem[_6658 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6658 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6658 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6658]:
                                    revert with 0, 50
                                mem[_6658 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6658 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6658 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6658 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6658 + (4 * ceil32(return_data.size)) + 100] = _6648
                                mem[_6658 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6658 + (4 * ceil32(return_data.size)) + 164] = mem[_6658]
                                idx = 0
                                s = _6658 + 32
                                t = _6658 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6658]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _6658 + (4 * ceil32(return_data.size)) + (32 * mem[_6658]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6961 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6967 = mem[_6961]
                                require mem[_6961] <= test266151307()
                                require _6961 + mem[_6961] + 31 < _6961 + return_data.size
                                _6973 = mem[_6961 + mem[_6961]]
                                if mem[_6961 + mem[_6961]] > test266151307():
                                    revert with 0, 65
                                if _6961 + ceil32(return_data.size) + ceil32(32 * mem[_6961 + mem[_6961]]) + 1 > test266151307() or ceil32(32 * mem[_6961 + mem[_6961]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6961 + ceil32(return_data.size) + ceil32(32 * mem[_6961 + mem[_6961]]) + 1
                                mem[_6961 + ceil32(return_data.size)] = _6973
                                require return_data.size >= _6967 + (32 * _6973) + 32
                                mem[_6961 + ceil32(return_data.size) + 32 len 32 * _6973] = mem[_6961 + _6967 + 32 len 32 * _6973]
                                if 0 >= _6973:
                                    revert with 0, 50
                                if arg1 and mem[_6961 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6961 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6961 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6961 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6961 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6961 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6961 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6961 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6961 + ceil32(return_data.size) + 32]) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5114 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6747 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6757 = mem[_6747]
                                _6765 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6765]:
                                    revert with 0, 50
                                mem[_6765 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6765 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6765 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6765]:
                                    revert with 0, 50
                                mem[_6765 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6765 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6765 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6765 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6765 + (4 * ceil32(return_data.size)) + 100] = _6757
                                mem[_6765 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6765 + (4 * ceil32(return_data.size)) + 164] = mem[_6765]
                                idx = 0
                                u = _6765 + 32
                                v = _6765 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6765]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _6765 + (4 * ceil32(return_data.size)) + (32 * mem[_6765]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6960 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6966 = mem[_6960]
                                require mem[_6960] <= test266151307()
                                require _6960 + mem[_6960] + 31 < _6960 + return_data.size
                                _6972 = mem[_6960 + mem[_6960]]
                                if mem[_6960 + mem[_6960]] > test266151307():
                                    revert with 0, 65
                                if _6960 + ceil32(return_data.size) + ceil32(32 * mem[_6960 + mem[_6960]]) + 1 > test266151307() or ceil32(32 * mem[_6960 + mem[_6960]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6960 + ceil32(return_data.size) + ceil32(32 * mem[_6960 + mem[_6960]]) + 1
                                mem[_6960 + ceil32(return_data.size)] = _6972
                                require return_data.size >= _6966 + (32 * _6972) + 32
                                mem[_6960 + ceil32(return_data.size) + 32 len 32 * _6972] = mem[_6960 + _6966 + 32 len 32 * _6972]
                                if 0 >= _6972:
                                    revert with 0, 50
                                if arg1 and mem[_6960 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6960 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6960 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6960 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6960 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6960 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6960 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6392 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6960 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6960 + ceil32(return_data.size) + 32]) / 10000)
    return memory
      from mem[64]
       len 32
}

function sub_8f7b5e13(?) payable {
    require calldata.size - 4 >= 32
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).getReserves() with:
            gas gas_remaining wei
    mem[ceil32(return_data.size) + 96 len 96] = ext_call.return_data[0 len 96]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.usdc() with:
            gas gas_remaining wei
    mem[(2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.liquidityPair() with:
            gas gas_remaining wei
    mem[(4 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).token0() with:
            gas gas_remaining wei
    mem[(6 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(settingsAddress)
    staticcall settingsAddress.0xb8746e73 with:
            gas gas_remaining wei
    mem[(7 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
    require ext_code.size(address(ext_call.return_data[0]))
    staticcall address(ext_call.return_data[0]).0x313ce567 with:
            gas gas_remaining wei
    mem[(8 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[31 len 1]
    if ext_call.return_data[12 len 20] == address(ext_call.return_data[0]):
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1070 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1092 = mem[_1070]
                require mem[_1070] <= test266151307()
                require _1070 + mem[_1070] + 31 < _1070 + return_data.size
                _1106 = mem[_1070 + mem[_1070]]
                if mem[_1070 + mem[_1070]] > test266151307():
                    revert with 0, 65
                if _1070 + ceil32(return_data.size) + ceil32(32 * mem[_1070 + mem[_1070]]) + 1 > test266151307() or ceil32(32 * mem[_1070 + mem[_1070]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _1070 + ceil32(return_data.size) + ceil32(32 * mem[_1070 + mem[_1070]]) + 1
                mem[_1070 + ceil32(return_data.size)] = _1106
                require return_data.size >= _1092 + (32 * _1106) + 32
                mem[_1070 + ceil32(return_data.size) + 32 len 32 * _1106] = mem[_1070 + _1092 + 32 len 32 * _1106]
                if 0 >= _1106:
                    revert with 0, 50
                _3162 = mem[_1070 + ceil32(return_data.size) + 32]
                if mem[_1070 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1070 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xcfe19c66 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3278 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3294 = mem[_3278]
                    _3330 = mem[64]
                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[mem[64] + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 0 >= mem[_3330]:
                        revert with 0, 50
                    mem[_3330 + 32] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[_3330 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3330 + (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 1 >= mem[_3330]:
                        revert with 0, 50
                    mem[_3330 + 64] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                    mem[_3330 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3330 + (4 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[_3330 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[_3330 + (4 * ceil32(return_data.size)) + 100] = _3294
                    mem[_3330 + (4 * ceil32(return_data.size)) + 132] = 64
                    mem[_3330 + (4 * ceil32(return_data.size)) + 164] = mem[_3330]
                    idx = 0
                    s = _3330 + 32
                    t = _3330 + (4 * ceil32(return_data.size)) + 196
                    while idx < mem[_3330]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len _3330 + (4 * ceil32(return_data.size)) + (32 * mem[_3330]) + -mem[64] + 192]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _5100 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _5126 = mem[_5100]
                    require mem[_5100] <= test266151307()
                    require _5100 + mem[_5100] + 31 < _5100 + return_data.size
                    _5152 = mem[_5100 + mem[_5100]]
                    if mem[_5100 + mem[_5100]] > test266151307():
                        revert with 0, 65
                    if _5100 + ceil32(return_data.size) + ceil32(32 * mem[_5100 + mem[_5100]]) + 1 > test266151307() or ceil32(32 * mem[_5100 + mem[_5100]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _5100 + ceil32(return_data.size) + ceil32(32 * mem[_5100 + mem[_5100]]) + 1
                    mem[_5100 + ceil32(return_data.size)] = _5152
                    require return_data.size >= _5126 + (32 * _5152) + 32
                    mem[_5100 + ceil32(return_data.size) + 32 len 32 * _5152] = mem[_5100 + _5126 + 32 len 32 * _5152]
                    if 0 >= _5152:
                        revert with 0, 50
                    if arg1 and mem[_5100 + ceil32(return_data.size) + 32] > -1 / arg1:
                        revert with 0, 17
                    if sub_535aa3bb < sub_bf0673d2:
                        revert with 0, 17
                    if arg1 * mem[_5100 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5100 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if arg1 * mem[_5100 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000:
                        revert with 0, 17
                    if (arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000):
                        revert with 0, 17
                    if (arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5100 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                        revert with 0, 17
                    mem[mem[64]] = (arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5100 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5100 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3286 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3304 = mem[_3286]
                        _3354 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3354]:
                            revert with 0, 50
                        mem[_3354 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3354 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3354 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3354]:
                            revert with 0, 50
                        mem[_3354 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3354 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3354 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3354 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3354 + (4 * ceil32(return_data.size)) + 100] = _3304
                        mem[_3354 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3354 + (4 * ceil32(return_data.size)) + 164] = mem[_3354]
                        idx = 0
                        s = _3354 + 32
                        t = _3354 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3354]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3354 + (4 * ceil32(return_data.size)) + (32 * mem[_3354]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5099 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5125 = mem[_5099]
                        require mem[_5099] <= test266151307()
                        require _5099 + mem[_5099] + 31 < _5099 + return_data.size
                        _5151 = mem[_5099 + mem[_5099]]
                        if mem[_5099 + mem[_5099]] > test266151307():
                            revert with 0, 65
                        if _5099 + ceil32(return_data.size) + ceil32(32 * mem[_5099 + mem[_5099]]) + 1 > test266151307() or ceil32(32 * mem[_5099 + mem[_5099]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5099 + ceil32(return_data.size) + ceil32(32 * mem[_5099 + mem[_5099]]) + 1
                        mem[_5099 + ceil32(return_data.size)] = _5151
                        require return_data.size >= _5125 + (32 * _5151) + 32
                        mem[_5099 + ceil32(return_data.size) + 32 len 32 * _5151] = mem[_5099 + _5125 + 32 len 32 * _5151]
                        if 0 >= _5151:
                            revert with 0, 50
                        if arg1 and mem[_5099 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_ac55eac2 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5099 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5099 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5099 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5099 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5099 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5099 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1070 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3681 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3717 = mem[_3681]
                        _3789 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3789]:
                            revert with 0, 50
                        mem[_3789 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3789 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3789 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3789]:
                            revert with 0, 50
                        mem[_3789 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3789 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3789 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3789 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3789 + (4 * ceil32(return_data.size)) + 100] = _3717
                        mem[_3789 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3789 + (4 * ceil32(return_data.size)) + 164] = mem[_3789]
                        idx = 0
                        s = _3789 + 32
                        t = _3789 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3789]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3717, 64, mem[_3789 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3789]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3789 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3789 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5124 = mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32
                        require mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 <= test266151307()
                        require _3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 127 < _3789 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5150 = mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96]
                        if mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3789 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3789 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96]) + 97
                        mem[_3789 + (6 * ceil32(return_data.size)) + 96] = mem[_3789 + (4 * ceil32(return_data.size)) + mem[_3789 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3717) >> 32 + 96]
                        require return_data.size >= _5124 + (32 * _5150) + 32
                        mem[_3789 + (6 * ceil32(return_data.size)) + 128 len 32 * _5150] = mem[_3789 + (4 * ceil32(return_data.size)) + _5124 + 128 len 32 * _5150]
                        if 0 >= _5150:
                            revert with 0, 50
                        if arg1 and mem[_3789 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3162 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3789 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1069 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1091 = mem[_1069]
                    require mem[_1069] <= test266151307()
                    require _1069 + mem[_1069] + 31 < _1069 + return_data.size
                    _1105 = mem[_1069 + mem[_1069]]
                    if mem[_1069 + mem[_1069]] > test266151307():
                        revert with 0, 65
                    if _1069 + ceil32(return_data.size) + ceil32(32 * mem[_1069 + mem[_1069]]) + 1 > test266151307() or ceil32(32 * mem[_1069 + mem[_1069]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1069 + ceil32(return_data.size) + ceil32(32 * mem[_1069 + mem[_1069]]) + 1
                    mem[_1069 + ceil32(return_data.size)] = _1105
                    require return_data.size >= _1091 + (32 * _1105) + 32
                    mem[_1069 + ceil32(return_data.size) + 32 len 32 * _1105] = mem[_1069 + _1091 + 32 len 32 * _1105]
                    if 0 >= _1105:
                        revert with 0, 50
                    _3161 = mem[_1069 + ceil32(return_data.size) + 32]
                    if mem[_1069 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1069 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3277 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3293 = mem[_3277]
                        _3327 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3327]:
                            revert with 0, 50
                        mem[_3327 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3327 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3327 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3327]:
                            revert with 0, 50
                        mem[_3327 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3327 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3327 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3327 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3327 + (4 * ceil32(return_data.size)) + 100] = _3293
                        mem[_3327 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3327 + (4 * ceil32(return_data.size)) + 164] = mem[_3327]
                        idx = 0
                        s = _3327 + 32
                        t = _3327 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3327]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3327 + (4 * ceil32(return_data.size)) + (32 * mem[_3327]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5097 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5123 = mem[_5097]
                        require mem[_5097] <= test266151307()
                        require _5097 + mem[_5097] + 31 < _5097 + return_data.size
                        _5149 = mem[_5097 + mem[_5097]]
                        if mem[_5097 + mem[_5097]] > test266151307():
                            revert with 0, 65
                        if _5097 + ceil32(return_data.size) + ceil32(32 * mem[_5097 + mem[_5097]]) + 1 > test266151307() or ceil32(32 * mem[_5097 + mem[_5097]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5097 + ceil32(return_data.size) + ceil32(32 * mem[_5097 + mem[_5097]]) + 1
                        mem[_5097 + ceil32(return_data.size)] = _5149
                        require return_data.size >= _5123 + (32 * _5149) + 32
                        mem[_5097 + ceil32(return_data.size) + 32 len 32 * _5149] = mem[_5097 + _5123 + 32 len 32 * _5149]
                        if 0 >= _5149:
                            revert with 0, 50
                        if arg1 and mem[_5097 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5097 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5097 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5097 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5097 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5097 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5097 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3285 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3303 = mem[_3285]
                            _3351 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3351]:
                                revert with 0, 50
                            mem[_3351 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3351 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3351 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3351]:
                                revert with 0, 50
                            mem[_3351 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3351 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3351 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3351 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3351 + (4 * ceil32(return_data.size)) + 100] = _3303
                            mem[_3351 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3351 + (4 * ceil32(return_data.size)) + 164] = mem[_3351]
                            idx = 0
                            s = _3351 + 32
                            t = _3351 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3351]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3303, 64, mem[_3351 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3351]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3351 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3351 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5122 = mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32
                            require mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 <= test266151307()
                            require _3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 127 < _3351 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5148 = mem[_3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 96]
                            if mem[_3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3351 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3351 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3351 + (4 * ceil32(return_data.size)) + mem[_3351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3303) >> 32 + 96]) + 97
                            mem[_3351 + (6 * ceil32(return_data.size)) + 96] = _5148
                            require return_data.size >= _5122 + (32 * _5148) + 32
                            mem[_3351 + (6 * ceil32(return_data.size)) + 128 len 32 * _5148] = mem[_3351 + (4 * ceil32(return_data.size)) + _5122 + 128 len 32 * _5148]
                            if 0 >= _5148:
                                revert with 0, 50
                            if arg1 and mem[_3351 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3351 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1069 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3677 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3715 = mem[_3677]
                            _3785 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3785]:
                                revert with 0, 50
                            mem[_3785 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3785 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3785 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3785]:
                                revert with 0, 50
                            mem[_3785 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3785 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3785 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3785 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3785 + (4 * ceil32(return_data.size)) + 100] = _3715
                            mem[_3785 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3785 + (4 * ceil32(return_data.size)) + 164] = mem[_3785]
                            idx = 0
                            s = _3785 + 32
                            t = _3785 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3785]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3785 + (4 * ceil32(return_data.size)) + (32 * mem[_3785]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5095 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5121 = mem[_5095]
                            require mem[_5095] <= test266151307()
                            require _5095 + mem[_5095] + 31 < _5095 + return_data.size
                            _5147 = mem[_5095 + mem[_5095]]
                            if mem[_5095 + mem[_5095]] > test266151307():
                                revert with 0, 65
                            if _5095 + ceil32(return_data.size) + ceil32(32 * mem[_5095 + mem[_5095]]) + 1 > test266151307() or ceil32(32 * mem[_5095 + mem[_5095]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5095 + ceil32(return_data.size) + ceil32(32 * mem[_5095 + mem[_5095]]) + 1
                            mem[_5095 + ceil32(return_data.size)] = _5147
                            require return_data.size >= _5121 + (32 * _5147) + 32
                            mem[_5095 + ceil32(return_data.size) + 32 len 32 * _5147] = mem[_5095 + _5121 + 32 len 32 * _5147]
                            if 0 >= _5147:
                                revert with 0, 50
                            if arg1 and mem[_5095 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5095 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5095 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5095 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5095 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5095 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3161 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5095 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3170 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3184 = mem[_3170]
                    require mem[_3170] <= test266151307()
                    require _3170 + mem[_3170] + 31 < _3170 + return_data.size
                    _3194 = mem[_3170 + mem[_3170]]
                    if mem[_3170 + mem[_3170]] > test266151307():
                        revert with 0, 65
                    if _3170 + ceil32(return_data.size) + ceil32(32 * mem[_3170 + mem[_3170]]) + 1 > test266151307() or ceil32(32 * mem[_3170 + mem[_3170]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3170 + ceil32(return_data.size) + ceil32(32 * mem[_3170 + mem[_3170]]) + 1
                    mem[_3170 + ceil32(return_data.size)] = _3194
                    require return_data.size >= _3184 + (32 * _3194) + 32
                    mem[_3170 + ceil32(return_data.size) + 32 len 32 * _3194] = mem[_3170 + _3184 + 32 len 32 * _3194]
                    if 0 >= _3194:
                        revert with 0, 50
                    _5068 = mem[_3170 + ceil32(return_data.size) + 32]
                    if mem[_3170 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_3170 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5296 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5312 = mem[_5296]
                        _5342 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5342]:
                            revert with 0, 50
                        mem[_5342 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5342 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5342 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5342]:
                            revert with 0, 50
                        mem[_5342 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5342 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5342 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5342 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5342 + (4 * ceil32(return_data.size)) + 100] = _5312
                        mem[_5342 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5342 + (4 * ceil32(return_data.size)) + 164] = mem[_5342]
                        idx = 0
                        s = _5342 + 32
                        t = _5342 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5342]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5342 + (4 * ceil32(return_data.size)) + (32 * mem[_5342]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6414 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6438 = mem[_6414]
                        require mem[_6414] <= test266151307()
                        require _6414 + mem[_6414] + 31 < _6414 + return_data.size
                        _6462 = mem[_6414 + mem[_6414]]
                        if mem[_6414 + mem[_6414]] > test266151307():
                            revert with 0, 65
                        if _6414 + ceil32(return_data.size) + ceil32(32 * mem[_6414 + mem[_6414]]) + 1 > test266151307() or ceil32(32 * mem[_6414 + mem[_6414]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _6414 + ceil32(return_data.size) + ceil32(32 * mem[_6414 + mem[_6414]]) + 1
                        mem[_6414 + ceil32(return_data.size)] = _6462
                        require return_data.size >= _6438 + (32 * _6462) + 32
                        mem[_6414 + ceil32(return_data.size) + 32 len 32 * _6462] = mem[_6414 + _6438 + 32 len 32 * _6462]
                        if 0 >= _6462:
                            revert with 0, 50
                        if arg1 and mem[_6414 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_6414 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6414 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_6414 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6414 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6414 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6414 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5304 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5320 = mem[_5304]
                            _5366 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5366]:
                                revert with 0, 50
                            mem[_5366 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5366 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5366 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5366]:
                                revert with 0, 50
                            mem[_5366 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5366 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5366 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5366 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5366 + (4 * ceil32(return_data.size)) + 100] = _5320
                            mem[_5366 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5366 + (4 * ceil32(return_data.size)) + 164] = mem[_5366]
                            idx = 0
                            s = _5366 + 32
                            t = _5366 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5366]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5320, 64, mem[_5366 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5366]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5366 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5366 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6437 = mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32
                            require mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 <= test266151307()
                            require _5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 127 < _5366 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6461 = mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96]
                            if mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5366 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5366 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96]) + 97
                            mem[_5366 + (6 * ceil32(return_data.size)) + 96] = mem[_5366 + (4 * ceil32(return_data.size)) + mem[_5366 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5320) >> 32 + 96]
                            require return_data.size >= _6437 + (32 * _6461) + 32
                            mem[_5366 + (6 * ceil32(return_data.size)) + 128 len 32 * _6461] = mem[_5366 + (4 * ceil32(return_data.size)) + _6437 + 128 len 32 * _6461]
                            if 0 >= _6461:
                                revert with 0, 50
                            if arg1 and mem[_5366 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5366 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3170 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5569 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5645 = mem[_5569]
                            _5697 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5697]:
                                revert with 0, 50
                            mem[_5697 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5697 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5697 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5697]:
                                revert with 0, 50
                            mem[_5697 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5697 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5697 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5697 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5697 + (4 * ceil32(return_data.size)) + 100] = _5645
                            mem[_5697 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5697 + (4 * ceil32(return_data.size)) + 164] = mem[_5697]
                            idx = 0
                            s = _5697 + 32
                            t = _5697 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5697]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5645, 64, mem[_5697 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5697]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5697 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5697 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6436 = mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32
                            require mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 <= test266151307()
                            require _5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 127 < _5697 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6460 = mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96]
                            if mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5697 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5697 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96]) + 97
                            mem[_5697 + (6 * ceil32(return_data.size)) + 96] = mem[_5697 + (4 * ceil32(return_data.size)) + mem[_5697 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5645) >> 32 + 96]
                            require return_data.size >= _6436 + (32 * _6460) + 32
                            mem[_5697 + (6 * ceil32(return_data.size)) + 128 len 32 * _6460] = mem[_5697 + (4 * ceil32(return_data.size)) + _6436 + 128 len 32 * _6460]
                            if 0 >= _6460:
                                revert with 0, 50
                            if arg1 and mem[_5697 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5068 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5697 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1068 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1090 = mem[_1068]
                    require mem[_1068] <= test266151307()
                    require _1068 + mem[_1068] + 31 < _1068 + return_data.size
                    _1104 = mem[_1068 + mem[_1068]]
                    if mem[_1068 + mem[_1068]] > test266151307():
                        revert with 0, 65
                    if _1068 + ceil32(return_data.size) + ceil32(32 * mem[_1068 + mem[_1068]]) + 1 > test266151307() or ceil32(32 * mem[_1068 + mem[_1068]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1068 + ceil32(return_data.size) + ceil32(32 * mem[_1068 + mem[_1068]]) + 1
                    mem[_1068 + ceil32(return_data.size)] = _1104
                    require return_data.size >= _1090 + (32 * _1104) + 32
                    mem[_1068 + ceil32(return_data.size) + 32 len 32 * _1104] = mem[_1068 + _1090 + 32 len 32 * _1104]
                    if 0 >= _1104:
                        revert with 0, 50
                    _3159 = mem[_1068 + ceil32(return_data.size) + 32]
                    if mem[_1068 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1068 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3276 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3292 = mem[_3276]
                        _3324 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3324]:
                            revert with 0, 50
                        mem[_3324 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3324 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3324 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3324]:
                            revert with 0, 50
                        mem[_3324 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3324 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3324 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3324 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3324 + (4 * ceil32(return_data.size)) + 100] = _3292
                        mem[_3324 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3324 + (4 * ceil32(return_data.size)) + 164] = mem[_3324]
                        idx = 0
                        s = _3324 + 32
                        t = _3324 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3324]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3324 + (4 * ceil32(return_data.size)) + (32 * mem[_3324]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5094 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5120 = mem[_5094]
                        require mem[_5094] <= test266151307()
                        require _5094 + mem[_5094] + 31 < _5094 + return_data.size
                        _5146 = mem[_5094 + mem[_5094]]
                        if mem[_5094 + mem[_5094]] > test266151307():
                            revert with 0, 65
                        if _5094 + ceil32(return_data.size) + ceil32(32 * mem[_5094 + mem[_5094]]) + 1 > test266151307() or ceil32(32 * mem[_5094 + mem[_5094]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5094 + ceil32(return_data.size) + ceil32(32 * mem[_5094 + mem[_5094]]) + 1
                        mem[_5094 + ceil32(return_data.size)] = _5146
                        require return_data.size >= _5120 + (32 * _5146) + 32
                        mem[_5094 + ceil32(return_data.size) + 32 len 32 * _5146] = mem[_5094 + _5120 + 32 len 32 * _5146]
                        if 0 >= _5146:
                            revert with 0, 50
                        if arg1 and mem[_5094 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5094 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5094 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5094 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5094 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5094 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5094 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3284 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3302 = mem[_3284]
                            _3348 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3348]:
                                revert with 0, 50
                            mem[_3348 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3348 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3348 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3348]:
                                revert with 0, 50
                            mem[_3348 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3348 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3348 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3348 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3348 + (4 * ceil32(return_data.size)) + 100] = _3302
                            mem[_3348 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3348 + (4 * ceil32(return_data.size)) + 164] = mem[_3348]
                            idx = 0
                            s = _3348 + 32
                            t = _3348 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3348]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3302, 64, mem[_3348 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3348]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3348 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3348 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5119 = mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32
                            require mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 <= test266151307()
                            require _3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 127 < _3348 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5145 = mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96]
                            if mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3348 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3348 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96]) + 97
                            mem[_3348 + (6 * ceil32(return_data.size)) + 96] = mem[_3348 + (4 * ceil32(return_data.size)) + mem[_3348 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3302) >> 32 + 96]
                            require return_data.size >= _5119 + (32 * _5145) + 32
                            mem[_3348 + (6 * ceil32(return_data.size)) + 128 len 32 * _5145] = mem[_3348 + (4 * ceil32(return_data.size)) + _5119 + 128 len 32 * _5145]
                            if 0 >= _5145:
                                revert with 0, 50
                            if arg1 and mem[_3348 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3348 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1068 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3672 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3713 = mem[_3672]
                            _3778 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3778]:
                                revert with 0, 50
                            mem[_3778 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3778 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3778 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3778]:
                                revert with 0, 50
                            mem[_3778 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3778 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3778 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3778 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3778 + (4 * ceil32(return_data.size)) + 100] = _3713
                            mem[_3778 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3778 + (4 * ceil32(return_data.size)) + 164] = mem[_3778]
                            idx = 0
                            s = _3778 + 32
                            t = _3778 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3778]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3713, 64, mem[_3778 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3778]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3778 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3778 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5118 = mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32
                            require mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 <= test266151307()
                            require _3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 127 < _3778 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5144 = mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96]
                            if mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3778 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3778 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96]) + 97
                            mem[_3778 + (6 * ceil32(return_data.size)) + 96] = mem[_3778 + (4 * ceil32(return_data.size)) + mem[_3778 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3713) >> 32 + 96]
                            require return_data.size >= _5118 + (32 * _5144) + 32
                            mem[_3778 + (6 * ceil32(return_data.size)) + 128 len 32 * _5144] = mem[_3778 + (4 * ceil32(return_data.size)) + _5118 + 128 len 32 * _5144]
                            if 0 >= _5144:
                                revert with 0, 50
                            if arg1 and mem[_3778 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3159 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3778 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1067 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1089 = mem[_1067]
                        require mem[_1067] <= test266151307()
                        require _1067 + mem[_1067] + 31 < _1067 + return_data.size
                        _1103 = mem[_1067 + mem[_1067]]
                        if mem[_1067 + mem[_1067]] > test266151307():
                            revert with 0, 65
                        if _1067 + ceil32(return_data.size) + ceil32(32 * mem[_1067 + mem[_1067]]) + 1 > test266151307() or ceil32(32 * mem[_1067 + mem[_1067]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1067 + ceil32(return_data.size) + ceil32(32 * mem[_1067 + mem[_1067]]) + 1
                        mem[_1067 + ceil32(return_data.size)] = _1103
                        require return_data.size >= _1089 + (32 * _1103) + 32
                        mem[_1067 + ceil32(return_data.size) + 32 len 32 * _1103] = mem[_1067 + _1089 + 32 len 32 * _1103]
                        if 0 >= _1103:
                            revert with 0, 50
                        _3158 = mem[_1067 + ceil32(return_data.size) + 32]
                        if mem[_1067 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1067 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3275 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3291 = mem[_3275]
                            _3321 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3321]:
                                revert with 0, 50
                            mem[_3321 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3321 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3321 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3321]:
                                revert with 0, 50
                            mem[_3321 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3321 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3321 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3321 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3321 + (4 * ceil32(return_data.size)) + 100] = _3291
                            mem[_3321 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3321 + (4 * ceil32(return_data.size)) + 164] = mem[_3321]
                            idx = 0
                            s = _3321 + 32
                            t = _3321 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3321]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3321 + (4 * ceil32(return_data.size)) + (32 * mem[_3321]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5091 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5117 = mem[_5091]
                            require mem[_5091] <= test266151307()
                            require _5091 + mem[_5091] + 31 < _5091 + return_data.size
                            _5143 = mem[_5091 + mem[_5091]]
                            if mem[_5091 + mem[_5091]] > test266151307():
                                revert with 0, 65
                            if _5091 + ceil32(return_data.size) + ceil32(32 * mem[_5091 + mem[_5091]]) + 1 > test266151307() or ceil32(32 * mem[_5091 + mem[_5091]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5091 + ceil32(return_data.size) + ceil32(32 * mem[_5091 + mem[_5091]]) + 1
                            mem[_5091 + ceil32(return_data.size)] = _5143
                            require return_data.size >= _5117 + (32 * _5143) + 32
                            mem[_5091 + ceil32(return_data.size) + 32 len 32 * _5143] = mem[_5091 + _5117 + 32 len 32 * _5143]
                            if 0 >= _5143:
                                revert with 0, 50
                            if arg1 and mem[_5091 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5091 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5091 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5091 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5091 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5091 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5091 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3283 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3301 = mem[_3283]
                                _3345 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3345]:
                                    revert with 0, 50
                                mem[_3345 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3345 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3345 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3345]:
                                    revert with 0, 50
                                mem[_3345 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3345 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3345 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3345 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3345 + (4 * ceil32(return_data.size)) + 100] = _3301
                                mem[_3345 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3345 + (4 * ceil32(return_data.size)) + 164] = mem[_3345]
                                idx = 0
                                s = _3345 + 32
                                t = _3345 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3345]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3301, 64, mem[_3345 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3345]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3345 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3345 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5116 = mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32
                                require mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 <= test266151307()
                                require _3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 127 < _3345 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5142 = mem[_3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 96]
                                if mem[_3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3345 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3345 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3345 + (4 * ceil32(return_data.size)) + mem[_3345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3301) >> 32 + 96]) + 97
                                mem[_3345 + (6 * ceil32(return_data.size)) + 96] = _5142
                                require return_data.size >= _5116 + (32 * _5142) + 32
                                mem[_3345 + (6 * ceil32(return_data.size)) + 128 len 32 * _5142] = mem[_3345 + (4 * ceil32(return_data.size)) + _5116 + 128 len 32 * _5142]
                                if 0 >= _5142:
                                    revert with 0, 50
                                if arg1 and mem[_3345 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3345 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_1067 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3668 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3711 = mem[_3668]
                                _3774 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3774]:
                                    revert with 0, 50
                                mem[_3774 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3774 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3774 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3774]:
                                    revert with 0, 50
                                mem[_3774 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3774 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3774 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3774 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3774 + (4 * ceil32(return_data.size)) + 100] = _3711
                                mem[_3774 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3774 + (4 * ceil32(return_data.size)) + 164] = mem[_3774]
                                idx = 0
                                s = _3774 + 32
                                t = _3774 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3774]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3711, 64, mem[_3774 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3774]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3774 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3774 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5115 = mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32
                                require mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 <= test266151307()
                                require _3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 127 < _3774 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5141 = mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96]
                                if mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3774 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3774 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96]) + 97
                                mem[_3774 + (6 * ceil32(return_data.size)) + 96] = mem[_3774 + (4 * ceil32(return_data.size)) + mem[_3774 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3711) >> 32 + 96]
                                require return_data.size >= _5115 + (32 * _5141) + 32
                                mem[_3774 + (6 * ceil32(return_data.size)) + 128 len 32 * _5141] = mem[_3774 + (4 * ceil32(return_data.size)) + _5115 + 128 len 32 * _5141]
                                if 0 >= _5141:
                                    revert with 0, 50
                                if arg1 and mem[_3774 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _3158 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3774 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3169 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3183 = mem[_3169]
                        require mem[_3169] <= test266151307()
                        require _3169 + mem[_3169] + 31 < _3169 + return_data.size
                        _3193 = mem[_3169 + mem[_3169]]
                        if mem[_3169 + mem[_3169]] > test266151307():
                            revert with 0, 65
                        if _3169 + ceil32(return_data.size) + ceil32(32 * mem[_3169 + mem[_3169]]) + 1 > test266151307() or ceil32(32 * mem[_3169 + mem[_3169]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3169 + ceil32(return_data.size) + ceil32(32 * mem[_3169 + mem[_3169]]) + 1
                        mem[_3169 + ceil32(return_data.size)] = _3193
                        require return_data.size >= _3183 + (32 * _3193) + 32
                        mem[_3169 + ceil32(return_data.size) + 32 len 32 * _3193] = mem[_3169 + _3183 + 32 len 32 * _3193]
                        if 0 >= _3193:
                            revert with 0, 50
                        _5061 = mem[_3169 + ceil32(return_data.size) + 32]
                        if mem[_3169 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_3169 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5295 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5311 = mem[_5295]
                            _5339 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5339]:
                                revert with 0, 50
                            mem[_5339 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5339 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5339 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5339]:
                                revert with 0, 50
                            mem[_5339 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5339 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5339 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5339 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5339 + (4 * ceil32(return_data.size)) + 100] = _5311
                            mem[_5339 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5339 + (4 * ceil32(return_data.size)) + 164] = mem[_5339]
                            idx = 0
                            s = _5339 + 32
                            t = _5339 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5339]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5311, 64, mem[_5339 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5339]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5339 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5339 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6435 = mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32
                            require mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 <= test266151307()
                            require _5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 127 < _5339 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6459 = mem[_5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 96]
                            if mem[_5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5339 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5339 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5339 + (4 * ceil32(return_data.size)) + mem[_5339 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5311) >> 32 + 96]) + 97
                            mem[_5339 + (6 * ceil32(return_data.size)) + 96] = _6459
                            require return_data.size >= _6435 + (32 * _6459) + 32
                            mem[_5339 + (6 * ceil32(return_data.size)) + 128 len 32 * _6459] = mem[_5339 + (4 * ceil32(return_data.size)) + _6435 + 128 len 32 * _6459]
                            if 0 >= _6459:
                                revert with 0, 50
                            if arg1 and mem[_5339 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5339 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5303 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5319 = mem[_5303]
                                _5363 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5363]:
                                    revert with 0, 50
                                mem[_5363 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5363 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5363 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5363]:
                                    revert with 0, 50
                                mem[_5363 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5363 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5363 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5363 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5363 + (4 * ceil32(return_data.size)) + 100] = _5319
                                mem[_5363 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5363 + (4 * ceil32(return_data.size)) + 164] = mem[_5363]
                                idx = 0
                                s = _5363 + 32
                                t = _5363 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5363]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5319, 64, mem[_5363 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5363]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5363 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5363 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6434 = mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32
                                require mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 <= test266151307()
                                require _5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 127 < _5363 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6458 = mem[_5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 96]
                                if mem[_5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5363 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5363 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5363 + (4 * ceil32(return_data.size)) + mem[_5363 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5319) >> 32 + 96]) + 97
                                mem[_5363 + (6 * ceil32(return_data.size)) + 96] = _6458
                                require return_data.size >= _6434 + (32 * _6458) + 32
                                mem[_5363 + (6 * ceil32(return_data.size)) + 128 len 32 * _6458] = mem[_5363 + (4 * ceil32(return_data.size)) + _6434 + 128 len 32 * _6458]
                                if 0 >= _6458:
                                    revert with 0, 50
                                if arg1 and mem[_5363 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5363 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3169 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5565 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5637 = mem[_5565]
                                _5693 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5693]:
                                    revert with 0, 50
                                mem[_5693 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5693 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5693 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5693]:
                                    revert with 0, 50
                                mem[_5693 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5693 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5693 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5693 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5693 + (4 * ceil32(return_data.size)) + 100] = _5637
                                mem[_5693 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5693 + (4 * ceil32(return_data.size)) + 164] = mem[_5693]
                                idx = 0
                                s = _5693 + 32
                                t = _5693 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5693]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5693 + (4 * ceil32(return_data.size)) + (32 * mem[_5693]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6409 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6433 = mem[_6409]
                                require mem[_6409] <= test266151307()
                                require _6409 + mem[_6409] + 31 < _6409 + return_data.size
                                _6457 = mem[_6409 + mem[_6409]]
                                if mem[_6409 + mem[_6409]] > test266151307():
                                    revert with 0, 65
                                if _6409 + ceil32(return_data.size) + ceil32(32 * mem[_6409 + mem[_6409]]) + 1 > test266151307() or ceil32(32 * mem[_6409 + mem[_6409]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6409 + ceil32(return_data.size) + ceil32(32 * mem[_6409 + mem[_6409]]) + 1
                                mem[_6409 + ceil32(return_data.size)] = _6457
                                require return_data.size >= _6433 + (32 * _6457) + 32
                                mem[_6409 + ceil32(return_data.size) + 32 len 32 * _6457] = mem[_6409 + _6433 + 32 len 32 * _6457]
                                if 0 >= _6457:
                                    revert with 0, 50
                                if arg1 and mem[_6409 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6409 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6409 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6409 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6409 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6409 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5061 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6409 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3168 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3182 = mem[_3168]
                    require mem[_3168] <= test266151307()
                    require _3168 + mem[_3168] + 31 < _3168 + return_data.size
                    _3192 = mem[_3168 + mem[_3168]]
                    if mem[_3168 + mem[_3168]] > test266151307():
                        revert with 0, 65
                    if _3168 + ceil32(return_data.size) + ceil32(32 * mem[_3168 + mem[_3168]]) + 1 > test266151307() or ceil32(32 * mem[_3168 + mem[_3168]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3168 + ceil32(return_data.size) + ceil32(32 * mem[_3168 + mem[_3168]]) + 1
                    mem[_3168 + ceil32(return_data.size)] = _3192
                    require return_data.size >= _3182 + (32 * _3192) + 32
                    mem[_3168 + ceil32(return_data.size) + 32 len 32 * _3192] = mem[_3168 + _3182 + 32 len 32 * _3192]
                    if 0 >= _3192:
                        revert with 0, 50
                    _5060 = mem[_3168 + ceil32(return_data.size) + 32]
                    if mem[_3168 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3168 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5294 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5310 = mem[_5294]
                        _5336 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5336]:
                            revert with 0, 50
                        mem[_5336 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5336 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5336 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5336]:
                            revert with 0, 50
                        mem[_5336 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5336 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5336 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5336 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5336 + (4 * ceil32(return_data.size)) + 100] = _5310
                        mem[_5336 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5336 + (4 * ceil32(return_data.size)) + 164] = mem[_5336]
                        idx = 0
                        s = _5336 + 32
                        t = _5336 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5336]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5336 + (4 * ceil32(return_data.size)) + (32 * mem[_5336]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6408 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6432 = mem[_6408]
                        require mem[_6408] <= test266151307()
                        require _6408 + mem[_6408] + 31 < _6408 + return_data.size
                        _6456 = mem[_6408 + mem[_6408]]
                        if mem[_6408 + mem[_6408]] > test266151307():
                            revert with 0, 65
                        if _6408 + ceil32(return_data.size) + ceil32(32 * mem[_6408 + mem[_6408]]) + 1 > test266151307() or ceil32(32 * mem[_6408 + mem[_6408]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _6408 + ceil32(return_data.size) + ceil32(32 * mem[_6408 + mem[_6408]]) + 1
                        mem[_6408 + ceil32(return_data.size)] = _6456
                        require return_data.size >= _6432 + (32 * _6456) + 32
                        mem[_6408 + ceil32(return_data.size) + 32 len 32 * _6456] = mem[_6408 + _6432 + 32 len 32 * _6456]
                        if 0 >= _6456:
                            revert with 0, 50
                        if arg1 and mem[_6408 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_6408 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6408 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_6408 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6408 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6408 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6408 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5302 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5318 = mem[_5302]
                            _5360 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5360]:
                                revert with 0, 50
                            mem[_5360 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5360 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5360 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5360]:
                                revert with 0, 50
                            mem[_5360 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5360 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5360 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5360 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5360 + (4 * ceil32(return_data.size)) + 100] = _5318
                            mem[_5360 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5360 + (4 * ceil32(return_data.size)) + 164] = mem[_5360]
                            idx = 0
                            s = _5360 + 32
                            t = _5360 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5360]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5318, 64, mem[_5360 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5360]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5360 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5360 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6431 = mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32
                            require mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 <= test266151307()
                            require _5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 127 < _5360 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6455 = mem[_5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 96]
                            if mem[_5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5360 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5360 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5360 + (4 * ceil32(return_data.size)) + mem[_5360 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5318) >> 32 + 96]) + 97
                            mem[_5360 + (6 * ceil32(return_data.size)) + 96] = _6455
                            require return_data.size >= _6431 + (32 * _6455) + 32
                            mem[_5360 + (6 * ceil32(return_data.size)) + 128 len 32 * _6455] = mem[_5360 + (4 * ceil32(return_data.size)) + _6431 + 128 len 32 * _6455]
                            if 0 >= _6455:
                                revert with 0, 50
                            if arg1 and mem[_5360 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5360 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3168 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5561 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5635 = mem[_5561]
                            _5689 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5689]:
                                revert with 0, 50
                            mem[_5689 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5689 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5689 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5689]:
                                revert with 0, 50
                            mem[_5689 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5689 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5689 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5689 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5689 + (4 * ceil32(return_data.size)) + 100] = _5635
                            mem[_5689 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5689 + (4 * ceil32(return_data.size)) + 164] = mem[_5689]
                            idx = 0
                            u = _5689 + 32
                            v = _5689 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5689]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5689 + (4 * ceil32(return_data.size)) + (32 * mem[_5689]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6406 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6430 = mem[_6406]
                            require mem[_6406] <= test266151307()
                            require _6406 + mem[_6406] + 31 < _6406 + return_data.size
                            _6454 = mem[_6406 + mem[_6406]]
                            if mem[_6406 + mem[_6406]] > test266151307():
                                revert with 0, 65
                            if _6406 + ceil32(return_data.size) + ceil32(32 * mem[_6406 + mem[_6406]]) + 1 > test266151307() or ceil32(32 * mem[_6406 + mem[_6406]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6406 + ceil32(return_data.size) + ceil32(32 * mem[_6406 + mem[_6406]]) + 1
                            mem[_6406 + ceil32(return_data.size)] = _6454
                            require return_data.size >= _6430 + (32 * _6454) + 32
                            mem[_6406 + ceil32(return_data.size) + 32 len 32 * _6454] = mem[_6406 + _6430 + 32 len 32 * _6454]
                            if 0 >= _6454:
                                revert with 0, 50
                            if arg1 and mem[_6406 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6406 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6406 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6406 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6406 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6406 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5060 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6406 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3167 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3181 = mem[_3167]
                        require mem[_3167] <= test266151307()
                        require _3167 + mem[_3167] + 31 < _3167 + return_data.size
                        _3191 = mem[_3167 + mem[_3167]]
                        if mem[_3167 + mem[_3167]] > test266151307():
                            revert with 0, 65
                        if _3167 + ceil32(return_data.size) + ceil32(32 * mem[_3167 + mem[_3167]]) + 1 > test266151307() or ceil32(32 * mem[_3167 + mem[_3167]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3167 + ceil32(return_data.size) + ceil32(32 * mem[_3167 + mem[_3167]]) + 1
                        mem[_3167 + ceil32(return_data.size)] = _3191
                        require return_data.size >= _3181 + (32 * _3191) + 32
                        mem[_3167 + ceil32(return_data.size) + 32 len 32 * _3191] = mem[_3167 + _3181 + 32 len 32 * _3191]
                        if 0 >= _3191:
                            revert with 0, 50
                        _5059 = mem[_3167 + ceil32(return_data.size) + 32]
                        if mem[_3167 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3167 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5293 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5309 = mem[_5293]
                            _5333 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5333]:
                                revert with 0, 50
                            mem[_5333 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5333 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5333 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5333]:
                                revert with 0, 50
                            mem[_5333 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5333 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5333 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5333 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5333 + (4 * ceil32(return_data.size)) + 100] = _5309
                            mem[_5333 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5333 + (4 * ceil32(return_data.size)) + 164] = mem[_5333]
                            idx = 0
                            s = _5333 + 32
                            t = _5333 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5333]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5309, 64, mem[_5333 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5333]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5333 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5333 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6429 = mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32
                            require mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 <= test266151307()
                            require _5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 127 < _5333 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6453 = mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96]
                            if mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96]) + 97
                            mem[_5333 + (6 * ceil32(return_data.size)) + 96] = mem[_5333 + (4 * ceil32(return_data.size)) + mem[_5333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5309) >> 32 + 96]
                            require return_data.size >= _6429 + (32 * _6453) + 32
                            mem[_5333 + (6 * ceil32(return_data.size)) + 128 len 32 * _6453] = mem[_5333 + (4 * ceil32(return_data.size)) + _6429 + 128 len 32 * _6453]
                            if 0 >= _6453:
                                revert with 0, 50
                            if arg1 and mem[_5333 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5333 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5301 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5317 = mem[_5301]
                                _5357 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5357]:
                                    revert with 0, 50
                                mem[_5357 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5357 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5357 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5357]:
                                    revert with 0, 50
                                mem[_5357 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5357 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5357 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5357 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5357 + (4 * ceil32(return_data.size)) + 100] = _5317
                                mem[_5357 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5357 + (4 * ceil32(return_data.size)) + 164] = mem[_5357]
                                idx = 0
                                s = _5357 + 32
                                t = _5357 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5357]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5317, 64, mem[_5357 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5357]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5357 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5357 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6428 = mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32
                                require mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 <= test266151307()
                                require _5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 127 < _5357 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6452 = mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96]
                                if mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5357 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5357 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96]) + 97
                                mem[_5357 + (6 * ceil32(return_data.size)) + 96] = mem[_5357 + (4 * ceil32(return_data.size)) + mem[_5357 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5317) >> 32 + 96]
                                require return_data.size >= _6428 + (32 * _6452) + 32
                                mem[_5357 + (6 * ceil32(return_data.size)) + 128 len 32 * _6452] = mem[_5357 + (4 * ceil32(return_data.size)) + _6428 + 128 len 32 * _6452]
                                if 0 >= _6452:
                                    revert with 0, 50
                                if arg1 and mem[_5357 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5357 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_3167 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5557 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5633 = mem[_5557]
                                _5685 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5685]:
                                    revert with 0, 50
                                mem[_5685 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5685 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5685 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5685]:
                                    revert with 0, 50
                                mem[_5685 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5685 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5685 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5685 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5685 + (4 * ceil32(return_data.size)) + 100] = _5633
                                mem[_5685 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5685 + (4 * ceil32(return_data.size)) + 164] = mem[_5685]
                                idx = 0
                                u = _5685 + 32
                                v = _5685 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5685]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5685 + (4 * ceil32(return_data.size)) + (32 * mem[_5685]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6403 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6427 = mem[_6403]
                                require mem[_6403] <= test266151307()
                                require _6403 + mem[_6403] + 31 < _6403 + return_data.size
                                _6451 = mem[_6403 + mem[_6403]]
                                if mem[_6403 + mem[_6403]] > test266151307():
                                    revert with 0, 65
                                if _6403 + ceil32(return_data.size) + ceil32(32 * mem[_6403 + mem[_6403]]) + 1 > test266151307() or ceil32(32 * mem[_6403 + mem[_6403]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6403 + ceil32(return_data.size) + ceil32(32 * mem[_6403 + mem[_6403]]) + 1
                                mem[_6403 + ceil32(return_data.size)] = _6451
                                require return_data.size >= _6427 + (32 * _6451) + 32
                                mem[_6403 + ceil32(return_data.size) + 32 len 32 * _6451] = mem[_6403 + _6427 + 32 len 32 * _6451]
                                if 0 >= _6451:
                                    revert with 0, 50
                                if arg1 and mem[_6403 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6403 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6403 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6403 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6403 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6403 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _5059 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6403 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5088 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5114 = mem[_5088]
                        require mem[_5088] <= test266151307()
                        require _5088 + mem[_5088] + 31 < _5088 + return_data.size
                        _5140 = mem[_5088 + mem[_5088]]
                        if mem[_5088 + mem[_5088]] > test266151307():
                            revert with 0, 65
                        if _5088 + ceil32(return_data.size) + ceil32(32 * mem[_5088 + mem[_5088]]) + 1 > test266151307() or ceil32(32 * mem[_5088 + mem[_5088]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5088 + ceil32(return_data.size) + ceil32(32 * mem[_5088 + mem[_5088]]) + 1
                        mem[_5088 + ceil32(return_data.size)] = _5140
                        require return_data.size >= _5114 + (32 * _5140) + 32
                        mem[_5088 + ceil32(return_data.size) + 32 len 32 * _5140] = mem[_5088 + _5114 + 32 len 32 * _5140]
                        if 0 >= _5140:
                            revert with 0, 50
                        _6366 = mem[_5088 + ceil32(return_data.size) + 32]
                        if mem[_5088 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_5088 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[0]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6568 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6572 = mem[_6568]
                            _6578 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_6578]:
                                revert with 0, 50
                            mem[_6578 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_6578 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6578 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_6578]:
                                revert with 0, 50
                            mem[_6578 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_6578 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6578 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_6578 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_6578 + (4 * ceil32(return_data.size)) + 100] = _6572
                            mem[_6578 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_6578 + (4 * ceil32(return_data.size)) + 164] = mem[_6578]
                            idx = 0
                            s = _6578 + 32
                            t = _6578 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_6578]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _6572, 64, mem[_6578 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6578]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_6578 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _6578 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6942 = mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32
                            require mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 <= test266151307()
                            require _6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 127 < _6578 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6948 = mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96]
                            if mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _6578 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6578 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96]) + 97
                            mem[_6578 + (6 * ceil32(return_data.size)) + 96] = mem[_6578 + (4 * ceil32(return_data.size)) + mem[_6578 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6572) >> 32 + 96]
                            require return_data.size >= _6942 + (32 * _6948) + 32
                            mem[_6578 + (6 * ceil32(return_data.size)) + 128 len 32 * _6948] = mem[_6578 + (4 * ceil32(return_data.size)) + _6942 + 128 len 32 * _6948]
                            if 0 >= _6948:
                                revert with 0, 50
                            if arg1 and mem[_6578 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6578 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6570 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6574 = mem[_6570]
                                _6584 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6584]:
                                    revert with 0, 50
                                mem[_6584 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6584 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6584 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6584]:
                                    revert with 0, 50
                                mem[_6584 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6584 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6584 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6584 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6584 + (4 * ceil32(return_data.size)) + 100] = _6574
                                mem[_6584 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6584 + (4 * ceil32(return_data.size)) + 164] = mem[_6584]
                                idx = 0
                                s = _6584 + 32
                                t = _6584 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6584]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _6574, 64, mem[_6584 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6584]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_6584 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _6584 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6941 = mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32
                                require mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 <= test266151307()
                                require _6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 127 < _6584 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6947 = mem[_6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 96]
                                if mem[_6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _6584 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6584 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6584 + (4 * ceil32(return_data.size)) + mem[_6584 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6574) >> 32 + 96]) + 97
                                mem[_6584 + (6 * ceil32(return_data.size)) + 96] = _6947
                                require return_data.size >= _6941 + (32 * _6947) + 32
                                mem[_6584 + (6 * ceil32(return_data.size)) + 128 len 32 * _6947] = mem[_6584 + (4 * ceil32(return_data.size)) + _6941 + 128 len 32 * _6947]
                                if 0 >= _6947:
                                    revert with 0, 50
                                if arg1 and mem[_6584 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6584 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[0]) / mem[_5088 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6673 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6719 = mem[_6673]
                                _6739 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6739]:
                                    revert with 0, 50
                                mem[_6739 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6739 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6739 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6739]:
                                    revert with 0, 50
                                mem[_6739 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6739 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6739 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6739 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6739 + (4 * ceil32(return_data.size)) + 100] = _6719
                                mem[_6739 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6739 + (4 * ceil32(return_data.size)) + 164] = mem[_6739]
                                idx = 0
                                u = _6739 + 32
                                v = _6739 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6739]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _6719, 64, mem[_6739 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6739]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_6739 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _6739 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6940 = mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32
                                require mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 <= test266151307()
                                require _6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 127 < _6739 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6946 = mem[_6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 96]
                                if mem[_6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _6739 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6739 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6739 + (4 * ceil32(return_data.size)) + mem[_6739 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6719) >> 32 + 96]) + 97
                                mem[_6739 + (6 * ceil32(return_data.size)) + 96] = _6946
                                require return_data.size >= _6940 + (32 * _6946) + 32
                                mem[_6739 + (6 * ceil32(return_data.size)) + 128 len 32 * _6946] = mem[_6739 + (4 * ceil32(return_data.size)) + _6940 + 128 len 32 * _6946]
                                if 0 >= _6946:
                                    revert with 0, 50
                                if arg1 and mem[_6739 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[0]) / _6366 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6739 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
    else:
        if not ext_call.return_data[31 len 1]:
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x18160ddd with:
                    gas gas_remaining wei
            mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_code.size(settingsAddress)
            staticcall settingsAddress.0xb8746e73 with:
                    gas gas_remaining wei
            mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
            require ext_code.size(address(ext_call.return_data[0]))
            staticcall address(ext_call.return_data[0]).0x313ce567 with:
                    gas gas_remaining wei
            mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] == ext_call.return_data[31 len 1]
            if not ext_call.return_data[31 len 1]:
                mem[(14 * ceil32(return_data.size)) + 96] = 2
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.usdc() with:
                        gas gas_remaining wei
                mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.dexRouter() with:
                        gas gas_remaining wei
                       args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                mem[64] = (19 * ceil32(return_data.size)) + 192
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                mem[(19 * ceil32(return_data.size)) + 196] = 1
                mem[(19 * ceil32(return_data.size)) + 228] = 64
                mem[(19 * ceil32(return_data.size)) + 260] = 2
                idx = 0
                s = (14 * ceil32(return_data.size)) + 128
                t = (19 * ceil32(return_data.size)) + 292
                while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                    mem[t] = mem[s + 12 len 20]
                    idx = idx + 1
                    s = s + 32
                    t = t + 32
                    continue 
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                        gas gas_remaining wei
                       args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                _1064 = mem[64]
                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                mem[64] = mem[64] + ceil32(return_data.size)
                require return_data.size >= 32
                _1087 = mem[_1064]
                require mem[_1064] <= test266151307()
                require _1064 + mem[_1064] + 31 < _1064 + return_data.size
                _1101 = mem[_1064 + mem[_1064]]
                if mem[_1064 + mem[_1064]] > test266151307():
                    revert with 0, 65
                if _1064 + ceil32(return_data.size) + ceil32(32 * mem[_1064 + mem[_1064]]) + 1 > test266151307() or ceil32(32 * mem[_1064 + mem[_1064]]) + 1 < 0:
                    revert with 0, 65
                mem[64] = _1064 + ceil32(return_data.size) + ceil32(32 * mem[_1064 + mem[_1064]]) + 1
                mem[_1064 + ceil32(return_data.size)] = _1101
                require return_data.size >= _1087 + (32 * _1101) + 32
                mem[_1064 + ceil32(return_data.size) + 32 len 32 * _1101] = mem[_1064 + _1087 + 32 len 32 * _1101]
                if 0 >= _1101:
                    revert with 0, 50
                _3154 = mem[_1064 + ceil32(return_data.size) + 32]
                if mem[_1064 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1064 + ceil32(return_data.size) + 32]:
                    revert with 0, 17
                if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                    revert with 0, 17
                if not mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                    revert with 0, 18
                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xcfe19c66 with:
                            gas gas_remaining wei
                    mem[mem[64]] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3274 = mem[64]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3290 = mem[_3274]
                    _3316 = mem[64]
                    mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[mem[64] + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 0 >= mem[_3316]:
                        revert with 0, 50
                    mem[_3316 + 32] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[_3316 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3316 + (2 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    if 1 >= mem[_3316]:
                        revert with 0, 50
                    mem[_3316 + 64] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                    mem[_3316 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = _3316 + (4 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[_3316 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[_3316 + (4 * ceil32(return_data.size)) + 100] = _3290
                    mem[_3316 + (4 * ceil32(return_data.size)) + 132] = 64
                    mem[_3316 + (4 * ceil32(return_data.size)) + 164] = mem[_3316]
                    idx = 0
                    s = _3316 + 32
                    t = _3316 + (4 * ceil32(return_data.size)) + 196
                    while idx < mem[_3316]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                            gas gas_remaining wei
                           args _3290, 64, mem[_3316 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3316]) + 32]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[_3316 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = _3316 + (6 * ceil32(return_data.size)) + 96
                    require return_data.size >= 32
                    _5113 = mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32
                    require mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 <= test266151307()
                    require _3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 127 < _3316 + (4 * ceil32(return_data.size)) + return_data.size + 96
                    _5139 = mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96]
                    if mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96] > test266151307():
                        revert with 0, 65
                    if _3316 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3316 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96]) + 97
                    mem[_3316 + (6 * ceil32(return_data.size)) + 96] = mem[_3316 + (4 * ceil32(return_data.size)) + mem[_3316 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3290) >> 32 + 96]
                    require return_data.size >= _5113 + (32 * _5139) + 32
                    mem[_3316 + (6 * ceil32(return_data.size)) + 128 len 32 * _5139] = mem[_3316 + (4 * ceil32(return_data.size)) + _5113 + 128 len 32 * _5139]
                    if 0 >= _5139:
                        revert with 0, 50
                    if arg1 and mem[_3316 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                        revert with 0, 17
                    if sub_535aa3bb < sub_bf0673d2:
                        revert with 0, 17
                    if arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]:
                        revert with 0, 17
                    if arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                        revert with 0, 17
                    if (arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                        revert with 0, 17
                    if (arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                        revert with 0, 17
                    mem[mem[64]] = (arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3316 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3282 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3299 = mem[_3282]
                        _3342 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3342]:
                            revert with 0, 50
                        mem[_3342 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3342 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3342 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3342]:
                            revert with 0, 50
                        mem[_3342 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3342 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3342 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3342 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3342 + (4 * ceil32(return_data.size)) + 100] = _3299
                        mem[_3342 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3342 + (4 * ceil32(return_data.size)) + 164] = mem[_3342]
                        idx = 0
                        s = _3342 + 32
                        t = _3342 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3342]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3342 + (4 * ceil32(return_data.size)) + (32 * mem[_3342]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5086 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5112 = mem[_5086]
                        require mem[_5086] <= test266151307()
                        require _5086 + mem[_5086] + 31 < _5086 + return_data.size
                        _5138 = mem[_5086 + mem[_5086]]
                        if mem[_5086 + mem[_5086]] > test266151307():
                            revert with 0, 65
                        if _5086 + ceil32(return_data.size) + ceil32(32 * mem[_5086 + mem[_5086]]) + 1 > test266151307() or ceil32(32 * mem[_5086 + mem[_5086]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5086 + ceil32(return_data.size) + ceil32(32 * mem[_5086 + mem[_5086]]) + 1
                        mem[_5086 + ceil32(return_data.size)] = _5138
                        require return_data.size >= _5112 + (32 * _5138) + 32
                        mem[_5086 + ceil32(return_data.size) + 32 len 32 * _5138] = mem[_5086 + _5112 + 32 len 32 * _5138]
                        if 0 >= _5138:
                            revert with 0, 50
                        if arg1 and mem[_5086 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_ac55eac2 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5086 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5086 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5086 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5086 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5086 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5086 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if sub_adb2dff9 < sub_583d4cc6:
                            revert with 0, 17
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                            revert with 0, 17
                        if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                            revert with 0, 17
                        if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                            revert with 0, 17
                        if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1064 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                            revert with 0, 17
                        if not sub_adb2dff9 - sub_583d4cc6:
                            revert with 0, 18
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3660 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3708 = mem[_3660]
                        _3761 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3761]:
                            revert with 0, 50
                        mem[_3761 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3761 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3761 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3761]:
                            revert with 0, 50
                        mem[_3761 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3761 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3761 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3761 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3761 + (4 * ceil32(return_data.size)) + 100] = _3708
                        mem[_3761 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3761 + (4 * ceil32(return_data.size)) + 164] = mem[_3761]
                        idx = 0
                        s = _3761 + 32
                        t = _3761 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3761]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _3708, 64, mem[_3761 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3761]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_3761 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _3761 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _5111 = mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32
                        require mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 <= test266151307()
                        require _3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 127 < _3761 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _5137 = mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96]
                        if mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _3761 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3761 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96]) + 97
                        mem[_3761 + (6 * ceil32(return_data.size)) + 96] = mem[_3761 + (4 * ceil32(return_data.size)) + mem[_3761 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3708) >> 32 + 96]
                        require return_data.size >= _5111 + (32 * _5137) + 32
                        mem[_3761 + (6 * ceil32(return_data.size)) + 128 len 32 * _5137] = mem[_3761 + (4 * ceil32(return_data.size)) + _5111 + 128 len 32 * _5137]
                        if 0 >= _5137:
                            revert with 0, 50
                        if arg1 and mem[_3761 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3154 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3761 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
            else:
                if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1063 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1086 = mem[_1063]
                    require mem[_1063] <= test266151307()
                    require _1063 + mem[_1063] + 31 < _1063 + return_data.size
                    _1100 = mem[_1063 + mem[_1063]]
                    if mem[_1063 + mem[_1063]] > test266151307():
                        revert with 0, 65
                    if _1063 + ceil32(return_data.size) + ceil32(32 * mem[_1063 + mem[_1063]]) + 1 > test266151307() or ceil32(32 * mem[_1063 + mem[_1063]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1063 + ceil32(return_data.size) + ceil32(32 * mem[_1063 + mem[_1063]]) + 1
                    mem[_1063 + ceil32(return_data.size)] = _1100
                    require return_data.size >= _1086 + (32 * _1100) + 32
                    mem[_1063 + ceil32(return_data.size) + 32 len 32 * _1100] = mem[_1063 + _1086 + 32 len 32 * _1100]
                    if 0 >= _1100:
                        revert with 0, 50
                    _3153 = mem[_1063 + ceil32(return_data.size) + 32]
                    if mem[_1063 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_1063 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3273 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3289 = mem[_3273]
                        _3313 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3313]:
                            revert with 0, 50
                        mem[_3313 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3313 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3313 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3313]:
                            revert with 0, 50
                        mem[_3313 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3313 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3313 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3313 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3313 + (4 * ceil32(return_data.size)) + 100] = _3289
                        mem[_3313 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3313 + (4 * ceil32(return_data.size)) + 164] = mem[_3313]
                        idx = 0
                        s = _3313 + 32
                        t = _3313 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3313]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3313 + (4 * ceil32(return_data.size)) + (32 * mem[_3313]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5084 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5110 = mem[_5084]
                        require mem[_5084] <= test266151307()
                        require _5084 + mem[_5084] + 31 < _5084 + return_data.size
                        _5136 = mem[_5084 + mem[_5084]]
                        if mem[_5084 + mem[_5084]] > test266151307():
                            revert with 0, 65
                        if _5084 + ceil32(return_data.size) + ceil32(32 * mem[_5084 + mem[_5084]]) + 1 > test266151307() or ceil32(32 * mem[_5084 + mem[_5084]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5084 + ceil32(return_data.size) + ceil32(32 * mem[_5084 + mem[_5084]]) + 1
                        mem[_5084 + ceil32(return_data.size)] = _5136
                        require return_data.size >= _5110 + (32 * _5136) + 32
                        mem[_5084 + ceil32(return_data.size) + 32 len 32 * _5136] = mem[_5084 + _5110 + 32 len 32 * _5136]
                        if 0 >= _5136:
                            revert with 0, 50
                        if arg1 and mem[_5084 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5084 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5084 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5084 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5084 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5084 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5084 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3281 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3298 = mem[_3281]
                            _3339 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3339]:
                                revert with 0, 50
                            mem[_3339 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3339 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3339 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3339]:
                                revert with 0, 50
                            mem[_3339 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3339 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3339 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3339 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3339 + (4 * ceil32(return_data.size)) + 100] = _3298
                            mem[_3339 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3339 + (4 * ceil32(return_data.size)) + 164] = mem[_3339]
                            idx = 0
                            s = _3339 + 32
                            t = _3339 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3339]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3339 + (4 * ceil32(return_data.size)) + (32 * mem[_3339]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5083 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5109 = mem[_5083]
                            require mem[_5083] <= test266151307()
                            require _5083 + mem[_5083] + 31 < _5083 + return_data.size
                            _5135 = mem[_5083 + mem[_5083]]
                            if mem[_5083 + mem[_5083]] > test266151307():
                                revert with 0, 65
                            if _5083 + ceil32(return_data.size) + ceil32(32 * mem[_5083 + mem[_5083]]) + 1 > test266151307() or ceil32(32 * mem[_5083 + mem[_5083]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5083 + ceil32(return_data.size) + ceil32(32 * mem[_5083 + mem[_5083]]) + 1
                            mem[_5083 + ceil32(return_data.size)] = _5135
                            require return_data.size >= _5109 + (32 * _5135) + 32
                            mem[_5083 + ceil32(return_data.size) + 32 len 32 * _5135] = mem[_5083 + _5109 + 32 len 32 * _5135]
                            if 0 >= _5135:
                                revert with 0, 50
                            if arg1 and mem[_5083 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5083 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5083 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5083 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5083 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5083 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5083 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1063 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3656 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3706 = mem[_3656]
                            _3757 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3757]:
                                revert with 0, 50
                            mem[_3757 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3757 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3757 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3757]:
                                revert with 0, 50
                            mem[_3757 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3757 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3757 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3757 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3757 + (4 * ceil32(return_data.size)) + 100] = _3706
                            mem[_3757 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3757 + (4 * ceil32(return_data.size)) + 164] = mem[_3757]
                            idx = 0
                            s = _3757 + 32
                            t = _3757 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3757]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3706, 64, mem[_3757 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3757]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3757 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3757 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5108 = mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32
                            require mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 <= test266151307()
                            require _3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 127 < _3757 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5134 = mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96]
                            if mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3757 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3757 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96]) + 97
                            mem[_3757 + (6 * ceil32(return_data.size)) + 96] = mem[_3757 + (4 * ceil32(return_data.size)) + mem[_3757 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3706) >> 32 + 96]
                            require return_data.size >= _5108 + (32 * _5134) + 32
                            mem[_3757 + (6 * ceil32(return_data.size)) + 128 len 32 * _5134] = mem[_3757 + (4 * ceil32(return_data.size)) + _5108 + 128 len 32 * _5134]
                            if 0 >= _5134:
                                revert with 0, 50
                            if arg1 and mem[_3757 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3153 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3757 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    s = 10
                    t = 1
                    idx = ext_call.return_data[31 len 1]
                    while idx > 1:
                        if s > -1 / s:
                            revert with 0, 17
                        if not bool(idx):
                            s = s * s
                            t = t
                            idx = uint255(idx) * 0.5
                            continue 
                        s = s * s
                        t = s * t
                        idx = uint255(idx) * 0.5
                        continue 
                    if t > -1 / s:
                        revert with 0, 17
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = s * t
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3166 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3180 = mem[_3166]
                    require mem[_3166] <= test266151307()
                    require _3166 + mem[_3166] + 31 < _3166 + return_data.size
                    _3190 = mem[_3166 + mem[_3166]]
                    if mem[_3166 + mem[_3166]] > test266151307():
                        revert with 0, 65
                    if _3166 + ceil32(return_data.size) + ceil32(32 * mem[_3166 + mem[_3166]]) + 1 > test266151307() or ceil32(32 * mem[_3166 + mem[_3166]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3166 + ceil32(return_data.size) + ceil32(32 * mem[_3166 + mem[_3166]]) + 1
                    mem[_3166 + ceil32(return_data.size)] = _3190
                    require return_data.size >= _3180 + (32 * _3190) + 32
                    mem[_3166 + ceil32(return_data.size) + 32 len 32 * _3190] = mem[_3166 + _3180 + 32 len 32 * _3190]
                    if 0 >= _3190:
                        revert with 0, 50
                    _5051 = mem[_3166 + ceil32(return_data.size) + 32]
                    if mem[_3166 + ceil32(return_data.size) + 32] and ext_call.return_data[0] > -1 / mem[_3166 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0] <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5292 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5308 = mem[_5292]
                        _5330 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5330]:
                            revert with 0, 50
                        mem[_5330 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5330 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5330 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5330]:
                            revert with 0, 50
                        mem[_5330 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5330 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5330 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5330 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5330 + (4 * ceil32(return_data.size)) + 100] = _5308
                        mem[_5330 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5330 + (4 * ceil32(return_data.size)) + 164] = mem[_5330]
                        idx = 0
                        s = _5330 + 32
                        t = _5330 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5330]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                gas gas_remaining wei
                               args _5308, 64, mem[_5330 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5330]) + 32]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[_5330 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = _5330 + (6 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        _6426 = mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32
                        require mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 <= test266151307()
                        require _5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 127 < _5330 + (4 * ceil32(return_data.size)) + return_data.size + 96
                        _6450 = mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96]
                        if mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96] > test266151307():
                            revert with 0, 65
                        if _5330 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5330 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96]) + 97
                        mem[_5330 + (6 * ceil32(return_data.size)) + 96] = mem[_5330 + (4 * ceil32(return_data.size)) + mem[_5330 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5308) >> 32 + 96]
                        require return_data.size >= _6426 + (32 * _6450) + 32
                        mem[_5330 + (6 * ceil32(return_data.size)) + 128 len 32 * _6450] = mem[_5330 + (4 * ceil32(return_data.size)) + _6426 + 128 len 32 * _6450]
                        if 0 >= _6450:
                            revert with 0, 50
                        if arg1 and mem[_5330 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]:
                            revert with 0, 17
                        if arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5330 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0] >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5300 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5316 = mem[_5300]
                            _5354 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5354]:
                                revert with 0, 50
                            mem[_5354 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5354 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5354 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5354]:
                                revert with 0, 50
                            mem[_5354 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5354 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5354 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5354 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5354 + (4 * ceil32(return_data.size)) + 100] = _5316
                            mem[_5354 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5354 + (4 * ceil32(return_data.size)) + 164] = mem[_5354]
                            idx = 0
                            s = _5354 + 32
                            t = _5354 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5354]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5354 + (4 * ceil32(return_data.size)) + (32 * mem[_5354]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6401 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6425 = mem[_6401]
                            require mem[_6401] <= test266151307()
                            require _6401 + mem[_6401] + 31 < _6401 + return_data.size
                            _6449 = mem[_6401 + mem[_6401]]
                            if mem[_6401 + mem[_6401]] > test266151307():
                                revert with 0, 65
                            if _6401 + ceil32(return_data.size) + ceil32(32 * mem[_6401 + mem[_6401]]) + 1 > test266151307() or ceil32(32 * mem[_6401 + mem[_6401]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6401 + ceil32(return_data.size) + ceil32(32 * mem[_6401 + mem[_6401]]) + 1
                            mem[_6401 + ceil32(return_data.size)] = _6449
                            require return_data.size >= _6425 + (32 * _6449) + 32
                            mem[_6401 + ceil32(return_data.size) + 32 len 32 * _6449] = mem[_6401 + _6425 + 32 len 32 * _6449]
                            if 0 >= _6449:
                                revert with 0, 50
                            if arg1 and mem[_6401 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6401 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6401 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6401 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6401 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6401 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6401 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0] < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0]:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0]) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3166 + ceil32(return_data.size) + 32] * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5552 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5625 = mem[_5552]
                            _5678 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5678]:
                                revert with 0, 50
                            mem[_5678 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5678 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5678 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5678]:
                                revert with 0, 50
                            mem[_5678 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5678 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5678 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5678 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5678 + (4 * ceil32(return_data.size)) + 100] = _5625
                            mem[_5678 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5678 + (4 * ceil32(return_data.size)) + 164] = mem[_5678]
                            idx = 0
                            s = _5678 + 32
                            t = _5678 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5678]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5678 + (4 * ceil32(return_data.size)) + (32 * mem[_5678]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6400 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6424 = mem[_6400]
                            require mem[_6400] <= test266151307()
                            require _6400 + mem[_6400] + 31 < _6400 + return_data.size
                            _6448 = mem[_6400 + mem[_6400]]
                            if mem[_6400 + mem[_6400]] > test266151307():
                                revert with 0, 65
                            if _6400 + ceil32(return_data.size) + ceil32(32 * mem[_6400 + mem[_6400]]) + 1 > test266151307() or ceil32(32 * mem[_6400 + mem[_6400]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6400 + ceil32(return_data.size) + ceil32(32 * mem[_6400 + mem[_6400]]) + 1
                            mem[_6400 + ceil32(return_data.size)] = _6448
                            require return_data.size >= _6424 + (32 * _6448) + 32
                            mem[_6400 + ceil32(return_data.size) + 32 len 32 * _6448] = mem[_6400 + _6424 + 32 len 32 * _6448]
                            if 0 >= _6448:
                                revert with 0, 50
                            if arg1 and mem[_6400 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6400 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6400 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6400 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6400 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6400 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5051 * ext_call.return_data[0] * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6400 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
        else:
            if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not 10^uint8(ext_call.return_data[0]):
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    s = (14 * ceil32(return_data.size)) + 128
                    t = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[t] = mem[s + 12 len 20]
                        idx = idx + 1
                        s = s + 32
                        t = t + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _1062 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _1085 = mem[_1062]
                    require mem[_1062] <= test266151307()
                    require _1062 + mem[_1062] + 31 < _1062 + return_data.size
                    _1099 = mem[_1062 + mem[_1062]]
                    if mem[_1062 + mem[_1062]] > test266151307():
                        revert with 0, 65
                    if _1062 + ceil32(return_data.size) + ceil32(32 * mem[_1062 + mem[_1062]]) + 1 > test266151307() or ceil32(32 * mem[_1062 + mem[_1062]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _1062 + ceil32(return_data.size) + ceil32(32 * mem[_1062 + mem[_1062]]) + 1
                    mem[_1062 + ceil32(return_data.size)] = _1099
                    require return_data.size >= _1085 + (32 * _1099) + 32
                    mem[_1062 + ceil32(return_data.size) + 32 len 32 * _1099] = mem[_1062 + _1085 + 32 len 32 * _1099]
                    if 0 >= _1099:
                        revert with 0, 50
                    _3151 = mem[_1062 + ceil32(return_data.size) + 32]
                    if mem[_1062 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1062 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3272 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3288 = mem[_3272]
                        _3310 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_3310]:
                            revert with 0, 50
                        mem[_3310 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_3310 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3310 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_3310]:
                            revert with 0, 50
                        mem[_3310 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_3310 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _3310 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_3310 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_3310 + (4 * ceil32(return_data.size)) + 100] = _3288
                        mem[_3310 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_3310 + (4 * ceil32(return_data.size)) + 164] = mem[_3310]
                        idx = 0
                        s = _3310 + 32
                        t = _3310 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_3310]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _3310 + (4 * ceil32(return_data.size)) + (32 * mem[_3310]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5081 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5107 = mem[_5081]
                        require mem[_5081] <= test266151307()
                        require _5081 + mem[_5081] + 31 < _5081 + return_data.size
                        _5133 = mem[_5081 + mem[_5081]]
                        if mem[_5081 + mem[_5081]] > test266151307():
                            revert with 0, 65
                        if _5081 + ceil32(return_data.size) + ceil32(32 * mem[_5081 + mem[_5081]]) + 1 > test266151307() or ceil32(32 * mem[_5081 + mem[_5081]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5081 + ceil32(return_data.size) + ceil32(32 * mem[_5081 + mem[_5081]]) + 1
                        mem[_5081 + ceil32(return_data.size)] = _5133
                        require return_data.size >= _5107 + (32 * _5133) + 32
                        mem[_5081 + ceil32(return_data.size) + 32 len 32 * _5133] = mem[_5081 + _5107 + 32 len 32 * _5133]
                        if 0 >= _5133:
                            revert with 0, 50
                        if arg1 and mem[_5081 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_5081 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5081 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_5081 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5081 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5081 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5081 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3280 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3297 = mem[_3280]
                            _3336 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3336]:
                                revert with 0, 50
                            mem[_3336 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3336 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3336 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3336]:
                                revert with 0, 50
                            mem[_3336 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3336 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3336 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3336 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3336 + (4 * ceil32(return_data.size)) + 100] = _3297
                            mem[_3336 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3336 + (4 * ceil32(return_data.size)) + 164] = mem[_3336]
                            idx = 0
                            s = _3336 + 32
                            t = _3336 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3336]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3297, 64, mem[_3336 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3336]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3336 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3336 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5106 = mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32
                            require mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 <= test266151307()
                            require _3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 127 < _3336 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5132 = mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 96]
                            if mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3336 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3336 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3336 + (4 * ceil32(return_data.size)) + mem[_3336 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3297) >> 32 + 96]) + 97
                            mem[_3336 + (6 * ceil32(return_data.size)) + 96] = _5132
                            require return_data.size >= _5106 + (32 * _5132) + 32
                            mem[_3336 + (6 * ceil32(return_data.size)) + 128 len 32 * _5132] = mem[_3336 + (4 * ceil32(return_data.size)) + _5106 + 128 len 32 * _5132]
                            if 0 >= _5132:
                                revert with 0, 50
                            if arg1 and mem[_3336 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3336 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1062 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3651 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3704 = mem[_3651]
                            _3750 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3750]:
                                revert with 0, 50
                            mem[_3750 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3750 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3750 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3750]:
                                revert with 0, 50
                            mem[_3750 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3750 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3750 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3750 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3750 + (4 * ceil32(return_data.size)) + 100] = _3704
                            mem[_3750 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3750 + (4 * ceil32(return_data.size)) + 164] = mem[_3750]
                            idx = 0
                            s = _3750 + 32
                            t = _3750 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3750]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _3704, 64, mem[_3750 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3750]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_3750 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _3750 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _5105 = mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32
                            require mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 <= test266151307()
                            require _3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 127 < _3750 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _5131 = mem[_3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 96]
                            if mem[_3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _3750 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _3750 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3750 + (4 * ceil32(return_data.size)) + mem[_3750 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3704) >> 32 + 96]) + 97
                            mem[_3750 + (6 * ceil32(return_data.size)) + 96] = _5131
                            require return_data.size >= _5105 + (32 * _5131) + 32
                            mem[_3750 + (6 * ceil32(return_data.size)) + 128 len 32 * _5131] = mem[_3750 + (4 * ceil32(return_data.size)) + _5105 + 128 len 32 * _5131]
                            if 0 >= _5131:
                                revert with 0, 50
                            if arg1 and mem[_3750 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3151 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3750 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _1061 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _1084 = mem[_1061]
                        require mem[_1061] <= test266151307()
                        require _1061 + mem[_1061] + 31 < _1061 + return_data.size
                        _1098 = mem[_1061 + mem[_1061]]
                        if mem[_1061 + mem[_1061]] > test266151307():
                            revert with 0, 65
                        if _1061 + ceil32(return_data.size) + ceil32(32 * mem[_1061 + mem[_1061]]) + 1 > test266151307() or ceil32(32 * mem[_1061 + mem[_1061]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _1061 + ceil32(return_data.size) + ceil32(32 * mem[_1061 + mem[_1061]]) + 1
                        mem[_1061 + ceil32(return_data.size)] = _1098
                        require return_data.size >= _1084 + (32 * _1098) + 32
                        mem[_1061 + ceil32(return_data.size) + 32 len 32 * _1098] = mem[_1061 + _1084 + 32 len 32 * _1098]
                        if 0 >= _1098:
                            revert with 0, 50
                        _3150 = mem[_1061 + ceil32(return_data.size) + 32]
                        if mem[_1061 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_1061 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _3271 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _3287 = mem[_3271]
                            _3307 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_3307]:
                                revert with 0, 50
                            mem[_3307 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_3307 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3307 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_3307]:
                                revert with 0, 50
                            mem[_3307 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_3307 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _3307 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_3307 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_3307 + (4 * ceil32(return_data.size)) + 100] = _3287
                            mem[_3307 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_3307 + (4 * ceil32(return_data.size)) + 164] = mem[_3307]
                            idx = 0
                            s = _3307 + 32
                            t = _3307 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_3307]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _3307 + (4 * ceil32(return_data.size)) + (32 * mem[_3307]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5078 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5104 = mem[_5078]
                            require mem[_5078] <= test266151307()
                            require _5078 + mem[_5078] + 31 < _5078 + return_data.size
                            _5130 = mem[_5078 + mem[_5078]]
                            if mem[_5078 + mem[_5078]] > test266151307():
                                revert with 0, 65
                            if _5078 + ceil32(return_data.size) + ceil32(32 * mem[_5078 + mem[_5078]]) + 1 > test266151307() or ceil32(32 * mem[_5078 + mem[_5078]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5078 + ceil32(return_data.size) + ceil32(32 * mem[_5078 + mem[_5078]]) + 1
                            mem[_5078 + ceil32(return_data.size)] = _5130
                            require return_data.size >= _5104 + (32 * _5130) + 32
                            mem[_5078 + ceil32(return_data.size) + 32 len 32 * _5130] = mem[_5078 + _5104 + 32 len 32 * _5130]
                            if 0 >= _5130:
                                revert with 0, 50
                            if arg1 and mem[_5078 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5078 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5078 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_5078 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_5078 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_5078 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_5078 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3279 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3296 = mem[_3279]
                                _3333 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3333]:
                                    revert with 0, 50
                                mem[_3333 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3333 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3333 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3333]:
                                    revert with 0, 50
                                mem[_3333 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3333 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3333 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3333 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3333 + (4 * ceil32(return_data.size)) + 100] = _3296
                                mem[_3333 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3333 + (4 * ceil32(return_data.size)) + 164] = mem[_3333]
                                idx = 0
                                s = _3333 + 32
                                t = _3333 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3333]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3296, 64, mem[_3333 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3333]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3333 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3333 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5103 = mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32
                                require mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 <= test266151307()
                                require _3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 127 < _3333 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5129 = mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 96]
                                if mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3333 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3333 + (4 * ceil32(return_data.size)) + mem[_3333 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3296) >> 32 + 96]) + 97
                                mem[_3333 + (6 * ceil32(return_data.size)) + 96] = _5129
                                require return_data.size >= _5103 + (32 * _5129) + 32
                                mem[_3333 + (6 * ceil32(return_data.size)) + 128 len 32 * _5129] = mem[_3333 + (4 * ceil32(return_data.size)) + _5103 + 128 len 32 * _5129]
                                if 0 >= _5129:
                                    revert with 0, 50
                                if arg1 and mem[_3333 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3333 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_1061 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _3647 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _3702 = mem[_3647]
                                _3746 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_3746]:
                                    revert with 0, 50
                                mem[_3746 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_3746 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3746 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_3746]:
                                    revert with 0, 50
                                mem[_3746 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_3746 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _3746 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_3746 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_3746 + (4 * ceil32(return_data.size)) + 100] = _3702
                                mem[_3746 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_3746 + (4 * ceil32(return_data.size)) + 164] = mem[_3746]
                                idx = 0
                                s = _3746 + 32
                                t = _3746 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_3746]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _3702, 64, mem[_3746 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_3746]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_3746 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _3746 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _5102 = mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32
                                require mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 <= test266151307()
                                require _3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 127 < _3746 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _5128 = mem[_3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 96]
                                if mem[_3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _3746 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _3746 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_3746 + (4 * ceil32(return_data.size)) + mem[_3746 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _3702) >> 32 + 96]) + 97
                                mem[_3746 + (6 * ceil32(return_data.size)) + 96] = _5128
                                require return_data.size >= _5102 + (32 * _5128) + 32
                                mem[_3746 + (6 * ceil32(return_data.size)) + 128 len 32 * _5128] = mem[_3746 + (4 * ceil32(return_data.size)) + _5102 + 128 len 32 * _5128]
                                if 0 >= _5128:
                                    revert with 0, 50
                                if arg1 and mem[_3746 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _3150 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_3746 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        s = 10
                        t = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if s > -1 / s:
                                revert with 0, 17
                            if not bool(idx):
                                s = s * s
                                t = t
                                idx = uint255(idx) * 0.5
                                continue 
                            s = s * s
                            t = s * t
                            idx = uint255(idx) * 0.5
                            continue 
                        if t > -1 / s:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = s * t
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        s = (14 * ceil32(return_data.size)) + 128
                        t = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3165 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3179 = mem[_3165]
                        require mem[_3165] <= test266151307()
                        require _3165 + mem[_3165] + 31 < _3165 + return_data.size
                        _3189 = mem[_3165 + mem[_3165]]
                        if mem[_3165 + mem[_3165]] > test266151307():
                            revert with 0, 65
                        if _3165 + ceil32(return_data.size) + ceil32(32 * mem[_3165 + mem[_3165]]) + 1 > test266151307() or ceil32(32 * mem[_3165 + mem[_3165]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3165 + ceil32(return_data.size) + ceil32(32 * mem[_3165 + mem[_3165]]) + 1
                        mem[_3165 + ceil32(return_data.size)] = _3189
                        require return_data.size >= _3179 + (32 * _3189) + 32
                        mem[_3165 + ceil32(return_data.size) + 32 len 32 * _3189] = mem[_3165 + _3179 + 32 len 32 * _3189]
                        if 0 >= _3189:
                            revert with 0, 50
                        _5044 = mem[_3165 + ceil32(return_data.size) + 32]
                        if mem[_3165 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) > -1 / mem[_3165 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5291 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5307 = mem[_5291]
                            _5327 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5327]:
                                revert with 0, 50
                            mem[_5327 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5327 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5327 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5327]:
                                revert with 0, 50
                            mem[_5327 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5327 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5327 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5327 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5327 + (4 * ceil32(return_data.size)) + 100] = _5307
                            mem[_5327 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5327 + (4 * ceil32(return_data.size)) + 164] = mem[_5327]
                            idx = 0
                            s = _5327 + 32
                            t = _5327 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5327]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5307, 64, mem[_5327 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5327]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5327 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5327 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6423 = mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32
                            require mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 <= test266151307()
                            require _5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 127 < _5327 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6447 = mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96]
                            if mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5327 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5327 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96]) + 97
                            mem[_5327 + (6 * ceil32(return_data.size)) + 96] = mem[_5327 + (4 * ceil32(return_data.size)) + mem[_5327 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5307) >> 32 + 96]
                            require return_data.size >= _6423 + (32 * _6447) + 32
                            mem[_5327 + (6 * ceil32(return_data.size)) + 128 len 32 * _6447] = mem[_5327 + (4 * ceil32(return_data.size)) + _6423 + 128 len 32 * _6447]
                            if 0 >= _6447:
                                revert with 0, 50
                            if arg1 and mem[_5327 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5327 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5299 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5315 = mem[_5299]
                                _5351 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5351]:
                                    revert with 0, 50
                                mem[_5351 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5351 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5351 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5351]:
                                    revert with 0, 50
                                mem[_5351 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5351 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5351 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5351 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5351 + (4 * ceil32(return_data.size)) + 100] = _5315
                                mem[_5351 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5351 + (4 * ceil32(return_data.size)) + 164] = mem[_5351]
                                idx = 0
                                s = _5351 + 32
                                t = _5351 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5351]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5315, 64, mem[_5351 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5351]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5351 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5351 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6422 = mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32
                                require mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 <= test266151307()
                                require _5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 127 < _5351 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6446 = mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96]
                                if mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5351 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5351 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96]) + 97
                                mem[_5351 + (6 * ceil32(return_data.size)) + 96] = mem[_5351 + (4 * ceil32(return_data.size)) + mem[_5351 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5315) >> 32 + 96]
                                require return_data.size >= _6422 + (32 * _6446) + 32
                                mem[_5351 + (6 * ceil32(return_data.size)) + 128 len 32 * _6446] = mem[_5351 + (4 * ceil32(return_data.size)) + _6422 + 128 len 32 * _6446]
                                if 0 >= _6446:
                                    revert with 0, 50
                                if arg1 and mem[_5351 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5351 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]):
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0])) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3165 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5548 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5617 = mem[_5548]
                                _5674 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5674]:
                                    revert with 0, 50
                                mem[_5674 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5674 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5674 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5674]:
                                    revert with 0, 50
                                mem[_5674 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5674 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5674 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5674 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5674 + (4 * ceil32(return_data.size)) + 100] = _5617
                                mem[_5674 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5674 + (4 * ceil32(return_data.size)) + 164] = mem[_5674]
                                idx = 0
                                s = _5674 + 32
                                t = _5674 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5674]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5617, 64, mem[_5674 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5674]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5674 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5674 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6421 = mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32
                                require mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 <= test266151307()
                                require _5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 127 < _5674 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6445 = mem[_5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 96]
                                if mem[_5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5674 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5674 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5674 + (4 * ceil32(return_data.size)) + mem[_5674 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5617) >> 32 + 96]) + 97
                                mem[_5674 + (6 * ceil32(return_data.size)) + 96] = _6445
                                require return_data.size >= _6421 + (32 * _6445) + 32
                                mem[_5674 + (6 * ceil32(return_data.size)) + 128 len 32 * _6445] = mem[_5674 + (4 * ceil32(return_data.size)) + _6421 + 128 len 32 * _6445]
                                if 0 >= _6445:
                                    revert with 0, 50
                                if arg1 and mem[_5674 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5044 * ext_call.return_data[0] / 10^uint8(ext_call.return_data[0]) * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5674 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
            else:
                s = 10
                t = 1
                idx = ext_call.return_data[31 len 1]
                while idx > 1:
                    if s > -1 / s:
                        revert with 0, 17
                    if not bool(idx):
                        s = s * s
                        t = t
                        idx = uint255(idx) * 0.5
                        continue 
                    s = s * s
                    t = s * t
                    idx = uint255(idx) * 0.5
                    continue 
                if t > -1 / s:
                    revert with 0, 17
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(10 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x18160ddd with:
                        gas gas_remaining wei
                mem[(11 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                if not s * t:
                    revert with 0, 18
                require ext_code.size(settingsAddress)
                staticcall settingsAddress.0xb8746e73 with:
                        gas gas_remaining wei
                mem[(12 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                require ext_code.size(address(ext_call.return_data[0]))
                staticcall address(ext_call.return_data[0]).0x313ce567 with:
                        gas gas_remaining wei
                mem[(13 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] == ext_call.return_data[31 len 1]
                if not ext_call.return_data[31 len 1]:
                    mem[(14 * ceil32(return_data.size)) + 96] = 2
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.usdc() with:
                            gas gas_remaining wei
                    mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.0xb8746e73 with:
                            gas gas_remaining wei
                    mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                    mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                    require ext_code.size(settingsAddress)
                    staticcall settingsAddress.dexRouter() with:
                            gas gas_remaining wei
                           args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                    mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    mem[64] = (19 * ceil32(return_data.size)) + 192
                    require return_data.size >= 32
                    require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                    mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                    mem[(19 * ceil32(return_data.size)) + 196] = 1
                    mem[(19 * ceil32(return_data.size)) + 228] = 64
                    mem[(19 * ceil32(return_data.size)) + 260] = 2
                    idx = 0
                    u = (14 * ceil32(return_data.size)) + 128
                    v = (19 * ceil32(return_data.size)) + 292
                    while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                        mem[v] = mem[u + 12 len 20]
                        idx = idx + 1
                        u = u + 32
                        v = v + 32
                        continue 
                    require ext_code.size(address(ext_call.return_data[0]))
                    staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                            gas gas_remaining wei
                           args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    _3164 = mem[64]
                    mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                    mem[64] = mem[64] + ceil32(return_data.size)
                    require return_data.size >= 32
                    _3178 = mem[_3164]
                    require mem[_3164] <= test266151307()
                    require _3164 + mem[_3164] + 31 < _3164 + return_data.size
                    _3188 = mem[_3164 + mem[_3164]]
                    if mem[_3164 + mem[_3164]] > test266151307():
                        revert with 0, 65
                    if _3164 + ceil32(return_data.size) + ceil32(32 * mem[_3164 + mem[_3164]]) + 1 > test266151307() or ceil32(32 * mem[_3164 + mem[_3164]]) + 1 < 0:
                        revert with 0, 65
                    mem[64] = _3164 + ceil32(return_data.size) + ceil32(32 * mem[_3164 + mem[_3164]]) + 1
                    mem[_3164 + ceil32(return_data.size)] = _3188
                    require return_data.size >= _3178 + (32 * _3188) + 32
                    mem[_3164 + ceil32(return_data.size) + 32 len 32 * _3188] = mem[_3164 + _3178 + 32 len 32 * _3188]
                    if 0 >= _3188:
                        revert with 0, 50
                    _5043 = mem[_3164 + ceil32(return_data.size) + 32]
                    if mem[_3164 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3164 + ceil32(return_data.size) + 32]:
                        revert with 0, 17
                    if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                        revert with 0, 17
                    if not mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                        revert with 0, 18
                    if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xcfe19c66 with:
                                gas gas_remaining wei
                        mem[mem[64]] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5290 = mem[64]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5306 = mem[_5290]
                        _5324 = mem[64]
                        mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[mem[64] + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 0 >= mem[_5324]:
                            revert with 0, 50
                        mem[_5324 + 32] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[_5324 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5324 + (2 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        if 1 >= mem[_5324]:
                            revert with 0, 50
                        mem[_5324 + 64] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                        mem[_5324 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = _5324 + (4 * ceil32(return_data.size)) + 96
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[_5324 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[_5324 + (4 * ceil32(return_data.size)) + 100] = _5306
                        mem[_5324 + (4 * ceil32(return_data.size)) + 132] = 64
                        mem[_5324 + (4 * ceil32(return_data.size)) + 164] = mem[_5324]
                        idx = 0
                        s = _5324 + 32
                        t = _5324 + (4 * ceil32(return_data.size)) + 196
                        while idx < mem[_5324]:
                            mem[t] = mem[s + 12 len 20]
                            idx = idx + 1
                            s = s + 32
                            t = t + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len _5324 + (4 * ceil32(return_data.size)) + (32 * mem[_5324]) + -mem[64] + 192]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _6396 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _6420 = mem[_6396]
                        require mem[_6396] <= test266151307()
                        require _6396 + mem[_6396] + 31 < _6396 + return_data.size
                        _6444 = mem[_6396 + mem[_6396]]
                        if mem[_6396 + mem[_6396]] > test266151307():
                            revert with 0, 65
                        if _6396 + ceil32(return_data.size) + ceil32(32 * mem[_6396 + mem[_6396]]) + 1 > test266151307() or ceil32(32 * mem[_6396 + mem[_6396]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _6396 + ceil32(return_data.size) + ceil32(32 * mem[_6396 + mem[_6396]]) + 1
                        mem[_6396 + ceil32(return_data.size)] = _6444
                        require return_data.size >= _6420 + (32 * _6444) + 32
                        mem[_6396 + ceil32(return_data.size) + 32 len 32 * _6444] = mem[_6396 + _6420 + 32 len 32 * _6444]
                        if 0 >= _6444:
                            revert with 0, 50
                        if arg1 and mem[_6396 + ceil32(return_data.size) + 32] > -1 / arg1:
                            revert with 0, 17
                        if sub_535aa3bb < sub_bf0673d2:
                            revert with 0, 17
                        if arg1 * mem[_6396 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6396 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if arg1 * mem[_6396 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000:
                            revert with 0, 17
                        if (arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000):
                            revert with 0, 17
                        if (arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6396 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                            revert with 0, 17
                        mem[mem[64]] = (arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6396 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6396 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5298 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5314 = mem[_5298]
                            _5348 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5348]:
                                revert with 0, 50
                            mem[_5348 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5348 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5348 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5348]:
                                revert with 0, 50
                            mem[_5348 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5348 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5348 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5348 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5348 + (4 * ceil32(return_data.size)) + 100] = _5314
                            mem[_5348 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5348 + (4 * ceil32(return_data.size)) + 164] = mem[_5348]
                            idx = 0
                            s = _5348 + 32
                            t = _5348 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5348]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _5348 + (4 * ceil32(return_data.size)) + (32 * mem[_5348]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6395 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6419 = mem[_6395]
                            require mem[_6395] <= test266151307()
                            require _6395 + mem[_6395] + 31 < _6395 + return_data.size
                            _6443 = mem[_6395 + mem[_6395]]
                            if mem[_6395 + mem[_6395]] > test266151307():
                                revert with 0, 65
                            if _6395 + ceil32(return_data.size) + ceil32(32 * mem[_6395 + mem[_6395]]) + 1 > test266151307() or ceil32(32 * mem[_6395 + mem[_6395]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6395 + ceil32(return_data.size) + ceil32(32 * mem[_6395 + mem[_6395]]) + 1
                            mem[_6395 + ceil32(return_data.size)] = _6443
                            require return_data.size >= _6419 + (32 * _6443) + 32
                            mem[_6395 + ceil32(return_data.size) + 32 len 32 * _6443] = mem[_6395 + _6419 + 32 len 32 * _6443]
                            if 0 >= _6443:
                                revert with 0, 50
                            if arg1 and mem[_6395 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_ac55eac2 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6395 + ceil32(return_data.size) + 32] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6395 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6395 + ceil32(return_data.size) + 32] < (sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6395 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6395 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6395 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if sub_adb2dff9 < sub_583d4cc6:
                                revert with 0, 17
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                revert with 0, 17
                            if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                revert with 0, 17
                            if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                revert with 0, 17
                            if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3164 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                revert with 0, 17
                            if not sub_adb2dff9 - sub_583d4cc6:
                                revert with 0, 18
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5544 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5615 = mem[_5544]
                            _5670 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5670]:
                                revert with 0, 50
                            mem[_5670 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5670 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5670 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5670]:
                                revert with 0, 50
                            mem[_5670 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5670 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5670 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5670 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5670 + (4 * ceil32(return_data.size)) + 100] = _5615
                            mem[_5670 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5670 + (4 * ceil32(return_data.size)) + 164] = mem[_5670]
                            idx = 0
                            u = _5670 + 32
                            v = _5670 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5670]:
                                mem[v] = mem[u + 12 len 20]
                                idx = idx + 1
                                u = u + 32
                                v = v + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5615, 64, mem[_5670 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5670]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5670 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5670 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6418 = mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32
                            require mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 <= test266151307()
                            require _5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 127 < _5670 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6442 = mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96]
                            if mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5670 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5670 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96]) + 97
                            mem[_5670 + (6 * ceil32(return_data.size)) + 96] = mem[_5670 + (4 * ceil32(return_data.size)) + mem[_5670 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5615) >> 32 + 96]
                            require return_data.size >= _6418 + (32 * _6442) + 32
                            mem[_5670 + (6 * ceil32(return_data.size)) + 128 len 32 * _6442] = mem[_5670 + (4 * ceil32(return_data.size)) + _6418 + 128 len 32 * _6442]
                            if 0 >= _6442:
                                revert with 0, 50
                            if arg1 and mem[_5670 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5043 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5670 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                else:
                    if bool(bool(ext_call.return_data[31 len 1] < 78)) or bool(bool(ext_call.return_data[31 len 1] < 32)):
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = 10^uint8(ext_call.return_data[0])
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _3163 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _3177 = mem[_3163]
                        require mem[_3163] <= test266151307()
                        require _3163 + mem[_3163] + 31 < _3163 + return_data.size
                        _3187 = mem[_3163 + mem[_3163]]
                        if mem[_3163 + mem[_3163]] > test266151307():
                            revert with 0, 65
                        if _3163 + ceil32(return_data.size) + ceil32(32 * mem[_3163 + mem[_3163]]) + 1 > test266151307() or ceil32(32 * mem[_3163 + mem[_3163]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _3163 + ceil32(return_data.size) + ceil32(32 * mem[_3163 + mem[_3163]]) + 1
                        mem[_3163 + ceil32(return_data.size)] = _3187
                        require return_data.size >= _3177 + (32 * _3187) + 32
                        mem[_3163 + ceil32(return_data.size) + 32 len 32 * _3187] = mem[_3163 + _3177 + 32 len 32 * _3187]
                        if 0 >= _3187:
                            revert with 0, 50
                        _5042 = mem[_3163 + ceil32(return_data.size) + 32]
                        if mem[_3163 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_3163 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _5289 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _5305 = mem[_5289]
                            _5321 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_5321]:
                                revert with 0, 50
                            mem[_5321 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_5321 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5321 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_5321]:
                                revert with 0, 50
                            mem[_5321 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_5321 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _5321 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_5321 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_5321 + (4 * ceil32(return_data.size)) + 100] = _5305
                            mem[_5321 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_5321 + (4 * ceil32(return_data.size)) + 164] = mem[_5321]
                            idx = 0
                            s = _5321 + 32
                            t = _5321 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_5321]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                    gas gas_remaining wei
                                   args _5305, 64, mem[_5321 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5321]) + 32]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[_5321 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = _5321 + (6 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            _6417 = mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32
                            require mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 <= test266151307()
                            require _5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 127 < _5321 + (4 * ceil32(return_data.size)) + return_data.size + 96
                            _6441 = mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96]
                            if mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96] > test266151307():
                                revert with 0, 65
                            if _5321 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _5321 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96]) + 97
                            mem[_5321 + (6 * ceil32(return_data.size)) + 96] = mem[_5321 + (4 * ceil32(return_data.size)) + mem[_5321 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5305) >> 32 + 96]
                            require return_data.size >= _6417 + (32 * _6441) + 32
                            mem[_5321 + (6 * ceil32(return_data.size)) + 128 len 32 * _6441] = mem[_5321 + (4 * ceil32(return_data.size)) + _6417 + 128 len 32 * _6441]
                            if 0 >= _6441:
                                revert with 0, 50
                            if arg1 and mem[_5321 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]:
                                revert with 0, 17
                            if arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128] < (sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5321 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5297 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5313 = mem[_5297]
                                _5345 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5345]:
                                    revert with 0, 50
                                mem[_5345 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5345 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5345 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5345]:
                                    revert with 0, 50
                                mem[_5345 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5345 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5345 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5345 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5345 + (4 * ceil32(return_data.size)) + 100] = _5313
                                mem[_5345 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5345 + (4 * ceil32(return_data.size)) + 164] = mem[_5345]
                                idx = 0
                                s = _5345 + 32
                                t = _5345 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5345]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _5313, 64, mem[_5345 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_5345]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_5345 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _5345 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6416 = mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32
                                require mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 <= test266151307()
                                require _5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 127 < _5345 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6440 = mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96]
                                if mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _5345 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _5345 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96]) + 97
                                mem[_5345 + (6 * ceil32(return_data.size)) + 96] = mem[_5345 + (4 * ceil32(return_data.size)) + mem[_5345 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _5313) >> 32 + 96]
                                require return_data.size >= _6416 + (32 * _6440) + 32
                                mem[_5345 + (6 * ceil32(return_data.size)) + 128 len 32 * _6440] = mem[_5345 + (4 * ceil32(return_data.size)) + _6416 + 128 len 32 * _6440]
                                if 0 >= _6440:
                                    revert with 0, 50
                                if arg1 and mem[_5345 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_5345 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_3163 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _5540 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _5613 = mem[_5540]
                                _5666 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_5666]:
                                    revert with 0, 50
                                mem[_5666 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_5666 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5666 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_5666]:
                                    revert with 0, 50
                                mem[_5666 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_5666 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _5666 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_5666 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_5666 + (4 * ceil32(return_data.size)) + 100] = _5613
                                mem[_5666 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_5666 + (4 * ceil32(return_data.size)) + 164] = mem[_5666]
                                idx = 0
                                u = _5666 + 32
                                v = _5666 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_5666]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _5666 + (4 * ceil32(return_data.size)) + (32 * mem[_5666]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6391 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6415 = mem[_6391]
                                require mem[_6391] <= test266151307()
                                require _6391 + mem[_6391] + 31 < _6391 + return_data.size
                                _6439 = mem[_6391 + mem[_6391]]
                                if mem[_6391 + mem[_6391]] > test266151307():
                                    revert with 0, 65
                                if _6391 + ceil32(return_data.size) + ceil32(32 * mem[_6391 + mem[_6391]]) + 1 > test266151307() or ceil32(32 * mem[_6391 + mem[_6391]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6391 + ceil32(return_data.size) + ceil32(32 * mem[_6391 + mem[_6391]]) + 1
                                mem[_6391 + ceil32(return_data.size)] = _6439
                                require return_data.size >= _6415 + (32 * _6439) + 32
                                mem[_6391 + ceil32(return_data.size) + 32 len 32 * _6439] = mem[_6391 + _6415 + 32 len 32 * _6439]
                                if 0 >= _6439:
                                    revert with 0, 50
                                if arg1 and mem[_6391 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6391 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6391 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6391 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6391 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6391 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _5042 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6391 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                    else:
                        u = 10
                        v = 1
                        idx = ext_call.return_data[31 len 1]
                        while idx > 1:
                            if u > -1 / u:
                                revert with 0, 17
                            if not bool(idx):
                                u = u * u
                                v = v
                                idx = uint255(idx) * 0.5
                                continue 
                            u = u * u
                            v = u * v
                            idx = uint255(idx) * 0.5
                            continue 
                        if v > -1 / u:
                            revert with 0, 17
                        mem[(14 * ceil32(return_data.size)) + 96] = 2
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.usdc() with:
                                gas gas_remaining wei
                        mem[(14 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 128] = ext_call.return_data[12 len 20]
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.0xb8746e73 with:
                                gas gas_remaining wei
                        mem[(15 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(14 * ceil32(return_data.size)) + 160] = ext_call.return_data[12 len 20]
                        mem[(17 * ceil32(return_data.size)) + 192] = 0x758d92400000000000000000000000000000000000000000000000000000000
                        require ext_code.size(settingsAddress)
                        staticcall settingsAddress.dexRouter() with:
                                gas gas_remaining wei
                               args mem[(17 * ceil32(return_data.size)) + 196 len 4 * ceil32(return_data.size)]
                        mem[(17 * ceil32(return_data.size)) + 192] = ext_call.return_data[0]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        mem[64] = (19 * ceil32(return_data.size)) + 192
                        require return_data.size >= 32
                        require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                        mem[(19 * ceil32(return_data.size)) + 192] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                        mem[(19 * ceil32(return_data.size)) + 196] = u * v
                        mem[(19 * ceil32(return_data.size)) + 228] = 64
                        mem[(19 * ceil32(return_data.size)) + 260] = 2
                        idx = 0
                        u = (14 * ceil32(return_data.size)) + 128
                        v = (19 * ceil32(return_data.size)) + 292
                        while idx < mem[(14 * ceil32(return_data.size)) + 96]:
                            mem[v] = mem[u + 12 len 20]
                            idx = idx + 1
                            u = u + 32
                            v = v + 32
                            continue 
                        require ext_code.size(address(ext_call.return_data[0]))
                        staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                gas gas_remaining wei
                               args mem[mem[64] + 4 len (19 * ceil32(return_data.size)) + -mem[64] + 352]
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        _5075 = mem[64]
                        mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                        mem[64] = mem[64] + ceil32(return_data.size)
                        require return_data.size >= 32
                        _5101 = mem[_5075]
                        require mem[_5075] <= test266151307()
                        require _5075 + mem[_5075] + 31 < _5075 + return_data.size
                        _5127 = mem[_5075 + mem[_5075]]
                        if mem[_5075 + mem[_5075]] > test266151307():
                            revert with 0, 65
                        if _5075 + ceil32(return_data.size) + ceil32(32 * mem[_5075 + mem[_5075]]) + 1 > test266151307() or ceil32(32 * mem[_5075 + mem[_5075]]) + 1 < 0:
                            revert with 0, 65
                        mem[64] = _5075 + ceil32(return_data.size) + ceil32(32 * mem[_5075 + mem[_5075]]) + 1
                        mem[_5075 + ceil32(return_data.size)] = _5127
                        require return_data.size >= _5101 + (32 * _5127) + 32
                        mem[_5075 + ceil32(return_data.size) + 32 len 32 * _5127] = mem[_5075 + _5101 + 32 len 32 * _5127]
                        if 0 >= _5127:
                            revert with 0, 50
                        _6341 = mem[_5075 + ceil32(return_data.size) + 32]
                        if mem[_5075 + ceil32(return_data.size) + 32] and ext_call.return_data[0] / s * t > -1 / mem[_5075 + ceil32(return_data.size) + 32]:
                            revert with 0, 17
                        if Mask(112, 0, ext_call.return_data[32]) > 0x68db8bac710cb295e9e1b089a027525460aa64c2f837b4a2339c0ebedfa43:
                            revert with 0, 17
                        if not mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                            revert with 0, 18
                        if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t <= sub_583d4cc6:
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xcfe19c66 with:
                                    gas gas_remaining wei
                            mem[mem[64]] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6567 = mem[64]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6571 = mem[_6567]
                            _6575 = mem[64]
                            mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.usdc() with:
                                    gas gas_remaining wei
                            mem[mem[64] + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 0 >= mem[_6575]:
                                revert with 0, 50
                            mem[_6575 + 32] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.0xb8746e73 with:
                                    gas gas_remaining wei
                            mem[_6575 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6575 + (2 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            if 1 >= mem[_6575]:
                                revert with 0, 50
                            mem[_6575 + 64] = ext_call.return_data[12 len 20]
                            require ext_code.size(settingsAddress)
                            staticcall settingsAddress.dexRouter() with:
                                    gas gas_remaining wei
                            mem[_6575 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            mem[64] = _6575 + (4 * ceil32(return_data.size)) + 96
                            require return_data.size >= 32
                            require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                            mem[_6575 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                            mem[_6575 + (4 * ceil32(return_data.size)) + 100] = _6571
                            mem[_6575 + (4 * ceil32(return_data.size)) + 132] = 64
                            mem[_6575 + (4 * ceil32(return_data.size)) + 164] = mem[_6575]
                            idx = 0
                            s = _6575 + 32
                            t = _6575 + (4 * ceil32(return_data.size)) + 196
                            while idx < mem[_6575]:
                                mem[t] = mem[s + 12 len 20]
                                idx = idx + 1
                                s = s + 32
                                t = t + 32
                                continue 
                            require ext_code.size(address(ext_call.return_data[0]))
                            staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                    gas gas_remaining wei
                                   args mem[mem[64] + 4 len _6575 + (4 * ceil32(return_data.size)) + (32 * mem[_6575]) + -mem[64] + 192]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            _6933 = mem[64]
                            mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                            mem[64] = mem[64] + ceil32(return_data.size)
                            require return_data.size >= 32
                            _6939 = mem[_6933]
                            require mem[_6933] <= test266151307()
                            require _6933 + mem[_6933] + 31 < _6933 + return_data.size
                            _6945 = mem[_6933 + mem[_6933]]
                            if mem[_6933 + mem[_6933]] > test266151307():
                                revert with 0, 65
                            if _6933 + ceil32(return_data.size) + ceil32(32 * mem[_6933 + mem[_6933]]) + 1 > test266151307() or ceil32(32 * mem[_6933 + mem[_6933]]) + 1 < 0:
                                revert with 0, 65
                            mem[64] = _6933 + ceil32(return_data.size) + ceil32(32 * mem[_6933 + mem[_6933]]) + 1
                            mem[_6933 + ceil32(return_data.size)] = _6945
                            require return_data.size >= _6939 + (32 * _6945) + 32
                            mem[_6933 + ceil32(return_data.size) + 32 len 32 * _6945] = mem[_6933 + _6939 + 32 len 32 * _6945]
                            if 0 >= _6945:
                                revert with 0, 50
                            if arg1 and mem[_6933 + ceil32(return_data.size) + 32] > -1 / arg1:
                                revert with 0, 17
                            if sub_535aa3bb < sub_bf0673d2:
                                revert with 0, 17
                            if arg1 * mem[_6933 + ceil32(return_data.size) + 32] and sub_535aa3bb - sub_bf0673d2 > -1 / arg1 * mem[_6933 + ceil32(return_data.size) + 32]:
                                revert with 0, 17
                            if arg1 * mem[_6933 + ceil32(return_data.size) + 32] < (sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000:
                                revert with 0, 17
                            if (arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000):
                                revert with 0, 17
                            if (arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6933 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                revert with 0, 17
                            mem[mem[64]] = (arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6933 + ceil32(return_data.size) + 32] * sub_fbc097d4) - ((sub_535aa3bb * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6933 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
                        else:
                            if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t >= sub_adb2dff9:
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6569 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6573 = mem[_6569]
                                _6581 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6581]:
                                    revert with 0, 50
                                mem[_6581 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6581 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6581 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6581]:
                                    revert with 0, 50
                                mem[_6581 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6581 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6581 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6581 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6581 + (4 * ceil32(return_data.size)) + 100] = _6573
                                mem[_6581 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6581 + (4 * ceil32(return_data.size)) + 164] = mem[_6581]
                                idx = 0
                                s = _6581 + 32
                                t = _6581 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6581]:
                                    mem[t] = mem[s + 12 len 20]
                                    idx = idx + 1
                                    s = s + 32
                                    t = t + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).getAmountsIn(uint256 arg1, address[] arg2) with:
                                        gas gas_remaining wei
                                       args _6573, 64, mem[_6581 + (4 * ceil32(return_data.size)) + 164 len (32 * mem[_6581]) + 32]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[_6581 + (4 * ceil32(return_data.size)) + 96 len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = _6581 + (6 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                _6938 = mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32
                                require mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 <= test266151307()
                                require _6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 127 < _6581 + (4 * ceil32(return_data.size)) + return_data.size + 96
                                _6944 = mem[_6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 96]
                                if mem[_6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 96] > test266151307():
                                    revert with 0, 65
                                if _6581 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 96]) + 97 > test266151307() or ceil32(32 * mem[_6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 96]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6581 + (6 * ceil32(return_data.size)) + ceil32(32 * mem[_6581 + (4 * ceil32(return_data.size)) + mem[_6581 + (4 * ceil32(return_data.size)) + 96 len 4], Mask(224, 32, _6573) >> 32 + 96]) + 97
                                mem[_6581 + (6 * ceil32(return_data.size)) + 96] = _6944
                                require return_data.size >= _6938 + (32 * _6944) + 32
                                mem[_6581 + (6 * ceil32(return_data.size)) + 128 len 32 * _6944] = mem[_6581 + (4 * ceil32(return_data.size)) + _6938 + 128 len 32 * _6944]
                                if 0 >= _6944:
                                    revert with 0, 50
                                if arg1 and mem[_6581 + (6 * ceil32(return_data.size)) + 128] > -1 / arg1:
                                    revert with 0, 17
                                if sub_ac55eac2 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128] and sub_ac55eac2 - sub_bf0673d2 > -1 / arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]:
                                    revert with 0, 17
                                if arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128] < (sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000) < (arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000) - ((arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128] * sub_fbc097d4) - ((sub_ac55eac2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) - (sub_bf0673d2 * arg1 * mem[_6581 + (6 * ceil32(return_data.size)) + 128]) / 10000 * sub_fbc097d4) / 10000)
                            else:
                                if sub_adb2dff9 < sub_583d4cc6:
                                    revert with 0, 17
                                if 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t < sub_583d4cc6:
                                    revert with 0, 17
                                if sub_ac55eac2 and (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) - sub_583d4cc6 > -1 / sub_ac55eac2:
                                    revert with 0, 17
                                if sub_adb2dff9 < 10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t:
                                    revert with 0, 17
                                if sub_535aa3bb and sub_adb2dff9 - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t) > -1 / sub_535aa3bb:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_535aa3bb) > !((10000 * Mask(112, 0, ext_call.return_data[32]) / mem[_5075 + ceil32(return_data.size) + 32] * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2)):
                                    revert with 0, 17
                                if not sub_adb2dff9 - sub_583d4cc6:
                                    revert with 0, 18
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xcfe19c66 with:
                                        gas gas_remaining wei
                                mem[mem[64]] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6669 = mem[64]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6705 = mem[_6669]
                                _6735 = mem[64]
                                mem[mem[64] + 32 len 64] = call.data[calldata.size len 64]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.usdc() with:
                                        gas gas_remaining wei
                                mem[mem[64] + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 0 >= mem[_6735]:
                                    revert with 0, 50
                                mem[_6735 + 32] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.0xb8746e73 with:
                                        gas gas_remaining wei
                                mem[_6735 + ceil32(return_data.size) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6735 + (2 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                if 1 >= mem[_6735]:
                                    revert with 0, 50
                                mem[_6735 + 64] = ext_call.return_data[12 len 20]
                                require ext_code.size(settingsAddress)
                                staticcall settingsAddress.dexRouter() with:
                                        gas gas_remaining wei
                                mem[_6735 + (2 * ceil32(return_data.size)) + 96] = ext_call.return_data[0]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                mem[64] = _6735 + (4 * ceil32(return_data.size)) + 96
                                require return_data.size >= 32
                                require ext_call.return_data[0] == ext_call.return_data[12 len 20]
                                mem[_6735 + (4 * ceil32(return_data.size)) + 96] = 0x1f00ca7400000000000000000000000000000000000000000000000000000000
                                mem[_6735 + (4 * ceil32(return_data.size)) + 100] = _6705
                                mem[_6735 + (4 * ceil32(return_data.size)) + 132] = 64
                                mem[_6735 + (4 * ceil32(return_data.size)) + 164] = mem[_6735]
                                idx = 0
                                u = _6735 + 32
                                v = _6735 + (4 * ceil32(return_data.size)) + 196
                                while idx < mem[_6735]:
                                    mem[v] = mem[u + 12 len 20]
                                    idx = idx + 1
                                    u = u + 32
                                    v = v + 32
                                    continue 
                                require ext_code.size(address(ext_call.return_data[0]))
                                staticcall address(ext_call.return_data[0]).mem[mem[64] len 4] with:
                                        gas gas_remaining wei
                                       args mem[mem[64] + 4 len _6735 + (4 * ceil32(return_data.size)) + (32 * mem[_6735]) + -mem[64] + 192]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                _6931 = mem[64]
                                mem[mem[64] len return_data.size] = ext_call.return_data[0 len return_data.size]
                                mem[64] = mem[64] + ceil32(return_data.size)
                                require return_data.size >= 32
                                _6937 = mem[_6931]
                                require mem[_6931] <= test266151307()
                                require _6931 + mem[_6931] + 31 < _6931 + return_data.size
                                _6943 = mem[_6931 + mem[_6931]]
                                if mem[_6931 + mem[_6931]] > test266151307():
                                    revert with 0, 65
                                if _6931 + ceil32(return_data.size) + ceil32(32 * mem[_6931 + mem[_6931]]) + 1 > test266151307() or ceil32(32 * mem[_6931 + mem[_6931]]) + 1 < 0:
                                    revert with 0, 65
                                mem[64] = _6931 + ceil32(return_data.size) + ceil32(32 * mem[_6931 + mem[_6931]]) + 1
                                mem[_6931 + ceil32(return_data.size)] = _6943
                                require return_data.size >= _6937 + (32 * _6943) + 32
                                mem[_6931 + ceil32(return_data.size) + 32 len 32 * _6943] = mem[_6931 + _6937 + 32 len 32 * _6943]
                                if 0 >= _6943:
                                    revert with 0, 50
                                if arg1 and mem[_6931 + ceil32(return_data.size) + 32] > -1 / arg1:
                                    revert with 0, 17
                                if (sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 < sub_bf0673d2:
                                    revert with 0, 17
                                if arg1 * mem[_6931 + ceil32(return_data.size) + 32] and ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6) - sub_bf0673d2 > -1 / arg1 * mem[_6931 + ceil32(return_data.size) + 32]:
                                    revert with 0, 17
                                if arg1 * mem[_6931 + ceil32(return_data.size) + 32] < ((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000:
                                    revert with 0, 17
                                if (arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000) and sub_fbc097d4 > -1 / (arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000):
                                    revert with 0, 17
                                if (arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000) < (arg1 * mem[_6931 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000:
                                    revert with 0, 17
                                mem[mem[64]] = (arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000) - ((arg1 * mem[_6931 + ceil32(return_data.size) + 32] * sub_fbc097d4) - (((sub_adb2dff9 * sub_535aa3bb) - (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_535aa3bb) + (10000 * Mask(112, 0, ext_call.return_data[32]) / _6341 * ext_call.return_data[0] / s * t * sub_ac55eac2) - (sub_583d4cc6 * sub_ac55eac2) / sub_adb2dff9 - sub_583d4cc6 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) - (sub_bf0673d2 * arg1 * mem[_6931 + ceil32(return_data.size) + 32]) / 10000 * sub_fbc097d4) / 10000)
    return memory
      from mem[64]
       len 32
}



}
