contract main {




// =====================  Runtime code  =====================


#
#  - sub_29df86c1(?)
#  - safeBatchTransferFrom(address arg1, address arg2, uint256[] arg3, uint256[] arg4, bytes arg5)
#  - initialize()
#  - claimById(uint256 arg1)
#
mapping of uint256 balanceOf;
mapping of uint8 stor102;
array of struct stor103;
address owner;
uint256 stor201;
uint8 isPresaleActive;
uint8 sub_a82f0131; offset 8
uint8 sub_11a93db1; offset 16
address managerAddress; offset 24
uint256 stor251; offset 16
uint256 stor251; offset 8
address pairAddress;
address sub_85adc8b0Address;
address swapAddress;
uint256 stor255;
uint256 stor256;
uint256 stor257;
uint256 stor258;
uint256 sub_f468fba8;
array of struct stor260;
mapping of struct stor261;
array of uint256 sub_627dd5ca;
mapping of uint8 stor263;
array of struct stor34396799265723567300338619826663514857069533239785953290296875790754157623998;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157623999;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624000;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624001;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624002;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624003;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624004;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624005;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624006;
array of uint256 stor34396799265723567300338619826663514857069533239785953290296875790754157624007;

function balanceOf(address arg1, uint256 arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
    return balanceOf[arg2][address(arg1)]
}

function sub_06551ca5(?) {
    return bool(isPresaleActive)
}

function sub_11a93db1(?) {
    return bool(sub_11a93db1)
}

function manager() {
    return managerAddress
}

function isPresaleActive() {
    return bool(isPresaleActive)
}

function sub_627dd5ca(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == arg2
    require arg2 < sub_627dd5ca[arg1]
    return sub_627dd5ca[arg1][arg2]
}

function swapAddress() {
    return swapAddress
}

function sub_85adc8b0(?) {
    return sub_85adc8b0Address
}

function owner() {
    return owner
}

function sub_a82f0131(?) {
    return bool(sub_a82f0131)
}

function pairAddress() {
    return pairAddress
}

function isApprovedForAll(address arg1, address arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    return bool(stor102[address(arg1)][address(arg2)])
}

function sub_f468fba8(?) {
    return sub_f468fba8
}

function blacklist(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    return bool(stor263[arg1])
}

function _fallback() payable {
    revert
}

function renounceOwnership() {
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    owner = 0
    emit OwnershipTransferred(owner, 0);
}

function sub_83ec06b0(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor257 = arg1
}

function sub_7fd1dc67(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    sub_f468fba8 = arg1
}

function setManager(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    managerAddress = arg1
}

function setPresaleActive(bool arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    isPresaleActive = uint8(arg1)
}

function sub_3a687869(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(248, 0, stor251.field_8) = Mask(248, 0, bool(arg1))
}

function sub_af5119b6(?) {
    require calldata.size - 4 >= 32
    require arg1 == bool(arg1)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    Mask(240, 0, stor251.field_16) = Mask(240, 0, bool(arg1))
}

function setBlacklisted(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor263[address(arg1)] = uint8(arg2)
}

function swapTokensForAVAX(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(swapAddress)
    call swapAddress.0xef28fd9c with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function transferOwnership(address arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if not arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
    owner = arg1
    emit OwnershipTransferred(owner, arg1);
}

function withdraw() {
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if managerAddress != msg.sender:
        revert with 0, 'only manager can call withdraw'
    call managerAddress with:
       value eth.balance(this.address) wei
         gas gas_remaining wei
    if not ext_call.success:
        revert with 0, 'Failed to send AVAX'
    stor201 = 1
}

function setApprovalForAll(address arg1, bool arg2) {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if msg.sender == arg1:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: setting approval status for self'
    stor102[address(msg.sender)][address(arg1)] = uint8(arg2)
    emit ApprovalForAll(arg2, msg.sender, arg1);
}

function sub_15889446(?) {
    require calldata.size - 4 >= 96
    require arg1 == address(arg1)
    require arg2 == address(arg2)
    require arg3 == address(arg3)
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if address(arg1):
        pairAddress = address(arg1)
    if address(arg2):
        sub_85adc8b0Address = address(arg2)
    if address(arg3):
        swapAddress = address(arg3)
}

function supportsInterface(bytes4 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == Mask(32, 224, arg1)
    if 0xd9b67a2600000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    if 0xe89341c00000000000000000000000000000000000000000000000000000000 == Mask(32, 224, arg1):
        return True
    return (Mask(32, 224, arg1) == 0x1ffc9a700000000000000000000000000000000000000000000000000000000)
}

function sub_3ca21b7c(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if arg1 >= stor260.length:
        revert with 0, 50
    if not stor260[arg1].field_768:
        revert with 0, 18
    if not 10^9 / stor260[arg1].field_768 % 10:
        return (10^9 / stor260[arg1].field_768 / 10)
    if 10 > !(10^9 / stor260[arg1].field_768):
        revert with 0, 17
    if (10^9 / stor260[arg1].field_768) + 10 < 10^9 / stor260[arg1].field_768 % 10:
        revert with 0, 17
    return ((10^9 / stor260[arg1].field_768) + -(10^9 / stor260[arg1].field_768 % 10) + 10 / 10)
}

function sub_4d593bc5(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, arg1
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor201 = 1
}

function sub_ee98a528(?) {
    require calldata.size - 4 >= 64
    require arg1 == address(arg1)
    require arg2 == arg2
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if stor261[stor262[address(arg1)][idx]].field_256 != arg2:
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    return s
}

function sub_221b1ce8(?) {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 == arg5
    if arg3 <= arg5:
        if arg4 and arg1 > -1 / arg4:
            revert with 0, 17
        return (arg4 * arg1)
    if arg3 < arg5:
        revert with 0, 17
    if arg3 < arg4:
        revert with 0, 17
    if arg3 - arg4 >= arg5:
        if arg2 and arg4 > -1 / arg2:
            revert with 0, 17
        return (arg2 * arg4)
    if arg3 < arg4:
        revert with 0, 17
    if arg5 < arg3 - arg4:
        revert with 0, 17
    if arg5 - arg3 + arg4 and arg1 > -1 / arg5 - arg3 + arg4:
        revert with 0, 17
    if arg2 and arg3 - arg5 > -1 / arg2:
        revert with 0, 17
    if (arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) > !((arg3 * arg2) - (arg5 * arg2)):
        revert with 0, 17
    return ((arg5 * arg1) - (arg3 * arg1) + (arg4 * arg1) + (arg3 * arg2) - (arg5 * arg2))
}

function sub_185aa308(?) {
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        return (10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14])
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    return (10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14])
}

function sub_32295c84(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    idx = 0
    s = 0
    while idx < stor260.length:
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 101)
        if balanceOf[idx][address(arg1)] <= 0:
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            s = s
            continue 
        if idx >= stor260.length:
            revert with 0, 50
        if stor260[idx].field_1792 and stor260[idx].field_256 > -1 / stor260[idx].field_1792:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if not address(arg1):
            revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC1155: balance query for the zero address'
        mem[0] = address(arg1)
        mem[32] = sha3(idx, 101)
        if balanceOf[idx][address(arg1)] and stor260[idx].field_1792 * stor260[idx].field_256 / stor255 > -1 / balanceOf[idx][address(arg1)]:
            revert with 0, 17
        if s > !(balanceOf[idx][address(arg1)] * stor260[idx].field_1792 * stor260[idx].field_256 / stor255):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        s = s + (balanceOf[idx][address(arg1)] * stor260[idx].field_1792 * stor260[idx].field_256 / stor255)
        continue 
    return s
}

function sub_8955a0e6(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if arg1 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / arg1:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        return (arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if arg1 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / arg1:
        revert with 0, 17
    if arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
        revert with 0, 17
    return (arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_533f0e74(?) {
    require calldata.size - 4 >= 352
    require arg1 == arg1
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg2.length)) + 97 > test266151307() or ceil32(ceil32(arg2.length)) + 97 < 96:
        revert with 0, 65
    require arg2 + arg2.length + 36 <= calldata.size
    require arg3 == arg3
    require arg4 == arg4
    require arg5 == arg5
    require arg6 == arg6
    require arg7 == arg7
    require arg8 == arg8
    require arg9 == arg9
    require arg10 == arg10
    require arg11 == arg11
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if arg1 >= stor260.length:
        revert with 0, 50
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_1) < 32:
            revert with 0, 34
        if arg2.length:
            stor260[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor260[arg1].field_0 = 0
            idx = 0
            while uint255(stor260[arg1].field_1) + 31 / 32 > idx:
                stor260[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if arg2.length:
            stor260[arg1][].field_0 = Array(len=arg2.length, data=arg2[all])
        else:
            stor260[arg1].field_0 = 0
            idx = 0
            while stor260[arg1].field_1 % 128 + 31 / 32 > idx:
                stor260[(10 * arg1) + idx].field_0 = 0
                idx = idx + 1
                continue 
    stor260[arg1].field_256 = arg3
    stor260[arg1].field_512 = arg4
    stor260[arg1].field_768 = arg5
    stor260[arg1].field_1024 = arg6
    stor260[arg1].field_1280 = arg7
    stor260[arg1].field_1536 = arg8
    stor260[arg1].field_1792 = arg9
    stor260[arg1].field_2048 = arg10
    stor260[arg1].field_2304 = arg11
}

function sub_48980647(?) {
    require calldata.size - 4 >= 320
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg1.length)) + 97 > test266151307() or ceil32(ceil32(arg1.length)) + 97 < 96:
        revert with 0, 65
    require arg1 + arg1.length + 36 <= calldata.size
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 == arg5
    require arg6 == arg6
    require arg7 == arg7
    require arg8 == arg8
    require arg9 == arg9
    require arg10 == arg10
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    stor260.length++
    if bool(stor4C0B[stor260.length].field_0):
        if bool(stor4C0B[stor260.length].field_0) == uint255(stor4C0B[stor260.length].field_1) < 32:
            revert with 0, 34
        if arg1.length:
            stor[sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)][] = Array(len=arg1.length, data=arg1[all])
        else:
            stor4C0B[stor260.length].field_0 = 0
            idx = 0
            while uint255(stor4C0B[stor260.length].field_1) + 31 / 32 > idx:
                stor[idx + sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)] = 0
                idx = idx + 1
                continue 
    else:
        if bool(stor4C0B[stor260.length].field_0) == stor4C0B[stor260.length].field_1 % 128 < 32:
            revert with 0, 34
        if arg1.length:
            stor[sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)][] = Array(len=arg1.length, data=arg1[all])
        else:
            stor4C0B[stor260.length].field_0 = 0
            idx = 0
            while stor4C0B[stor260.length].field_1 % 128 + 31 / 32 > idx:
                stor[idx + sha3((10 * stor260.length) + 0x4c0be60200faa20559308cb7b5a1bb3255c16cb1cab91f525b5ae7a03d02fabe)] = 0
                idx = idx + 1
                continue 
    stor4C0B[stor260.length] = arg2
    stor4C0B[stor260.length] = arg3
    stor4C0B[stor260.length] = arg4
    stor4C0B[stor260.length] = arg5
    stor4C0B[stor260.length] = arg6
    stor4C0B[stor260.length] = arg7
    stor4C0B[stor260.length] = arg8
    stor4C0B[stor260.length] = arg9
    stor4C0B[stor260.length] = arg10
}

function balanceOfBatch(address[] arg1, uint256[] arg2) {
    require calldata.size - 4 >= 64
    require arg1 <= test266151307()
    require arg1 + 35 < calldata.size
    if arg1.length > test266151307():
        revert with 0, 65
    if floor32(arg1.length) + 97 > test266151307() or floor32(arg1.length) + 97 < 96:
        revert with 0, 65
    mem[96] = arg1.length
    require arg1 + (32 * arg1.length) + 36 <= calldata.size
    idx = 0
    s = arg1 + 36
    t = 128
    while idx < arg1.length:
        require cd[s] == address(cd[s])
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    require arg2 <= test266151307()
    require arg2 + 35 < calldata.size
    if arg2.length > test266151307():
        revert with 0, 65
    if floor32(arg1.length) + floor32(arg2.length) + 98 > test266151307() or floor32(arg2.length) + 98 < 97:
        revert with 0, 65
    mem[floor32(arg1.length) + 97] = arg2.length
    require arg2 + (32 * arg2.length) + 36 <= calldata.size
    idx = 0
    s = arg2 + 36
    t = floor32(arg1.length) + 129
    while idx < arg2.length:
        require cd[s] == cd[s]
        mem[t] = cd[s]
        idx = idx + 1
        s = s + 32
        t = t + 32
        continue 
    if arg1.length != arg2.length:
        revert with 0, 'ERC1155: accounts and ids length mismatch'
    if arg1.length > test266151307():
        revert with 0, 65
    mem[floor32(arg1.length) + floor32(arg2.length) + 98] = arg1.length
    if arg1.length:
        mem[floor32(arg1.length) + floor32(arg2.length) + 130 len 32 * arg1.length] = call.data[calldata.size len 32 * arg1.length]
    idx = 0
    while idx < arg1.length:
        if idx >= arg1.length:
            revert with 0, 50
        if idx >= arg2.length:
            revert with 0, 50
        if not mem[(32 * idx) + 140 len 20]:
            revert with 0, 'ERC1155: balance query for the zero address'
        mem[0] = mem[(32 * idx) + 140 len 20]
        mem[32] = sha3(mem[(32 * idx) + floor32(arg1.length) + 129], 101)
        if idx >= arg1.length:
            revert with 0, 50
        mem[(32 * idx) + floor32(arg1.length) + floor32(arg2.length) + 130] = balanceOf[mem[(32 * idx) + floor32(arg1.length) + 129]][address(mem[(32 * idx) + 128])]
        if idx == -1:
            revert with 0, 17
        idx = idx + 1
        continue 
    return Array(len=arg1.length, data=mem[floor32(arg1.length) + floor32(arg2.length) + 130 len 32 * arg1.length])
}

function sub_9600ac5b(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
            revert with 0, 34
        if bool(stor261[arg1].field_1536):
            if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
                revert with 0, 34
            if uint255(stor261[arg1].field_1537):
                if 31 >= uint255(stor261[arg1].field_1537):
                    mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[128] = stor261[arg1][6].field_0
                    idx = 128
                    s = 0
                    while uint255(stor261[arg1].field_1537) + 96 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor261[arg1].field_1537 % 128:
                if 31 >= stor261[arg1].field_1537 % 128:
                    mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[128] = stor261[arg1][6].field_0
                    idx = 128
                    s = 0
                    while stor261[arg1].field_1537 % 128 + 96 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return address(stor261[arg1].field_0), 
               stor261[arg1].field_256,
               stor261[arg1].field_512,
               stor261[arg1].field_768,
               stor261[arg1].field_1024,
               stor261[arg1].field_1280,
               Array(len=2 * Mask(256, -1, uint255(stor261[arg1].field_1537)), data=mem[128 len ceil32(uint255(stor261[arg1].field_1537))])
    if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
            revert with 0, 34
        if uint255(stor261[arg1].field_1537):
            if 31 >= uint255(stor261[arg1].field_1537):
                mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[128] = stor261[arg1][6].field_0
                idx = 128
                s = 0
                while uint255(stor261[arg1].field_1537) + 96 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor261[arg1].field_1537 % 128:
            if 31 >= stor261[arg1].field_1537 % 128:
                mem[128] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[128] = stor261[arg1][6].field_0
                idx = 128
                s = 0
                while stor261[arg1].field_1537 % 128 + 96 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return address(stor261[arg1].field_0), 
           stor261[arg1].field_256,
           stor261[arg1].field_512,
           stor261[arg1].field_768,
           stor261[arg1].field_1024,
           stor261[arg1].field_1280,
           Array(len=stor261[arg1].field_1536 % 128, data=mem[128 len ceil32(stor261[arg1].field_1537 % 128)])
}

function sub_80c0f19b(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
            revert with 0, 34
        if bool(stor261[arg1].field_1536):
            if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
                revert with 0, 34
            if uint255(stor261[arg1].field_1537):
                if 31 >= uint255(stor261[arg1].field_1537):
                    mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[576] = stor261[arg1][6].field_0
                    idx = 576
                    s = 0
                    while uint255(stor261[arg1].field_1537) + 544 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
                revert with 0, 34
            if stor261[arg1].field_1537 % 128:
                if 31 >= stor261[arg1].field_1537 % 128:
                    mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
                else:
                    mem[576] = stor261[arg1][6].field_0
                    idx = 576
                    s = 0
                    while stor261[arg1].field_1537 % 128 + 544 > idx:
                        mem[idx + 32] = stor261[arg1][s + 6].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return 32, address(stor261[arg1].field_0), 
               stor261[arg1].field_256,
               stor261[arg1].field_512,
               stor261[arg1].field_768,
               stor261[arg1].field_1024,
               stor261[arg1].field_1280,
               224,
               2 * Mask(256, -1, uint255(stor261[arg1].field_1537)),
               mem[576 len ceil32(uint255(stor261[arg1].field_1537))]
    if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
        revert with 0, 34
    if bool(stor261[arg1].field_1536):
        if bool(stor261[arg1].field_1536) == uint255(stor261[arg1].field_1537) < 32:
            revert with 0, 34
        if uint255(stor261[arg1].field_1537):
            if 31 >= uint255(stor261[arg1].field_1537):
                mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[576] = stor261[arg1][6].field_0
                idx = 576
                s = 0
                while uint255(stor261[arg1].field_1537) + 544 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor261[arg1].field_1536) == stor261[arg1].field_1537 % 128 < 32:
            revert with 0, 34
        if stor261[arg1].field_1537 % 128:
            if 31 >= stor261[arg1].field_1537 % 128:
                mem[576] = 256 * Mask(248, 0, stor261[arg1].field_1544)
            else:
                mem[576] = stor261[arg1][6].field_0
                idx = 576
                s = 0
                while stor261[arg1].field_1537 % 128 + 544 > idx:
                    mem[idx + 32] = stor261[arg1][s + 6].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return 32, address(stor261[arg1].field_0), 
           stor261[arg1].field_256,
           stor261[arg1].field_512,
           stor261[arg1].field_768,
           stor261[arg1].field_1024,
           stor261[arg1].field_1280,
           224,
           stor261[arg1].field_1536 % 128,
           mem[576 len ceil32(stor261[arg1].field_1537 % 128)]
}

function collection(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    require arg1 < stor260.length
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_1) < 32:
            revert with 0, 34
        if bool(stor260[arg1].field_0):
            if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_1) < 32:
                revert with 0, 34
            if uint255(stor260[arg1].field_1):
                if 31 >= uint255(stor260[arg1].field_1):
                    mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
                else:
                    mem[128] = stor260[arg1].field_0
                    idx = 128
                    s = 0
                    while uint255(stor260[arg1].field_1) + 96 > idx:
                        mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        else:
            if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
                revert with 0, 34
            if stor260[arg1].field_1 % 128:
                if 31 >= stor260[arg1].field_1 % 128:
                    mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
                else:
                    mem[128] = stor260[arg1].field_0
                    idx = 128
                    s = 0
                    while stor260[arg1].field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
        return Array(len=2 * Mask(256, -1, uint255(stor260[arg1].field_1)), data=mem[128 len ceil32(uint255(stor260[arg1].field_1))]), 
               stor260[arg1].field_256,
               stor260[arg1].field_512,
               stor260[arg1].field_768,
               stor260[arg1].field_1024,
               stor260[arg1].field_1280,
               stor260[arg1].field_1536,
               stor260[arg1].field_1792,
               stor260[arg1].field_2048,
               stor260[arg1].field_2304
    if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor260[arg1].field_0):
        if bool(stor260[arg1].field_0) == uint255(stor260[arg1].field_1) < 32:
            revert with 0, 34
        if uint255(stor260[arg1].field_1):
            if 31 >= uint255(stor260[arg1].field_1):
                mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
            else:
                mem[128] = stor260[arg1].field_0
                idx = 128
                s = 0
                while uint255(stor260[arg1].field_1) + 96 > idx:
                    mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    else:
        if bool(stor260[arg1].field_0) == stor260[arg1].field_1 % 128 < 32:
            revert with 0, 34
        if stor260[arg1].field_1 % 128:
            if 31 >= stor260[arg1].field_1 % 128:
                mem[128] = 256 * Mask(248, 0, stor260[arg1].field_8)
            else:
                mem[128] = stor260[arg1].field_0
                idx = 128
                s = 0
                while stor260[arg1].field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor260[(10 * arg1) + s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
    return Array(len=stor260[arg1].field_0 % 128, data=mem[128 len ceil32(stor260[arg1].field_1 % 128)]), 
           stor260[arg1].field_256,
           stor260[arg1].field_512,
           stor260[arg1].field_768,
           stor260[arg1].field_1024,
           stor260[arg1].field_1280,
           stor260[arg1].field_1536,
           stor260[arg1].field_1792,
           stor260[arg1].field_2048,
           stor260[arg1].field_2304
}

function uri(uint256 arg1) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if bool(stor103.length):
        if bool(stor103.length) == uint255(stor103.length.field_1) < 32:
            revert with 0, 34
        if bool(stor103.length):
            if bool(stor103.length) == uint255(stor103.length.field_1) < 32:
                revert with 0, 34
            if uint255(stor103.length.field_1):
                if 31 < uint255(stor103.length.field_1):
                    mem[128] = uint256(stor103.field_0)
                    idx = 128
                    s = 0
                    while uint255(stor103.length.field_1) + 96 > idx:
                        mem[idx + 32] = stor103[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor103.length.field_1)), data=mem[128 len ceil32(uint255(stor103.length.field_1))]), 
                mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
        else:
            if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
                revert with 0, 34
            if stor103.length.field_1 % 128:
                if 31 < stor103.length.field_1 % 128:
                    mem[128] = uint256(stor103.field_0)
                    idx = 128
                    s = 0
                    while stor103.length.field_1 % 128 + 96 > idx:
                        mem[idx + 32] = stor103[s].field_256
                        idx = idx + 32
                        s = s + 1
                        continue 
                    return Array(len=2 * Mask(256, -1, uint255(stor103.length.field_1)), data=mem[128 len ceil32(uint255(stor103.length.field_1))]), 
                mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
        mem[ceil32(uint255(stor103.length.field_1)) + 192 len ceil32(uint255(stor103.length.field_1))] = mem[128 len ceil32(uint255(stor103.length.field_1))]
        if ceil32(uint255(stor103.length.field_1)) > uint255(stor103.length.field_1):
            mem[ceil32(uint255(stor103.length.field_1)) + uint255(stor103.length.field_1) + 192] = 0
        return Array(len=2 * Mask(256, -1, uint255(stor103.length.field_1)), data=mem[128 len ceil32(uint255(stor103.length.field_1))], mem[(2 * ceil32(uint255(stor103.length.field_1))) + 192 len 2 * ceil32(uint255(stor103.length.field_1))]), 
    if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
        revert with 0, 34
    if bool(stor103.length):
        if bool(stor103.length) == uint255(stor103.length.field_1) < 32:
            revert with 0, 34
        if uint255(stor103.length.field_1):
            if 31 < uint255(stor103.length.field_1):
                mem[128] = uint256(stor103.field_0)
                idx = 128
                s = 0
                while uint255(stor103.length.field_1) + 96 > idx:
                    mem[idx + 32] = stor103[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
    else:
        if bool(stor103.length) == stor103.length.field_1 % 128 < 32:
            revert with 0, 34
        if stor103.length.field_1 % 128:
            if 31 < stor103.length.field_1 % 128:
                mem[128] = uint256(stor103.field_0)
                idx = 128
                s = 0
                while stor103.length.field_1 % 128 + 96 > idx:
                    mem[idx + 32] = stor103[s].field_256
                    idx = idx + 32
                    s = s + 1
                    continue 
                return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)])
            mem[128] = 256 * Mask(248, 0, stor103.length.field_8)
    mem[ceil32(stor103.length.field_1 % 128) + 192 len ceil32(stor103.length.field_1 % 128)] = mem[128 len ceil32(stor103.length.field_1 % 128)]
    if ceil32(stor103.length.field_1 % 128) > stor103.length.field_1 % 128:
        mem[ceil32(stor103.length.field_1 % 128) + stor103.length.field_1 % 128 + 192] = 0
    return Array(len=stor103.length % 128, data=mem[128 len ceil32(stor103.length.field_1 % 128)], mem[(2 * ceil32(stor103.length.field_1 % 128)) + 192 len 2 * ceil32(stor103.length.field_1 % 128)]), 
}

function sub_c7821813(?) {
    require calldata.size - 4 >= 192
    require cd[4] == address(cd[4])
    require cd[36] == cd[36]
    require cd[68] == cd[68]
    require cd[100] == cd[100]
    require cd[132] == cd[132]
    require cd[164] <= test266151307()
    require cd[164] + 35 < calldata.size
    require ('cd', 164).length <= test266151307()
    require cd[164] + ('cd', 164).length + 36 <= calldata.size
    if owner != msg.sender:
        revert with 0, 'Ownable: caller is not the owner'
    if cd[36] >= stor260.length:
        revert with 0, 50
    if stor260[cd[36]].field_2048 > stor260[cd[36]].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'all of this collection are purchased'
    if cd[36] >= stor260.length:
        revert with 0, 50
    if stor260[cd[36]].field_2048 > !cd[68]:
        revert with 0, 17
    if stor260[cd[36]].field_2048 + cd[68] > stor260[cd[36]].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'there is not enought nodes to sell'
    if cd[36] >= stor260.length:
        revert with 0, 50
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != cd[36]:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s >= stor260[cd[36]].field_2304:
        revert with 0, 'minted nodes exceed amount limit'
    if cd[36] >= stor260.length:
        revert with 0, 50
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != cd[36]:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s > !cd[68]:
        revert with 0, 17
    if s + cd[68] >= stor260[cd[36]].field_2304:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'you will exceed nodes amount limit'
    if not address(cd[4]):
        revert with 0, 'ERC1155: mint to the zero address'
    mem[64] = 256
    if balanceOf[cd[36]][address(cd[4])] > !cd[68]:
        revert with 0, 17
    balanceOf[cd[36]][address(cd[4])] += cd[68]
    emit TransferSingle(cd[36], cd[68], msg.sender, 0, address(cd[4]));
    if ext_code.size(address(cd[4])):
        require ext_code.size(address(cd[4]))
        call address(cd[4]).onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, cd[36], cd[68], 160, 0
        if not ext_call.success:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        mem[64] = ceil32(return_data.size) + 256
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
    if cd[100]:
        idx = 0
        while idx < cd[68]:
            if 1 > !stor256:
                revert with 0, 17
            if stor256 == -1:
                revert with 0, 17
            stor256++
            mem[32] = 261
            address(stor261[stor256 + 1].field_0) = address(cd[4])
            stor261[stor256 + 1].field_256 = cd[36]
            stor261[stor256 + 1].field_512 = cd[100]
            stor261[stor256 + 1].field_768 = cd[132]
            if bool(stor261[stor256 + 1].field_1536):
                if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                    revert with 0, 34
                if not ('cd', 164).length:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                    t = sha3(sha3(stor256 + 1, 261) + 6)
                    s = cd[164] + 36
                    while cd[164] + ('cd', 164).length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            else:
                if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                    revert with 0, 34
                if not ('cd', 164).length:
                    stor261[stor256 + 1].field_1536 = 0
                    s = sha3(sha3(stor256 + 1, 261) + 6)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
                else:
                    stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                    t = sha3(sha3(stor256 + 1, 261) + 6)
                    s = cd[164] + 36
                    while cd[164] + ('cd', 164).length + 36 > s:
                        stor[t] = cd[s]
                        t = t + 1
                        s = s + 32
                        continue 
                    s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                    while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                        stor[s] = 0
                        s = s + 1
                        continue 
            if ('cd', 164).length:
                mem[mem[64]] = 32
                mem[mem[64] + 32] = ('cd', 164).length
                mem[mem[64] + 64 len ('cd', 164).length] = call.data[cd[164] + 36 len ('cd', 164).length]
                mem[('cd', 164).length + mem[64] + 64] = 0
                emit URI(Array(len=('cd', 164).length, data=call.data[cd[164] + 36 len ('cd', 164).length]), stor256 + 1);
            mem[32] = 262
            sub_627dd5ca[address(cd[4])]++
            mem[0] = sha3(address(cd[4]), 262)
            sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor256 + 1
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if block.timestamp:
            idx = 0
            while idx < cd[68]:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                address(stor261[stor256 + 1].field_0) = address(cd[4])
                stor261[stor256 + 1].field_256 = cd[36]
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = cd[132]
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not ('cd', 164).length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = cd[164] + 36
                        while cd[164] + ('cd', 164).length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not ('cd', 164).length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = cd[164] + 36
                        while cd[164] + ('cd', 164).length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if ('cd', 164).length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = ('cd', 164).length
                    mem[mem[64] + 64 len ('cd', 164).length] = call.data[cd[164] + 36 len ('cd', 164).length]
                    mem[('cd', 164).length + mem[64] + 64] = 0
                    emit URI(Array(len=('cd', 164).length, data=call.data[cd[164] + 36 len ('cd', 164).length]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 262)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            idx = 0
            while idx < cd[68]:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                address(stor261[stor256 + 1].field_0) = address(cd[4])
                stor261[stor256 + 1].field_256 = cd[36]
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not ('cd', 164).length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = cd[164] + 36
                        while cd[164] + ('cd', 164).length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not ('cd', 164).length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * ('cd', 164).length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = cd[164] + 36
                        while cd[164] + ('cd', 164).length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, ('cd', 164).length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if ('cd', 164).length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = ('cd', 164).length
                    mem[mem[64] + 64 len ('cd', 164).length] = call.data[cd[164] + 36 len ('cd', 164).length]
                    mem[('cd', 164).length + mem[64] + 64] = 0
                    emit URI(Array(len=('cd', 164).length, data=call.data[cd[164] + 36 len ('cd', 164).length]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[address(cd[4])]++
                mem[0] = sha3(address(cd[4]), 262)
                sub_627dd5ca[address(cd[4])][sub_627dd5ca[address(cd[4])]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
    if cd[36] >= stor260.length:
        revert with 0, 50
    if stor260[cd[36]].field_2048 > !cd[68]:
        revert with 0, 17
    stor260[cd[36]].field_2048 += cd[68]
}

function mint(uint256 arg1, uint256 arg2, string arg3) {
    require calldata.size - 4 >= 96
    require arg1 == arg1
    require arg2 == arg2
    require arg3 <= test266151307()
    require arg3 + 35 < calldata.size
    require arg3.length <= test266151307()
    require arg3 + arg3.length + 36 <= calldata.size
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_2048 > stor260[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'all of this collection are purchased'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_2048 > !arg2:
        revert with 0, 17
    if stor260[arg1].field_2048 + arg2 > stor260[arg1].field_512:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'there is not enought nodes to sell'
    if arg1 >= stor260.length:
        revert with 0, 50
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s >= stor260[arg1].field_2304:
        revert with 0, 'minted nodes exceed amount limit'
    if arg1 >= stor260.length:
        revert with 0, 50
    mem[32] = 262
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if stor261[stor262[address(msg.sender)][idx]].field_256 != arg1:
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s
            continue 
        if s == -1:
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + 1
        continue 
    if s > !arg2:
        revert with 0, 17
    if s + arg2 >= stor260[arg1].field_2304:
        revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'you will exceed nodes amount limit'
    if arg1 >= stor260.length:
        revert with 0, 50
    if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
        revert with 0, 17
    mem[100] = msg.sender
    require ext_code.size(sub_85adc8b0Address)
    staticcall sub_85adc8b0Address.0x70a08231 with:
            gas gas_remaining wei
           args msg.sender
    mem[96] = ext_call.return_data[0]
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == ext_call.return_data[0]
    if not isPresaleActive:
        if ext_call.return_data[0] < stor260[arg1].field_256 * arg2:
            revert with 0, 'receiver's balance is less than node price'
        if arg1 >= stor260.length:
            revert with 0, 50
        if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
            revert with 0, 17
        mem[ceil32(return_data.size) + 100] = msg.sender
        mem[ceil32(return_data.size) + 132] = this.address
        if not isPresaleActive:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if arg3.length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = arg3.length
                    mem[mem[64] + 64 len arg3.length] = arg3[all]
                    mem[arg3.length + mem[64] + 64] = 0
                    emit URI(Array(len=arg3.length, data=arg3[all]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1614 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1614] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1622 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1622]:
                revert with 0, 50
        else:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2 / 2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2 / 2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if arg3.length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = arg3.length
                    mem[mem[64] + 64 len arg3.length] = arg3[all]
                    mem[arg3.length + mem[64] + 64] = 0
                    emit URI(Array(len=arg3.length, data=arg3[all]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1615 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1615] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1624 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1624]:
                revert with 0, 50
    else:
        if ext_call.return_data[0] < stor260[arg1].field_256 * arg2 / 2:
            revert with 0, 'receiver's balance is less than node price'
        if arg1 >= stor260.length:
            revert with 0, 50
        if stor260[arg1].field_256 and arg2 > -1 / stor260[arg1].field_256:
            revert with 0, 17
        mem[ceil32(return_data.size) + 100] = msg.sender
        mem[ceil32(return_data.size) + 132] = this.address
        if not isPresaleActive:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if arg3.length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = arg3.length
                    mem[mem[64] + 64 len arg3.length] = arg3[all]
                    mem[arg3.length + mem[64] + 64] = 0
                    emit URI(Array(len=arg3.length, data=arg3[all]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1616 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1616] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1626 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1626]:
                revert with 0, 50
        else:
            mem[ceil32(return_data.size) + 164] = stor260[arg1].field_256 * arg2 / 2
            require ext_code.size(sub_85adc8b0Address)
            call sub_85adc8b0Address.0x23b872dd with:
                 gas gas_remaining wei
                args msg.sender, address(this.address), stor260[arg1].field_256 * arg2 / 2
            mem[ceil32(return_data.size) + 96] = ext_call.return_data[0]
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            mem[64] = (2 * ceil32(return_data.size)) + 96
            require return_data.size >= 32
            require ext_call.return_data[0] == bool(ext_call.return_data[0])
            idx = 0
            while idx < arg2:
                if 1 > !stor256:
                    revert with 0, 17
                if stor256 == -1:
                    revert with 0, 17
                stor256++
                mem[32] = 261
                stor261[stor256 + 1].field_0 = msg.sender or Mask(96, 160, stor261[stor256 + 1].field_0)
                stor261[stor256 + 1].field_256 = arg1
                stor261[stor256 + 1].field_512 = block.timestamp
                stor261[stor256 + 1].field_768 = block.timestamp
                if bool(stor261[stor256 + 1].field_1536):
                    if bool(stor261[stor256 + 1].field_1536) == uint255(stor261[stor256 + 1].field_1537) < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (uint255(stor261[stor256 + 1].field_1537) + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                else:
                    if bool(stor261[stor256 + 1].field_1536) == stor261[stor256 + 1].field_1537 % 128 < 32:
                        revert with 0, 34
                    if not arg3.length:
                        stor261[stor256 + 1].field_1536 = 0
                        s = sha3(sha3(stor256 + 1, 261) + 6)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                    else:
                        stor261[stor256 + 1].field_1536 = (2 * arg3.length) + 1
                        t = sha3(sha3(stor256 + 1, 261) + 6)
                        s = arg3 + 36
                        while arg3 + arg3.length + 36 > s:
                            stor[t] = cd[s]
                            t = t + 1
                            s = s + 32
                            continue 
                        s = sha3(sha3(stor256 + 1, 261) + 6) + (Mask(251, 0, arg3.length + 31) >> 5)
                        while sha3(sha3(stor256 + 1, 261) + 6) + (stor261[stor256 + 1].field_1537 % 128 + 31 / 32) > s:
                            stor[s] = 0
                            s = s + 1
                            continue 
                if arg3.length:
                    mem[mem[64]] = 32
                    mem[mem[64] + 32] = arg3.length
                    mem[mem[64] + 64 len arg3.length] = arg3[all]
                    mem[arg3.length + mem[64] + 64] = 0
                    emit URI(Array(len=arg3.length, data=arg3[all]), stor256 + 1);
                mem[32] = 262
                sub_627dd5ca[msg.sender]++
                mem[0] = sha3(msg.sender, 262)
                sub_627dd5ca[msg.sender][sub_627dd5ca[msg.sender]] = stor256 + 1
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if arg1 >= stor260.length:
                revert with 0, 50
            mem[0] = 260
            if stor260[arg1].field_2048 > !arg2:
                revert with 0, 17
            stor260[arg1].field_2048 += arg2
            _1617 = mem[64]
            mem[64] = mem[64] + 32
            mem[_1617] = 0
            if not msg.sender:
                revert with 0, 'ERC1155: mint to the zero address'
            _1628 = mem[64]
            mem[mem[64]] = 1
            mem[64] = mem[64] + 64
            if 0 >= mem[_1628]:
                revert with 0, 50
    if balanceOf[arg1][address(msg.sender)] > !arg2:
        revert with 0, 17
    balanceOf[arg1][address(msg.sender)] += arg2
    emit TransferSingle(arg1, arg2, msg.sender, 0, msg.sender);
    if ext_code.size(msg.sender):
        require ext_code.size(msg.sender)
        call msg.sender.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
             gas gas_remaining wei
            args msg.sender, 0, arg1, arg2, 160, 0
        if not ext_call.success:
            revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
        require return_data.size >= 32
        require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
        if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
            revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
}

function sub_46be42fa(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                   (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                           0 / stor255
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                   (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
                       0 / stor255
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        return (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280, 
               (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                   0 / stor255
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
                   0 / stor255
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    return (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280, 
           (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255
}

function sub_8de45c1a(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                return ((0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280)
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            return ((0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
        revert with 0, 17
    return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280)
}

function sub_cc4da26d(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor261[stor262[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
        continue 
    return s
}

function sub_e7694bc6(?) {
    require calldata.size - 4 >= 32
    require arg1 == address(arg1)
    if not sub_627dd5ca[address(arg1)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(arg1)]:
        if idx >= sub_627dd5ca[address(arg1)]:
            revert with 0, 50
        if not address(stor261[stor262[address(arg1)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = address(arg1)
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = address(arg1)
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = address(arg1)
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = address(arg1)
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = address(arg1)
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = address(arg1)
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        return (s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if s and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / s:
        revert with 0, 17
    if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
        revert with 0, 17
    return (s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100)
}

function sub_cd844602(?) {
    require calldata.size - 4 >= 32
    require arg1 == arg1
    if not address(stor261[arg1].field_0):
        revert with 0, 'No node exist'
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg1].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg1].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_512 / stor257 <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor261[arg1].field_512 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
                revert with 0, 17
            if stor261[arg1].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg1].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg1].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                        revert with 0, 17
                    require ext_code.size(pairAddress)
                    staticcall pairAddress.getReserves() with:
                            gas gas_remaining wei
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 96
                    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                    if not sub_11a93db1:
                        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                            revert with 0, 17
                        if not ext_call.return_data[18 len 14]:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                            revert with 0, 17
                        if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                            revert with 0, 17
                        return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[50 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
                idx = 0
                while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
            if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if 10^9 / stor260[stor261[arg1].field_256].field_768 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024)):
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + ((10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - (10^9 / stor260[stor261[arg1].field_256].field_768 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_768 > -1 / block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 and stor260[stor261[arg1].field_256].field_256 > -1 / block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor261[arg1].field_512 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        revert with 0, 17
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257) >= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
        if stor260[stor261[arg1].field_256].field_1024 and block.timestamp - stor261[arg1].field_768 / stor257 > -1 / stor260[stor261[arg1].field_256].field_1024:
            revert with 0, 17
        if stor261[arg1].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[arg1].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                idx = 0
                while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                    if 0 > !idx:
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    idx = idx + 1
                    continue 
                if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                    revert with 0, 17
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[arg1].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
                    revert with 0, 17
                require ext_code.size(pairAddress)
                staticcall pairAddress.getReserves() with:
                        gas gas_remaining wei
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 96
                require ext_call.return_data[0] == ext_call.return_data[18 len 14]
                require ext_call.return_data[32] == ext_call.return_data[50 len 14]
                require ext_call.return_data[64] == ext_call.return_data[92 len 4]
                if not sub_11a93db1:
                    if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                        revert with 0, 17
                    if not ext_call.return_data[18 len 14]:
                        revert with 0, 18
                    if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                        revert with 0, 17
                    if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                        revert with 0, 17
                    return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
                if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[50 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
            idx = 0
            while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
        if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[arg1].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
            revert with 0, 17
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 and stor260[stor261[arg1].field_256].field_256 > -1 / stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257:
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 > !stor261[arg1].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280):
            revert with 0, 17
        require ext_code.size(pairAddress)
        staticcall pairAddress.getReserves() with:
                gas gas_remaining wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 96
        require ext_call.return_data[0] == ext_call.return_data[18 len 14]
        require ext_call.return_data[32] == ext_call.return_data[50 len 14]
        require ext_call.return_data[64] == ext_call.return_data[92 len 4]
        if not sub_11a93db1:
            if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[18 len 14]:
                revert with 0, 18
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                revert with 0, 17
            return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor260[stor261[arg1].field_256].field_1024 * block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_256 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
    if block.timestamp - stor261[arg1].field_512 / stor257 < block.timestamp - stor261[arg1].field_768 / stor257:
        revert with 0, 17
    if (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg1].field_512 / stor257) - (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257) and stor260[stor261[arg1].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg1].field_512 / stor257) + (block.timestamp - stor261[arg1].field_768 / stor257):
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1024 and (block.timestamp - stor261[arg1].field_512 / stor257) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg1].field_256].field_1024:
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) > !((block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024)):
        revert with 0, 17
    if stor261[arg1].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg1].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
        if block.timestamp - stor261[arg1].field_768 / stor257 < 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= 10^9 / stor260[stor261[arg1].field_256].field_768 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    else:
        if 10 > !(10^9 / stor260[stor261[arg1].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg1].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg1].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg1].field_768 / stor257 < (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            idx = 0
            while idx <= block.timestamp - stor261[arg1].field_768 / stor257:
                if 0 > !idx:
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                idx = idx + 1
                continue 
            if False and stor260[stor261[arg1].field_256].field_1280 > 0:
                revert with 0, 17
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
                revert with 0, 17
            if False and stor260[stor261[arg1].field_256].field_256 > 0:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if 0 / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
                revert with 0, 17
            require ext_code.size(pairAddress)
            staticcall pairAddress.getReserves() with:
                    gas gas_remaining wei
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 96
            require ext_call.return_data[0] == ext_call.return_data[18 len 14]
            require ext_call.return_data[32] == ext_call.return_data[50 len 14]
            require ext_call.return_data[64] == ext_call.return_data[92 len 4]
            if not sub_11a93db1:
                if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                    revert with 0, 17
                if not ext_call.return_data[18 len 14]:
                    revert with 0, 18
                if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                    revert with 0, 17
                if (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
                    revert with 0, 17
                return ((0 / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
            if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
                revert with 0, 17
            if not ext_call.return_data[50 len 14]:
                revert with 0, 18
            if (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
                revert with 0, 17
            if (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / (0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
                revert with 0, 17
            return ((0 / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
        idx = 0
        while idx <= (10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10:
            if 0 > !idx:
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            idx = idx + 1
            continue 
    if block.timestamp - stor261[arg1].field_768 / stor257 < stor258:
        revert with 0, 17
    if stor260[stor261[arg1].field_256].field_1536 and (block.timestamp - stor261[arg1].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg1].field_256].field_1536:
        revert with 0, 17
    if False and stor260[stor261[arg1].field_256].field_1280 > 0:
        revert with 0, 17
    if 0 > !((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536)):
        revert with 0, 17
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024) and stor260[stor261[arg1].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 > !stor261[arg1].field_1280:
        revert with 0, 17
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536) and stor260[stor261[arg1].field_256].field_256 > -1 / (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536) - (stor258 * stor260[stor261[arg1].field_256].field_1536):
        revert with 0, 17
    if not stor255:
        revert with 0, 18
    if (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280):
        revert with 0, 17
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
            revert with 0, 17
        if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18:
            revert with 0, 17
        return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14]) / 10^18 * sub_f468fba8 / 100)
    if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
        revert with 0, 17
    if not ext_call.return_data[50 len 14]:
        revert with 0, 18
    if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255) + stor261[arg1].field_1280:
        revert with 0, 17
    if ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 and sub_f468fba8 > -1 / ((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18:
        revert with 0, 17
    return (((block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) - (stor258 * stor260[stor261[arg1].field_256].field_1536 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) - (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_768 / stor257 * stor260[stor261[arg1].field_256].field_768 * stor260[stor261[arg1].field_256].field_256) + (block.timestamp - stor261[arg1].field_512 / stor257 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) - ((10^9 / stor260[stor261[arg1].field_256].field_768) + -(10^9 / stor260[stor261[arg1].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg1].field_256].field_1024 * stor260[stor261[arg1].field_256].field_256) / stor255 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) + (stor261[arg1].field_1280 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14]) / 10^18 * sub_f468fba8 / 100)
}

function claim() payable {
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if not sub_627dd5ca[msg.sender]:
        revert with 0, 'No have a node'
    if not sub_627dd5ca[address(msg.sender)]:
        revert with 0, 'No have a node'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[address(msg.sender)]:
        if idx >= sub_627dd5ca[address(msg.sender)]:
            revert with 0, 50
        if not address(stor261[stor262[address(msg.sender)][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[address(msg.sender)][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[address(msg.sender)][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[address(msg.sender)][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(msg.sender)][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(msg.sender)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(msg.sender)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(msg.sender)][idx]].field_1280
        continue 
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    else:
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if s and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / s:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
            revert with 0, 17
        if s * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    idx = 0
    s = 0
    while idx < sub_627dd5ca[msg.sender]:
        if idx >= sub_627dd5ca[msg.sender]:
            revert with 0, 50
        if not address(stor261[stor262[msg.sender][idx]].field_0):
            revert with 0, 'No node exist'
        if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if block.timestamp < stor261[stor262[msg.sender][idx]].field_512:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if block.timestamp < stor261[stor262[msg.sender][idx]].field_768:
            revert with 0, 17
        if not stor257:
            revert with 0, 18
        if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                    revert with 0, 17
                if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][idx]].field_1280 = 0
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][idx]].field_1280 = 0
                        if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
                stor261[stor262[msg.sender][idx]].field_1280 = 0
                if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024:
                    revert with 0, 17
                if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][idx]].field_1280 = 0
                        if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                else:
                    if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        t = 0
                        while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            if 0 > !t:
                                revert with 0, 17
                            if t == -1:
                                revert with 0, 17
                            mem[0] = msg.sender
                            mem[32] = 262
                            t = t + 1
                            continue 
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                        if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                            revert with 0, 17
                        stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                        stor261[stor262[msg.sender][idx]].field_1280 = 0
                        if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if s > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        idx = idx + 1
                        s = s + (0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                        continue 
                    t = 0
                    while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
                    revert with 0, 17
                if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
                stor261[stor262[msg.sender][idx]].field_1280 = 0
                if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                continue 
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                revert with 0, 17
            if 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257):
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024:
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024)):
                revert with 0, 17
            if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][idx]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
            continue 
        if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                revert with 0, 17
            if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][idx]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            revert with 0, 17
        if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024:
                revert with 0, 17
            if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            else:
                if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    t = 0
                    while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        if 0 > !t:
                            revert with 0, 17
                        if t == -1:
                            revert with 0, 17
                        mem[0] = msg.sender
                        mem[32] = 262
                        t = t + 1
                        continue 
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                        revert with 0, 17
                    if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                    if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                        revert with 0, 17
                    stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                    stor261[stor262[msg.sender][idx]].field_1280 = 0
                    if 0 / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if s > !((0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                        revert with 0, 17
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    idx = idx + 1
                    s = s + (0 / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                    continue 
                t = 0
                while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
                revert with 0, 17
            if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                revert with 0, 17
            if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
                revert with 0, 17
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                revert with 0, 17
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
                revert with 0, 17
            if not stor255:
                revert with 0, 18
            stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
            if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
                revert with 0, 17
            stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
            stor261[stor262[msg.sender][idx]].field_1280 = 0
            if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                revert with 0, 17
            if idx == -1:
                revert with 0, 17
            mem[0] = msg.sender
            mem[32] = 262
            idx = idx + 1
            s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 / stor255) + stor261[stor262[msg.sender][idx]].field_1280
            continue 
        if block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
            revert with 0, 17
        if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257):
            revert with 0, 17
        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024:
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024)):
            revert with 0, 17
        if stor261[stor262[msg.sender][idx]].field_256 >= stor260.length:
            revert with 0, 50
        if not stor260[stor261[stor262[msg.sender][idx]].field_256].field_768:
            revert with 0, 18
        if not 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                stor261[stor262[msg.sender][idx]].field_1280 = 0
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                continue 
            t = 0
            while t <= 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        else:
            if 10 > !(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768):
                revert with 0, 17
            if (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10:
                revert with 0, 17
            if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                t = 0
                while t <= block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257:
                    if 0 > !t:
                        revert with 0, 17
                    if t == -1:
                        revert with 0, 17
                    mem[0] = msg.sender
                    mem[32] = 262
                    t = t + 1
                    continue 
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
                    revert with 0, 17
                if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > 0:
                    revert with 0, 17
                if not stor255:
                    revert with 0, 18
                stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
                if stor261[stor262[msg.sender][idx]].field_1024 > !(0 / stor255):
                    revert with 0, 17
                stor261[stor262[msg.sender][idx]].field_1024 += 0 / stor255
                stor261[stor262[msg.sender][idx]].field_1280 = 0
                if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if s > !((0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
                    revert with 0, 17
                if idx == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                idx = idx + 1
                s = s + (0 / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
                continue 
            t = 0
            while t <= (10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10:
                if 0 > !t:
                    revert with 0, 17
                if t == -1:
                    revert with 0, 17
                mem[0] = msg.sender
                mem[32] = 262
                t = t + 1
                continue 
        if block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 < stor258:
            revert with 0, 17
        if stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536:
            revert with 0, 17
        if False and stor260[stor261[stor262[msg.sender][idx]].field_256].field_1280 > 0:
            revert with 0, 17
        if 0 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536)):
            revert with 0, 17
        if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        if ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !stor261[stor262[msg.sender][idx]].field_1280:
            revert with 0, 17
        if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) and stor260[stor261[stor262[msg.sender][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536):
            revert with 0, 17
        if not stor255:
            revert with 0, 18
        stor261[stor262[msg.sender][idx]].field_768 = block.timestamp
        if stor261[stor262[msg.sender][idx]].field_1024 > !((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255):
            revert with 0, 17
        stor261[stor262[msg.sender][idx]].field_1024 += (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255
        stor261[stor262[msg.sender][idx]].field_1280 = 0
        if (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
            revert with 0, 17
        if s > !(((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280):
            revert with 0, 17
        if idx == -1:
            revert with 0, 17
        mem[0] = msg.sender
        mem[32] = 262
        idx = idx + 1
        s = s + ((block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1536 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_768 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[msg.sender][idx]].field_512 / stor257 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[msg.sender][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_1024 * stor260[stor261[stor262[msg.sender][idx]].field_256].field_256) / stor255) + stor261[stor262[msg.sender][idx]].field_1280
        continue 
    require ext_code.size(sub_85adc8b0Address)
    call sub_85adc8b0Address.0xa9059cbb with:
         gas gas_remaining wei
        args msg.sender, s
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor201 = 1
}

function sub_4854424e(?) payable {
    require calldata.size - 4 >= 64
    require arg1 == arg1
    require arg2 == arg2
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if stor201 == 2:
        revert with 0, 'ReentrancyGuard: reentrant call'
    stor201 = 2
    if not sub_627dd5ca[msg.sender]:
        revert with 0, 'No have a node'
    if address(stor261[arg2].field_0) != msg.sender:
        revert with 0, 'only puchaser can claim'
    require ext_code.size(pairAddress)
    staticcall pairAddress.getReserves() with:
            gas gas_remaining wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 96
    require ext_call.return_data[0] == ext_call.return_data[18 len 14]
    require ext_call.return_data[32] == ext_call.return_data[50 len 14]
    require ext_call.return_data[64] == ext_call.return_data[92 len 4]
    if not sub_11a93db1:
        if ext_call.return_data[50 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[18 len 14]:
            revert with 0, 18
        if arg1 and 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] > -1 / arg1:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[50 len 14] / ext_call.return_data[18 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    else:
        if ext_call.return_data[18 len 14] > 0x12725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21:
            revert with 0, 17
        if not ext_call.return_data[50 len 14]:
            revert with 0, 18
        if arg1 and 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] > -1 / arg1:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 and sub_f468fba8 > -1 / arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18:
            revert with 0, 17
        if arg1 * 10^18 * ext_call.return_data[18 len 14] / ext_call.return_data[50 len 14] / 10^18 * sub_f468fba8 / 100 > msg.value:
            revert with 0, 'No fee is set'
    if not address(stor261[arg2].field_0):
        revert with 0, 'No node exist'
    if stor261[arg2].field_256 >= stor260.length:
        revert with 0, 50
    if block.timestamp < stor261[arg2].field_512:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if block.timestamp < stor261[arg2].field_768:
        revert with 0, 17
    if not stor257:
        revert with 0, 18
    if stor261[arg2].field_256 >= stor260.length:
        revert with 0, 50
    if not stor260[stor261[arg2].field_256].field_768:
        revert with 0, 18
    if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
        if block.timestamp - stor261[arg2].field_512 / stor257 <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
            if block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_768 > -1 / block.timestamp - stor261[arg2].field_768 / stor257:
                revert with 0, 17
            if stor261[arg2].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg2].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    idx = 0
                    while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                        revert with 0, 17
                    if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
            else:
                if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    idx = 0
                    while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                        revert with 0, 17
                    if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
        else:
            if block.timestamp - stor261[arg2].field_512 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                revert with 0, 17
            if block.timestamp - stor261[arg2].field_512 / stor257 < block.timestamp - stor261[arg2].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[arg2].field_512 / stor257) - (block.timestamp - stor261[arg2].field_768 / stor257) >= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                if stor260[stor261[arg2].field_256].field_1024 and block.timestamp - stor261[arg2].field_768 / stor257 > -1 / stor260[stor261[arg2].field_256].field_1024:
                    revert with 0, 17
                if stor261[arg2].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
            else:
                if block.timestamp - stor261[arg2].field_512 / stor257 < block.timestamp - stor261[arg2].field_768 / stor257:
                    revert with 0, 17
                if 10^9 / stor260[stor261[arg2].field_256].field_768 / 10 < (block.timestamp - stor261[arg2].field_512 / stor257) - (block.timestamp - stor261[arg2].field_768 / stor257):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10) - (block.timestamp - stor261[arg2].field_512 / stor257) + (block.timestamp - stor261[arg2].field_768 / stor257) and stor260[stor261[arg2].field_256].field_768 > -1 / (10^9 / stor260[stor261[arg2].field_256].field_768 / 10) - (block.timestamp - stor261[arg2].field_512 / stor257) + (block.timestamp - stor261[arg2].field_768 / stor257):
                    revert with 0, 17
                if stor260[stor261[arg2].field_256].field_1024 and (block.timestamp - stor261[arg2].field_512 / stor257) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10) > -1 / stor260[stor261[arg2].field_256].field_1024:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) > !((block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024)):
                    revert with 0, 17
                if stor261[arg2].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !(((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - (((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - (((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !(((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - (((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - (((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - (10^9 / stor260[stor261[arg2].field_256].field_768 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
    else:
        if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
            revert with 0, 17
        if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
            revert with 0, 17
        if block.timestamp - stor261[arg2].field_512 / stor257 <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
            if block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_768 > -1 / block.timestamp - stor261[arg2].field_768 / stor257:
                revert with 0, 17
            if stor261[arg2].field_256 >= stor260.length:
                revert with 0, 50
            if not stor260[stor261[arg2].field_256].field_768:
                revert with 0, 18
            if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    idx = 0
                    while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                        revert with 0, 17
                    if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
            else:
                if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    revert with 0, 17
                if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                    idx = 0
                    while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_256 > 0:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    idx = 0
                    while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        if 0 > !idx:
                            revert with 0, 17
                        if idx == -1:
                            revert with 0, 17
                        idx = idx + 1
                        continue 
                    if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                        revert with 0, 17
                    if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                        revert with 0, 17
                    if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                        revert with 0, 17
                    if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 and stor260[stor261[arg2].field_256].field_256 > -1 / block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                        revert with 0, 17
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                        revert with 0, 17
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                        revert with 0, 'You don't have much in your node'
                    if arg1 < 0:
                        revert with 0, 17
                    if arg1 and stor255 > -1 / arg1:
                        revert with 0, 17
                    if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 18
                    if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                        revert with 0, 17
                    stor261[arg2].field_768 = block.timestamp
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                        revert with 0, 17
                    stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                        revert with 0, 17
                    if not stor255:
                        revert with 0, 18
                    if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                        revert with 0, 17
                    stor261[arg2].field_1280 = (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                    require ext_code.size(sub_85adc8b0Address)
                    call sub_85adc8b0Address.0xa9059cbb with:
                         gas gas_remaining wei
                        args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
        else:
            if block.timestamp - stor261[arg2].field_512 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                revert with 0, 17
            if block.timestamp - stor261[arg2].field_512 / stor257 < block.timestamp - stor261[arg2].field_768 / stor257:
                revert with 0, 17
            if (block.timestamp - stor261[arg2].field_512 / stor257) - (block.timestamp - stor261[arg2].field_768 / stor257) >= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                if stor260[stor261[arg2].field_256].field_1024 and block.timestamp - stor261[arg2].field_768 / stor257 > -1 / stor260[stor261[arg2].field_256].field_1024:
                    revert with 0, 17
                if stor261[arg2].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 and stor260[stor261[arg2].field_256].field_256 > -1 / stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 / stor255
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 > -1 / (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 < (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280 - ((stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (stor260[stor261[arg2].field_256].field_1024 * block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_256 / stor255) + stor261[arg2].field_1280) / stor255
            else:
                if block.timestamp - stor261[arg2].field_512 / stor257 < block.timestamp - stor261[arg2].field_768 / stor257:
                    revert with 0, 17
                if (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[arg2].field_512 / stor257) - (block.timestamp - stor261[arg2].field_768 / stor257):
                    revert with 0, 17
                if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg2].field_512 / stor257) + (block.timestamp - stor261[arg2].field_768 / stor257) and stor260[stor261[arg2].field_256].field_768 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[arg2].field_512 / stor257) + (block.timestamp - stor261[arg2].field_768 / stor257):
                    revert with 0, 17
                if stor260[stor261[arg2].field_256].field_1024 and (block.timestamp - stor261[arg2].field_512 / stor257) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[arg2].field_256].field_1024:
                    revert with 0, 17
                if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) > !((block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024)):
                    revert with 0, 17
                if stor261[arg2].field_256 >= stor260.length:
                    revert with 0, 50
                if not stor260[stor261[arg2].field_256].field_768:
                    revert with 0, 18
                if not 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                    if block.timestamp - stor261[arg2].field_768 / stor257 < 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - ((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= 10^9 / stor260[stor261[arg2].field_256].field_768 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - ((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                else:
                    if 10 > !(10^9 / stor260[stor261[arg2].field_256].field_768):
                        revert with 0, 17
                    if (10^9 / stor260[stor261[arg2].field_256].field_768) + 10 < 10^9 / stor260[stor261[arg2].field_256].field_768 % 10:
                        revert with 0, 17
                    if block.timestamp - stor261[arg2].field_768 / stor257 < (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                        idx = 0
                        while idx <= block.timestamp - stor261[arg2].field_768 / stor257:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_256 > 0:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 / stor255 > !((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !((0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if 0 / stor255 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / 0 / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !(0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += 0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - ((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, (0 / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / (0 / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
                    else:
                        idx = 0
                        while idx <= (10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10:
                            if 0 > !idx:
                                revert with 0, 17
                            if idx == -1:
                                revert with 0, 17
                            idx = idx + 1
                            continue 
                        if block.timestamp - stor261[arg2].field_768 / stor257 < stor258:
                            revert with 0, 17
                        if stor260[stor261[arg2].field_256].field_1536 and (block.timestamp - stor261[arg2].field_768 / stor257) - stor258 > -1 / stor260[stor261[arg2].field_256].field_1536:
                            revert with 0, 17
                        if False and stor260[stor261[arg2].field_256].field_1280 > 0:
                            revert with 0, 17
                        if 0 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536)):
                            revert with 0, 17
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024) and stor260[stor261[arg2].field_256].field_256 > -1 / ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 > !stor261[arg2].field_1280:
                            revert with 0, 17
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536) and stor260[stor261[arg2].field_256].field_256 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536) - (stor258 * stor260[stor261[arg2].field_256].field_1536):
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280):
                            revert with 0, 17
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < arg1:
                            revert with 0, 'You don't have much in your node'
                        if arg1 < 0:
                            revert with 0, 17
                        if arg1 and stor255 > -1 / arg1:
                            revert with 0, 17
                        if not ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 18
                        if ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if 0 > !(((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255):
                            revert with 0, 17
                        stor261[arg2].field_768 = block.timestamp
                        if (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if stor261[arg2].field_1024 > !((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255):
                            revert with 0, 17
                        stor261[arg2].field_1024 += (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 / stor255
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 and arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 > -1 / (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280:
                            revert with 0, 17
                        if not stor255:
                            revert with 0, 18
                        if (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 < (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255:
                            revert with 0, 17
                        stor261[arg2].field_1280 = (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280 - ((((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255)
                        require ext_code.size(sub_85adc8b0Address)
                        call sub_85adc8b0Address.0xa9059cbb with:
                             gas gas_remaining wei
                            args msg.sender, ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) + (stor261[arg2].field_1280 * arg1 * stor255 / ((block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) - (stor258 * stor260[stor261[arg2].field_256].field_1536 * stor260[stor261[arg2].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) - (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_768 / stor257 * stor260[stor261[arg2].field_256].field_768 * stor260[stor261[arg2].field_256].field_256) + (block.timestamp - stor261[arg2].field_512 / stor257 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) - ((10^9 / stor260[stor261[arg2].field_256].field_768) + -(10^9 / stor260[stor261[arg2].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[arg2].field_256].field_1024 * stor260[stor261[arg2].field_256].field_256) / stor255) + stor261[arg2].field_1280) / stor255
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0] == bool(ext_call.return_data[0])
    stor201 = 1
}

function safeTransferFrom(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) {
    require calldata.size - 4 >= 160
    require arg1 == arg1
    require arg2 == arg2
    require arg3 == arg3
    require arg4 == arg4
    require arg5 <= test266151307()
    require arg5 + 35 < calldata.size
    if arg5.length > test266151307():
        revert with 0, 65
    if ceil32(ceil32(arg5.length)) + 97 > test266151307() or ceil32(ceil32(arg5.length)) + 97 < 96:
        revert with 0, 65
    mem[96] = arg5.length
    require arg5 + arg5.length + 36 <= calldata.size
    mem[128 len arg5.length] = arg5[all]
    if stor263[msg.sender]:
        revert with 0, 'you're blacklisted'
    if bool(sub_a82f0131) != 1:
        revert with 0, 'Node: Transfer is disabled'
    if msg.sender == arg1:
        if not arg2:
            revert with 0, 'ERC1155: transfer to the zero address'
        mem[ceil32(ceil32(arg5.length)) + 97] = 1
        mem[ceil32(ceil32(arg5.length)) + 129] = arg3
        mem[ceil32(ceil32(arg5.length)) + 161] = 1
        mem[64] = ceil32(ceil32(arg5.length)) + 225
        mem[ceil32(ceil32(arg5.length)) + 193] = arg4
        if balanceOf[arg3][address(arg1)] < arg4:
            revert with 0, 'ERC1155: insufficient balance for transfer'
        balanceOf[arg3][address(arg1)] -= arg4
        if balanceOf[arg3][arg2] > !arg4:
            revert with 0, 17
        balanceOf[arg3][arg2] += arg4
        mem[ceil32(ceil32(arg5.length)) + 225] = arg3
        mem[ceil32(ceil32(arg5.length)) + 257] = arg4
        emit TransferSingle(arg3, arg4, msg.sender, arg1, arg2);
        if not ext_code.size(arg2):
            mem[0] = arg1
            mem[32] = 262
            idx = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor261[stor262[address(arg1)][idx]].field_256 == arg3:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4250 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4250] == bool(mem[_4250])
                                else:
                                    s = 0
                                    while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4342 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4342] == bool(mem[_4342])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4251 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4251] == bool(mem[_4251])
                                else:
                                    s = 0
                                    while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4344 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4344] == bool(mem[_4344])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4252 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4252] == bool(mem[_4252])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4346 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4346] == bool(mem[_4346])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4253 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4253] == bool(mem[_4253])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4348 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4348] == bool(mem[_4348])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4254 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4254] == bool(mem[_4254])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4350 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4350] == bool(mem[_4350])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4255 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4255] == bool(mem[_4255])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4352 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4352] == bool(mem[_4352])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4256 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4256] == bool(mem[_4256])
                                else:
                                    s = 0
                                    while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4354 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4354] == bool(mem[_4354])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4257 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4257] == bool(mem[_4257])
                                else:
                                    s = 0
                                    while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4356 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4356] == bool(mem[_4356])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4258 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4258] == bool(mem[_4258])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4358 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4358] == bool(mem[_4358])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4259 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4259] == bool(mem[_4259])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4360 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4360] == bool(mem[_4360])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4260 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4260] == bool(mem[_4260])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4362 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4362] == bool(mem[_4362])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4261 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4261] == bool(mem[_4261])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4364 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4364] == bool(mem[_4364])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 262
                idx = idx + 1
                continue 
        else:
            mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
            mem[ceil32(ceil32(arg5.length)) + 261] = arg1
            mem[ceil32(ceil32(arg5.length)) + 293] = arg3
            mem[ceil32(ceil32(arg5.length)) + 325] = arg4
            mem[ceil32(ceil32(arg5.length)) + 357] = 160
            mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
            mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
            if ceil32(arg5.length) <= arg5.length:
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7598 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7598] == bool(mem[_7598])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7742 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7742] == bool(mem[_7742])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7599 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7599] == bool(mem[_7599])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7744 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7744] == bool(mem[_7744])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7600 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7600] == bool(mem[_7600])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7746 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7746] == bool(mem[_7746])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7601 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7601] == bool(mem[_7601])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7748 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7748] == bool(mem[_7748])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7602 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7602] == bool(mem[_7602])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7750 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7750] == bool(mem[_7750])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7603 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7603] == bool(mem[_7603])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7752 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7752] == bool(mem[_7752])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7604 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7604] == bool(mem[_7604])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7754 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7754] == bool(mem[_7754])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7605 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7605] == bool(mem[_7605])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7756 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7756] == bool(mem[_7756])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7606 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7606] == bool(mem[_7606])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7758 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7758] == bool(mem[_7758])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7607 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7607] == bool(mem[_7607])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7760 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7760] == bool(mem[_7760])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7608 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7608] == bool(mem[_7608])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7762 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7762] == bool(mem[_7762])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7609 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7609] == bool(mem[_7609])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7764 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7764] == bool(mem[_7764])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
            else:
                mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7610 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7610] == bool(mem[_7610])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7766 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7766] == bool(mem[_7766])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7611 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7611] == bool(mem[_7611])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7768 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7768] == bool(mem[_7768])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7612 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7612] == bool(mem[_7612])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7770 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7770] == bool(mem[_7770])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7613 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7613] == bool(mem[_7613])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7772 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7772] == bool(mem[_7772])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7614 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7614] == bool(mem[_7614])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7774 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7774] == bool(mem[_7774])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7615 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7615] == bool(mem[_7615])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7776 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7776] == bool(mem[_7776])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7616 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7616] == bool(mem[_7616])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7778 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7778] == bool(mem[_7778])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7617 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7617] == bool(mem[_7617])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7780 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7780] == bool(mem[_7780])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7618 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7618] == bool(mem[_7618])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7782 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7782] == bool(mem[_7782])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7619 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7619] == bool(mem[_7619])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7784 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7784] == bool(mem[_7784])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7620 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7620] == bool(mem[_7620])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7786 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7786] == bool(mem[_7786])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7621 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7621] == bool(mem[_7621])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7788 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7788] == bool(mem[_7788])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
    else:
        if not stor102[address(arg1)][address(msg.sender)]:
            revert with 0, 'ERC1155: caller is not owner nor approved'
        if not arg2:
            revert with 0, 'ERC1155: transfer to the zero address'
        mem[ceil32(ceil32(arg5.length)) + 97] = 1
        mem[ceil32(ceil32(arg5.length)) + 129] = arg3
        mem[ceil32(ceil32(arg5.length)) + 161] = 1
        mem[64] = ceil32(ceil32(arg5.length)) + 225
        mem[ceil32(ceil32(arg5.length)) + 193] = arg4
        if balanceOf[arg3][address(arg1)] < arg4:
            revert with 0, 'ERC1155: insufficient balance for transfer'
        balanceOf[arg3][address(arg1)] -= arg4
        if balanceOf[arg3][arg2] > !arg4:
            revert with 0, 17
        balanceOf[arg3][arg2] += arg4
        mem[ceil32(ceil32(arg5.length)) + 225] = arg3
        mem[ceil32(ceil32(arg5.length)) + 257] = arg4
        emit TransferSingle(arg3, arg4, msg.sender, arg1, arg2);
        if not ext_code.size(arg2):
            mem[0] = arg1
            mem[32] = 262
            idx = 0
            while idx < sub_627dd5ca[address(arg1)]:
                if idx >= sub_627dd5ca[address(arg1)]:
                    revert with 0, 50
                if stor261[stor262[address(arg1)][idx]].field_256 == arg3:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4262 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4262] == bool(mem[_4262])
                                else:
                                    s = 0
                                    while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4368 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4368] == bool(mem[_4368])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4263 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4263] == bool(mem[_4263])
                                else:
                                    s = 0
                                    while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4370 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4370] == bool(mem[_4370])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4264 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4264] == bool(mem[_4264])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4372 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4372] == bool(mem[_4372])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4265 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4265] == bool(mem[_4265])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4374 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4374] == bool(mem[_4374])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4266 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4266] == bool(mem[_4266])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4376 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4376] == bool(mem[_4376])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4267 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4267] == bool(mem[_4267])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4378 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4378] == bool(mem[_4378])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4268 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4268] == bool(mem[_4268])
                                else:
                                    s = 0
                                    while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4380 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4380] == bool(mem[_4380])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    s = 0
                                    while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4269 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4269] == bool(mem[_4269])
                                else:
                                    s = 0
                                    while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !s:
                                            revert with 0, 17
                                        if s == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        s = s + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _4382 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_4382] == bool(mem[_4382])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4270 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4270] == bool(mem[_4270])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4384 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4384] == bool(mem[_4384])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4271 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4271] == bool(mem[_4271])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4386 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4386] == bool(mem[_4386])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4272 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4272] == bool(mem[_4272])
                                    else:
                                        s = 0
                                        while s <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4388 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4388] == bool(mem[_4388])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        s = 0
                                        while s <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4273 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4273] == bool(mem[_4273])
                                    else:
                                        s = 0
                                        while s <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !s:
                                                revert with 0, 17
                                            if s == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            s = s + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _4390 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_4390] == bool(mem[_4390])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if 1 >= arg4:
                if idx == -1:
                    revert with 0, 17
                mem[0] = arg1
                mem[32] = 262
                idx = idx + 1
                continue 
        else:
            mem[ceil32(ceil32(arg5.length)) + 229] = msg.sender
            mem[ceil32(ceil32(arg5.length)) + 261] = arg1
            mem[ceil32(ceil32(arg5.length)) + 293] = arg3
            mem[ceil32(ceil32(arg5.length)) + 325] = arg4
            mem[ceil32(ceil32(arg5.length)) + 357] = 160
            mem[ceil32(ceil32(arg5.length)) + 389] = arg5.length
            mem[ceil32(ceil32(arg5.length)) + 421 len ceil32(arg5.length)] = arg5[all], Mask(8 * ceil32(arg5.length) - arg5.length, -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256, 1) >> -(8 * ceil32(arg5.length) + -ceil32(ceil32(arg5.length)) + 31) + 256
            if ceil32(arg5.length) <= arg5.length:
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7622 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7622] == bool(mem[_7622])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7790 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7790] == bool(mem[_7790])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7623 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7623] == bool(mem[_7623])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7792 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7792] == bool(mem[_7792])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7624 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7624] == bool(mem[_7624])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7794 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7794] == bool(mem[_7794])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7625 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7625] == bool(mem[_7625])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7796 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7796] == bool(mem[_7796])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7626 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7626] == bool(mem[_7626])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7798 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7798] == bool(mem[_7798])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7627 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7627] == bool(mem[_7627])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7800 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7800] == bool(mem[_7800])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7628 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7628] == bool(mem[_7628])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7802 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7802] == bool(mem[_7802])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7629 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7629] == bool(mem[_7629])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7804 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7804] == bool(mem[_7804])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7630 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7630] == bool(mem[_7630])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7806 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7806] == bool(mem[_7806])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7631 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7631] == bool(mem[_7631])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7808 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7808] == bool(mem[_7808])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7632 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7632] == bool(mem[_7632])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7810 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7810] == bool(mem[_7810])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7633 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7633] == bool(mem[_7633])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7812 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7812] == bool(mem[_7812])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
            else:
                mem[ceil32(ceil32(arg5.length)) + arg5.length + 421] = 0
                require ext_code.size(arg2)
                call arg2.onERC1155Received(address arg1, address arg2, uint256 arg3, uint256 arg4, bytes arg5) with:
                     gas gas_remaining wei
                    args msg.sender, address(arg1), arg3, arg4, Array(len=arg5.length, data=arg5[all])
                mem[ceil32(ceil32(arg5.length)) + 225] = ext_call.return_data[0]
                if not ext_call.success:
                    revert with 0, 'ERC1155: transfer to non ERC1155Receiver implementer'
                mem[64] = ceil32(ceil32(arg5.length)) + ceil32(return_data.size) + 225
                require return_data.size >= 32
                require ext_call.return_data[0] == Mask(32, 224, ext_call.return_data[0])
                if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                    revert with 0, 'ERC1155: ERC1155Receiver rejected tokens'
                mem[0] = arg1
                mem[32] = 262
                idx = 0
                s = 0
                while idx < sub_627dd5ca[address(arg1)]:
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if stor261[stor262[address(arg1)][idx]].field_256 != arg3:
                        if idx == -1:
                            revert with 0, 17
                        mem[0] = arg1
                        mem[32] = 262
                        idx = idx + 1
                        s = s
                        continue 
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    if not address(stor261[stor262[address(arg1)][idx]].field_0):
                        revert with 0, 'No node exist'
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_512:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if block.timestamp < stor261[stor262[address(arg1)][idx]].field_768:
                        revert with 0, 17
                    if not stor257:
                        revert with 0, 18
                    if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                        revert with 0, 50
                    if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                        revert with 0, 18
                    if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7634 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7634] == bool(mem[_7634])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7814 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7814] == bool(mem[_7814])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7635 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7635] == bool(mem[_7635])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7816 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7816] == bool(mem[_7816])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7636 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7636] == bool(mem[_7636])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7818 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7818] == bool(mem[_7818])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7637 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7637] == bool(mem[_7637])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7820 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7820] == bool(mem[_7820])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7638 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7638] == bool(mem[_7638])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7822 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7822] == bool(mem[_7822])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7639 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7639] == bool(mem[_7639])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !(((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7824 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7824] == bool(mem[_7824])
                    else:
                        if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                            revert with 0, 17
                        if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                            revert with 0, 17
                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                revert with 0, 50
                            if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                revert with 0, 18
                            if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7640 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7640] == bool(mem[_7640])
                                else:
                                    t = 0
                                    while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7826 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7826] == bool(mem[_7826])
                            else:
                                if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    revert with 0, 17
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                    t = 0
                                    while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                    if 0 / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), (0 / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7641 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7641] == bool(mem[_7641])
                                else:
                                    t = 0
                                    while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        if 0 > !t:
                                            revert with 0, 17
                                        if t == -1:
                                            revert with 0, 17
                                        mem[0] = arg1
                                        mem[32] = 262
                                        t = t + 1
                                        continue 
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                        revert with 0, 17
                                    if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                        revert with 0, 17
                                    if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                        revert with 0, 17
                                    if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                        revert with 0, 17
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                        revert with 0, 17
                                    if not stor255:
                                        revert with 0, 18
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                    if idx >= sub_627dd5ca[address(arg1)]:
                                        revert with 0, 50
                                    mem[0] = sub_627dd5ca[address(arg1)][idx]
                                    mem[32] = 261
                                    if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                        revert with 0, 17
                                    stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                    if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                        revert with 0, 17
                                    mem[mem[64] + 4] = arg1
                                    mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    require ext_code.size(sub_85adc8b0Address)
                                    call sub_85adc8b0Address.0xa9059cbb with:
                                         gas gas_remaining wei
                                        args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                    mem[mem[64]] = ext_call.return_data[0]
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    _7828 = mem[64]
                                    mem[64] = mem[64] + ceil32(return_data.size)
                                    require return_data.size >= 32
                                    require mem[_7828] == bool(mem[_7828])
                        else:
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                revert with 0, 17
                            if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                revert with 0, 17
                            if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) >= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7642 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7642] == bool(mem[_7642])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7830 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7830] == bool(mem[_7830])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7643 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7643] == bool(mem[_7643])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7832 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7832] == bool(mem[_7832])
                            else:
                                if block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 < block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                    revert with 0, 17
                                if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 < (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257):
                                    revert with 0, 17
                                if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10) > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024:
                                    revert with 0, 17
                                if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024)):
                                    revert with 0, 17
                                if stor261[stor262[address(arg1)][idx]].field_256 >= stor260.length:
                                    revert with 0, 50
                                if not stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768:
                                    revert with 0, 18
                                if not 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7644 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7644] == bool(mem[_7644])
                                    else:
                                        t = 0
                                        while t <= 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7834 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7834] == bool(mem[_7834])
                                else:
                                    if 10 > !(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768):
                                        revert with 0, 17
                                    if (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + 10 < 10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10:
                                        revert with 0, 17
                                    if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                        t = 0
                                        while t <= block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > 0:
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !(0 / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += 0 / stor255
                                        if 0 / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), (0 / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7645 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7645] == bool(mem[_7645])
                                    else:
                                        t = 0
                                        while t <= (10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10:
                                            if 0 > !t:
                                                revert with 0, 17
                                            if t == -1:
                                                revert with 0, 17
                                            mem[0] = arg1
                                            mem[32] = 262
                                            t = t + 1
                                            continue 
                                        if block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 < stor258:
                                            revert with 0, 17
                                        if stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 and (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257) - stor258 > -1 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536:
                                            revert with 0, 17
                                        if False and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1280 > 0:
                                            revert with 0, 17
                                        if 0 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536)):
                                            revert with 0, 17
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !stor261[stor262[address(arg1)][idx]].field_1280:
                                            revert with 0, 17
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) and stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256 > -1 / (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536):
                                            revert with 0, 17
                                        if not stor255:
                                            revert with 0, 18
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        stor261[stor262[address(arg1)][idx]].field_768 = block.timestamp
                                        if idx >= sub_627dd5ca[address(arg1)]:
                                            revert with 0, 50
                                        mem[0] = sub_627dd5ca[address(arg1)][idx]
                                        mem[32] = 261
                                        if stor261[stor262[address(arg1)][idx]].field_1024 > !((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255):
                                            revert with 0, 17
                                        stor261[stor262[address(arg1)][idx]].field_1024 += (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255
                                        if (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255 > !((((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280):
                                            revert with 0, 17
                                        mem[mem[64] + 4] = arg1
                                        mem[mem[64] + 36] = ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        require ext_code.size(sub_85adc8b0Address)
                                        call sub_85adc8b0Address.0xa9059cbb with:
                                             gas gas_remaining wei
                                            args address(arg1), ((block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (stor258 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1536 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + (((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_768 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) + (block.timestamp - stor261[stor262[address(arg1)][idx]].field_512 / stor257 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) - ((10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768) + -(10^9 / stor260[stor261[stor262[address(arg1)][idx]].field_256].field_768 % 10) + 10 / 10 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_1024 * stor260[stor261[stor262[address(arg1)][idx]].field_256].field_256) / stor255) + stor261[stor262[address(arg1)][idx]].field_1280
                                        mem[mem[64]] = ext_call.return_data[0]
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        _7836 = mem[64]
                                        mem[64] = mem[64] + ceil32(return_data.size)
                                        require return_data.size >= 32
                                        require mem[_7836] == bool(mem[_7836])
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    address(stor261[stor262[address(arg1)][idx]].field_0) = arg2
                    if idx >= sub_627dd5ca[arg1]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg2)]++
                    sub_627dd5ca[address(arg2)][sub_627dd5ca[address(arg2)]] = sub_627dd5ca[arg1][idx]
                    if idx >= sub_627dd5ca[address(arg1)]:
                        revert with 0, 50
                    sub_627dd5ca[address(arg1)][idx] = 0
                    if s == -1:
                        revert with 0, 17
                    if s + 1 >= arg4:
                    if idx == -1:
                        revert with 0, 17
                    mem[0] = arg1
                    mem[32] = 262
                    idx = idx + 1
                    s = s + 1
                    continue 
}



}
